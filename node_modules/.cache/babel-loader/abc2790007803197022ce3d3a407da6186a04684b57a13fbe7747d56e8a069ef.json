{"ast":null,"code":"var _jsxFileName = \"C:\\\\Moana_SSD\\\\WebDev\\\\Projetos\\\\pokebuzz\\\\src\\\\components\\\\Question\\\\index.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport Option from \"../Option\";\nimport questionOptions from '../../data/questionOptions.json';\n// import questionNameMap from '../../data/questionNameMap.json';\n\n// ---------- Renders each question of the Form ---------- //\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Question({\n  label,\n  index,\n  getFormAnswers\n}) {\n  _s();\n  const [answer, setAnswer] = useState('');\n  // console.log(questionNameMap)\n\n  //     const questionOptions = {        \n  //     colorOptions: [\"Black\", \"Blue\", \"Brown\", \"Gray\", \"Green\", \"Pink\", \"Purple\", \"Red\", \"Yellow\", \"White\"],\n  //     transportationOptions: [\"Car\", \"Airplane\", \"Ship\", \"Train\", \"By foot\"],\n  //     settingOptions: [\"Countryside\", \"Beach\", \"Mountain\", \"City\", \"Cave\"],\n  //     naturalPhenomenonOptions: [\"Volcano\", \"Earthquake\", \"Tsunami\", \"Hurricane\", \"Storm\", \"Sand storm\", \"Blizzard\"],\n  //     activityOptions: [\"Pool party\", \"Work out\", \"Circus\", \"Camping\", \"Stay in and chill\", \"Rally\", \"Hiking\"],\n  //     chillOptions: [\"Gym\", \"Cemetery\", \"Mall\", \"Pool\", \"Library\", \"Park\", \"Sauna\"],\n  //     taylorOptions: [\"Debut\", \"Fearless TV\", \"Speak Now TV\", \"Red TV\", \"1989 TV\", \"Reputation\", \"Lover\", \"Folklore\", \"Evermore\", \"Midnights\", \"The Tortured Poets Department\"]\n  // }\n\n  const questionNameMap = {\n    colorOptions: 'color',\n    transportationOptions: 'transportation',\n    settingOptions: 'setting',\n    naturalPhenomenonOptions: 'naturalPhenomenon',\n    activityOptions: 'activity',\n    chillOptions: 'placeToChill',\n    taylorOptions: 'taylorAlbum'\n  };\n  const optionKey = Object.keys(questionOptions)[index];\n  // console.log(optionKey)\n  const questionName = questionNameMap[optionKey];\n  // console.log(questionName)\n\n  const handleChange = e => {\n    const selectedOption = e.target.value;\n    // console.log('Question name:', questionName)\n    // console.log('Opção selecionada:', selectedOption);\n    setAnswer(selectedOption);\n    getFormAnswers({\n      [questionName]: selectedOption\n    }); // From Form component\n  };\n  return /*#__PURE__*/_jsxDEV(\"fieldset\", {\n    children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }, this), questionOptions[optionKey].map(option => /*#__PURE__*/_jsxDEV(Option, {\n      id: `option-${option.toLowerCase().replace(/\\s/g, '')}`,\n      name: optionKey,\n      value: option.toLowerCase().replace(/\\s/g, ''),\n      content: option,\n      getData: handleChange\n    }, `option-${option.toLowerCase().replace(/\\s/g, '')}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 21\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 13\n  }, this);\n}\n_s(Question, \"epwReYWmqQUcEJwlNWWu20QHlN0=\");\n_c = Question;\nexport default Question;\n\n// Tentar colocar todas as respostas em um objeto ao invés de estados individuais. Fazer tipo foi feito no Form, mas fazer direto aqui, sem precisar mandar tanta variável para o Form.\n// Encurtar caminhos, otimizar processos, reduzir código. KISS.\nvar _c;\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"names":["useState","useEffect","Option","questionOptions","jsxDEV","_jsxDEV","Question","label","index","getFormAnswers","_s","answer","setAnswer","questionNameMap","colorOptions","transportationOptions","settingOptions","naturalPhenomenonOptions","activityOptions","chillOptions","taylorOptions","optionKey","Object","keys","questionName","handleChange","e","selectedOption","target","value","children","fileName","_jsxFileName","lineNumber","columnNumber","map","option","id","toLowerCase","replace","name","content","getData","_c","$RefreshReg$"],"sources":["C:/Moana_SSD/WebDev/Projetos/pokebuzz/src/components/Question/index.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport Option from \"../Option\";\r\nimport questionOptions from '../../data/questionOptions.json';\r\n// import questionNameMap from '../../data/questionNameMap.json';\r\n\r\n// ---------- Renders each question of the Form ---------- //\r\nfunction Question ({ label, index, getFormAnswers }) {\r\n\r\n    const [answer, setAnswer] = useState('');\r\n    // console.log(questionNameMap)\r\n\r\n//     const questionOptions = {        \r\n//     colorOptions: [\"Black\", \"Blue\", \"Brown\", \"Gray\", \"Green\", \"Pink\", \"Purple\", \"Red\", \"Yellow\", \"White\"],\r\n//     transportationOptions: [\"Car\", \"Airplane\", \"Ship\", \"Train\", \"By foot\"],\r\n//     settingOptions: [\"Countryside\", \"Beach\", \"Mountain\", \"City\", \"Cave\"],\r\n//     naturalPhenomenonOptions: [\"Volcano\", \"Earthquake\", \"Tsunami\", \"Hurricane\", \"Storm\", \"Sand storm\", \"Blizzard\"],\r\n//     activityOptions: [\"Pool party\", \"Work out\", \"Circus\", \"Camping\", \"Stay in and chill\", \"Rally\", \"Hiking\"],\r\n//     chillOptions: [\"Gym\", \"Cemetery\", \"Mall\", \"Pool\", \"Library\", \"Park\", \"Sauna\"],\r\n//     taylorOptions: [\"Debut\", \"Fearless TV\", \"Speak Now TV\", \"Red TV\", \"1989 TV\", \"Reputation\", \"Lover\", \"Folklore\", \"Evermore\", \"Midnights\", \"The Tortured Poets Department\"]\r\n// }\r\n\r\n\r\n    const questionNameMap = {\r\n        colorOptions: 'color',\r\n        transportationOptions: 'transportation',\r\n        settingOptions: 'setting',\r\n        naturalPhenomenonOptions: 'naturalPhenomenon',\r\n        activityOptions: 'activity',\r\n        chillOptions: 'placeToChill',\r\n        taylorOptions: 'taylorAlbum'\r\n    };\r\n\r\n    const optionKey = Object.keys(questionOptions)[index];\r\n    // console.log(optionKey)\r\n    const questionName = questionNameMap[optionKey];\r\n    // console.log(questionName)\r\n\r\n    const handleChange = e => {\r\n        const selectedOption = e.target.value;\r\n        // console.log('Question name:', questionName)\r\n        // console.log('Opção selecionada:', selectedOption);\r\n        setAnswer(selectedOption);\r\n        getFormAnswers({ [questionName]: selectedOption }); // From Form component\r\n    }\r\n\r\n       \r\n\r\n\treturn (\r\n            <fieldset>\r\n                <legend>{label}</legend>\r\n                {questionOptions[optionKey].map(option => \r\n                    <Option \r\n                        key={`option-${option.toLowerCase().replace(/\\s/g, '')}`} \r\n                        id={`option-${option.toLowerCase().replace(/\\s/g, '')}`} \r\n                        name={optionKey} \r\n                        value={option.toLowerCase().replace(/\\s/g, '')} \r\n                        content={option} \r\n                        getData={handleChange} />\r\n                )}\r\n            </fieldset>\r\n\t)\r\n}\r\n\r\nexport default Question;\r\n\r\n// Tentar colocar todas as respostas em um objeto ao invés de estados individuais. Fazer tipo foi feito no Form, mas fazer direto aqui, sem precisar mandar tanta variável para o Form.\r\n// Encurtar caminhos, otimizar processos, reduzir código. KISS.\r\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,MAAM,MAAM,WAAW;AAC9B,OAAOC,eAAe,MAAM,iCAAiC;AAC7D;;AAEA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,QAAQA,CAAE;EAAEC,KAAK;EAAEC,KAAK;EAAEC;AAAe,CAAC,EAAE;EAAAC,EAAA;EAEjD,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACxC;;EAEJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGI,MAAMa,eAAe,GAAG;IACpBC,YAAY,EAAE,OAAO;IACrBC,qBAAqB,EAAE,gBAAgB;IACvCC,cAAc,EAAE,SAAS;IACzBC,wBAAwB,EAAE,mBAAmB;IAC7CC,eAAe,EAAE,UAAU;IAC3BC,YAAY,EAAE,cAAc;IAC5BC,aAAa,EAAE;EACnB,CAAC;EAED,MAAMC,SAAS,GAAGC,MAAM,CAACC,IAAI,CAACpB,eAAe,CAAC,CAACK,KAAK,CAAC;EACrD;EACA,MAAMgB,YAAY,GAAGX,eAAe,CAACQ,SAAS,CAAC;EAC/C;;EAEA,MAAMI,YAAY,GAAGC,CAAC,IAAI;IACtB,MAAMC,cAAc,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK;IACrC;IACA;IACAjB,SAAS,CAACe,cAAc,CAAC;IACzBlB,cAAc,CAAC;MAAE,CAACe,YAAY,GAAGG;IAAe,CAAC,CAAC,CAAC,CAAC;EACxD,CAAC;EAIJ,oBACWtB,OAAA;IAAAyB,QAAA,gBACIzB,OAAA;MAAAyB,QAAA,EAASvB;IAAK;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC,EACvB/B,eAAe,CAACkB,SAAS,CAAC,CAACc,GAAG,CAACC,MAAM,iBAClC/B,OAAA,CAACH,MAAM;MAEHmC,EAAE,EAAE,UAAUD,MAAM,CAACE,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,EAAG;MACxDC,IAAI,EAAEnB,SAAU;MAChBQ,KAAK,EAAEO,MAAM,CAACE,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAE;MAC/CE,OAAO,EAAEL,MAAO;MAChBM,OAAO,EAAEjB;IAAa,GALjB,UAAUW,MAAM,CAACE,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKhC,CAChC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACK,CAAC;AAEvB;AAACxB,EAAA,CAvDQJ,QAAQ;AAAAqC,EAAA,GAARrC,QAAQ;AAyDjB,eAAeA,QAAQ;;AAEvB;AACA;AAAA,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}