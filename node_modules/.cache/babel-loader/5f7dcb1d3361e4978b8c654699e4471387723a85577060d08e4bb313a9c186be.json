{"ast":null,"code":"var _jsxFileName = \"C:\\\\Moana_SSD\\\\WebDev\\\\Projetos\\\\pokebuzz\\\\src\\\\pages\\\\Home.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { GetAPIData } from \"../services/APIData\";\nimport Form from \"../components/Form\";\nimport PokemonResults from \"../components/PokemonResults\";\nimport './Home.css';\n\n// ---------- Renders the Form and the final results ---------- //\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Home() {\n  _s();\n  // ----- Creating the state for the constants that will be used -----\n  // const [APIDataPokemon, setAPIDataPokemon] = useState([]);\n  // const [APIDataSpecies, setAPIDataSpecies] = useState([]);\n  // const [APIDataEvolutions, setAPIDataEvolutions] = useState([]);\n  const [evolutionsGroups, setEvolutionsGroups] = useState([]);\n  const [pokemonAttributes, setPokemonAttributes] = useState([]);\n  const [finalScore, setfinalScore] = useState([]);\n  const [formAnswers, setFormAnswers] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Gets the data from the API\n        const {\n          pokemon,\n          species,\n          evolutions\n        } = await GetAPIData();\n        console.log('Teste');\n        if (pokemon.length && species.length && evolutions.length) {\n          const attributes = pokemon.map((pData, index) => {\n            console.log(pData, index);\n          });\n        }\n      } catch {}\n    };\n    fetchData();\n  }, []);\n  // ----- On page load -----\n  // useEffect(() => {\n  //     // ----- Calls the function GetAPIData imported from APIData.jsx to set pokemon, species and evolution data -----\n  //     const fetchData = async () => {\n  //        await GetAPIData().then(data => {\n  //         setAPIDataPokemon(data.pokemon);\n  //         setAPIDataSpecies(data.species);\n  //         setAPIDataEvolutions(data.evolutions);\n\n  //         // console.log('evolutions', APIDataEvolutions);\n  //     });\n  // };\n  //         fetchData();\n  // }, []);\n\n  // ----- On APIDataPokemon, APIDataSpecies or APIDataEvolutions update... -----\n  // useEffect(() => {\n  //     // ----- If the data returned alright... -----\n  //     if (APIDataPokemon.length > 0 && APIDataSpecies.length > 0 && APIDataEvolutions.length > 0) {\n  //         // ----- Creates an array with information/attributes of all pokemon -----\n  //         getPokemonAttributes();\n\n  //         // ----- Creates an array grouping all evolutions of an especies -----\n  //         const evolutions = getEvolutionGroups(APIDataEvolutions); \n  //         setEvolutionsGroups(evolutions);\n\n  //     } else {\n  //         console.log('No data available yet.');\n  //     }\n  // }, [APIDataPokemon, APIDataSpecies, APIDataEvolutions]);\n\n  // ----- Gathers information on each pokemon and species on one single array -----\n  // const getPokemonAttributes = () => {\n  //     console.log('Entrou em atributos')\n\n  //     const dataExtractionPokemon = APIDataPokemon.map((data) => {\n  //         return {\n  //             id: data.data.id,\n  //             name: data.data.name,\n  //             height: data.data.height,\n  //             weight: data.data.weight,\n  //             type1: data.data.types[0].type.name,\n  //             type2: data.data.types[1] ? data.data.types[1].type.name : null,\n  //             image: data.data.sprites.other.dream_world.front_default,\n  //         }\n  //     })\n\n  //     const dataExtractionSpecies = APIDataSpecies.map(data => {\n  //         return {\n  //             color: data.data.color.name,\n  //             habitat: data.data.habitat.name\n  //         }\n  //     })\n\n  //     const attributesAll = dataExtractionPokemon.map((pokemonInfo, index) => {\n  //         const speciesInfo = dataExtractionSpecies[index] || {};\n  //         return {\n  //             ...pokemonInfo,\n  //             ...speciesInfo\n  //         }\n  //     })\n\n  //     setPokemonAttributes(attributesAll);\n\n  // }\n\n  // const getEvolutionGroups = (evolutionsData) => {\n  //     return evolutionsData.map(groups => ({\n  //         first: groups.data.chain.species.name || null,\n  //         second: groups.data.chain.evolves_to?.[0]?.species?.name || null,\n  //         third: groups.data.chain.evolves_to?.[0]?.evolves_to?.[0]?.species?.name || null\n  //     }));\n  // };\n\n  // ----- Sets the form anwsers and the calculated results for type/habitat received from the Form component -----\n  const handleFormSubmit = async (finalScore, formAnswers) => {\n    setfinalScore(finalScore);\n    setFormAnswers(formAnswers);\n  };\n\n  // ----- If the form hasn't been submitted, return Form. If it has, return results. -----\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: finalScore === 'batata' ? /*#__PURE__*/_jsxDEV(PokemonResults, {\n      finalScore: finalScore,\n      pokemonAttributes: pokemonAttributes,\n      evolutionsGroups: evolutionsGroups,\n      formAnswers: formAnswers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(Form, {\n      getFormResults: handleFormSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(Home, \"lKcC/kxoki05oN5ZC/8VXFeMsys=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["useEffect","useState","GetAPIData","Form","PokemonResults","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","_s","evolutionsGroups","setEvolutionsGroups","pokemonAttributes","setPokemonAttributes","finalScore","setfinalScore","formAnswers","setFormAnswers","fetchData","pokemon","species","evolutions","console","log","length","attributes","map","pData","index","handleFormSubmit","children","fileName","_jsxFileName","lineNumber","columnNumber","getFormResults","_c","$RefreshReg$"],"sources":["C:/Moana_SSD/WebDev/Projetos/pokebuzz/src/pages/Home.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { GetAPIData } from \"../services/APIData\";\r\nimport Form from \"../components/Form\";\r\nimport PokemonResults from \"../components/PokemonResults\";\r\nimport './Home.css'\r\n\r\n// ---------- Renders the Form and the final results ---------- //\r\nfunction Home () {    \r\n    \r\n    // ----- Creating the state for the constants that will be used -----\r\n    // const [APIDataPokemon, setAPIDataPokemon] = useState([]);\r\n    // const [APIDataSpecies, setAPIDataSpecies] = useState([]);\r\n    // const [APIDataEvolutions, setAPIDataEvolutions] = useState([]);\r\n    const [evolutionsGroups, setEvolutionsGroups] = useState([]);\r\n    const [pokemonAttributes, setPokemonAttributes] = useState([]);\r\n    const [finalScore, setfinalScore] = useState([]);\r\n    const [formAnswers, setFormAnswers] = useState([]);\r\n    \r\n\r\n    useEffect (() => {\r\n        const fetchData = async () => {\r\n            \r\n            try {\r\n\r\n                // Gets the data from the API\r\n                const { pokemon, species, evolutions } = await GetAPIData();\r\n                console.log('Teste')\r\n\r\n                if (pokemon.length && species.length && evolutions.length) {\r\n\r\n                    const attributes =  pokemon.map((pData,index) => {\r\n                        console.log(pData, index);\r\n                    })\r\n\r\n                }\r\n\r\n            } catch {\r\n\r\n            }\r\n        }\r\n        fetchData();\r\n    }, [])\r\n    // ----- On page load -----\r\n    // useEffect(() => {\r\n    //     // ----- Calls the function GetAPIData imported from APIData.jsx to set pokemon, species and evolution data -----\r\n    //     const fetchData = async () => {\r\n    //        await GetAPIData().then(data => {\r\n    //         setAPIDataPokemon(data.pokemon);\r\n    //         setAPIDataSpecies(data.species);\r\n    //         setAPIDataEvolutions(data.evolutions);\r\n\r\n    //         // console.log('evolutions', APIDataEvolutions);\r\n    //     });\r\n    // };\r\n    //         fetchData();\r\n    // }, []);\r\n\r\n    // ----- On APIDataPokemon, APIDataSpecies or APIDataEvolutions update... -----\r\n    // useEffect(() => {\r\n    //     // ----- If the data returned alright... -----\r\n    //     if (APIDataPokemon.length > 0 && APIDataSpecies.length > 0 && APIDataEvolutions.length > 0) {\r\n    //         // ----- Creates an array with information/attributes of all pokemon -----\r\n    //         getPokemonAttributes();\r\n\r\n    //         // ----- Creates an array grouping all evolutions of an especies -----\r\n    //         const evolutions = getEvolutionGroups(APIDataEvolutions); \r\n    //         setEvolutionsGroups(evolutions);\r\n            \r\n    //     } else {\r\n    //         console.log('No data available yet.');\r\n    //     }\r\n    // }, [APIDataPokemon, APIDataSpecies, APIDataEvolutions]);\r\n\r\n    // ----- Gathers information on each pokemon and species on one single array -----\r\n    // const getPokemonAttributes = () => {\r\n    //     console.log('Entrou em atributos')\r\n\r\n    //     const dataExtractionPokemon = APIDataPokemon.map((data) => {\r\n    //         return {\r\n    //             id: data.data.id,\r\n    //             name: data.data.name,\r\n    //             height: data.data.height,\r\n    //             weight: data.data.weight,\r\n    //             type1: data.data.types[0].type.name,\r\n    //             type2: data.data.types[1] ? data.data.types[1].type.name : null,\r\n    //             image: data.data.sprites.other.dream_world.front_default,\r\n    //         }\r\n    //     })\r\n\r\n    //     const dataExtractionSpecies = APIDataSpecies.map(data => {\r\n    //         return {\r\n    //             color: data.data.color.name,\r\n    //             habitat: data.data.habitat.name\r\n    //         }\r\n    //     })\r\n\r\n    //     const attributesAll = dataExtractionPokemon.map((pokemonInfo, index) => {\r\n    //         const speciesInfo = dataExtractionSpecies[index] || {};\r\n    //         return {\r\n    //             ...pokemonInfo,\r\n    //             ...speciesInfo\r\n    //         }\r\n    //     })\r\n\r\n    //     setPokemonAttributes(attributesAll);\r\n        \r\n    // }\r\n\r\n    // const getEvolutionGroups = (evolutionsData) => {\r\n    //     return evolutionsData.map(groups => ({\r\n    //         first: groups.data.chain.species.name || null,\r\n    //         second: groups.data.chain.evolves_to?.[0]?.species?.name || null,\r\n    //         third: groups.data.chain.evolves_to?.[0]?.evolves_to?.[0]?.species?.name || null\r\n    //     }));\r\n    // };\r\n\r\n    // ----- Sets the form anwsers and the calculated results for type/habitat received from the Form component -----\r\n    const handleFormSubmit = async (finalScore, formAnswers) => {\r\n        setfinalScore(finalScore);\r\n        setFormAnswers(formAnswers)\r\n    }\r\n\r\n    // ----- If the form hasn't been submitted, return Form. If it has, return results. -----\r\n\treturn (\r\n        <> \r\n        {/* {finalScore.length > 0 ?  */}\r\n        {finalScore === 'batata' ?\r\n            <PokemonResults \r\n                finalScore={finalScore} \r\n                pokemonAttributes={pokemonAttributes} \r\n                evolutionsGroups={evolutionsGroups} \r\n                formAnswers={formAnswers} \r\n            /> \r\n                :\r\n            <Form \r\n                getFormResults={handleFormSubmit} \r\n            />\r\n        }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,UAAU,QAAQ,qBAAqB;AAChD,OAAOC,IAAI,MAAM,oBAAoB;AACrC,OAAOC,cAAc,MAAM,8BAA8B;AACzD,OAAO,YAAY;;AAEnB;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACA,SAASC,IAAIA,CAAA,EAAI;EAAAC,EAAA;EAEb;EACA;EACA;EACA;EACA,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAM,CAACY,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM,CAACc,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACgB,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAGlDD,SAAS,CAAE,MAAM;IACb,MAAMmB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAE1B,IAAI;QAEA;QACA,MAAM;UAAEC,OAAO;UAAEC,OAAO;UAAEC;QAAW,CAAC,GAAG,MAAMpB,UAAU,CAAC,CAAC;QAC3DqB,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;QAEpB,IAAIJ,OAAO,CAACK,MAAM,IAAIJ,OAAO,CAACI,MAAM,IAAIH,UAAU,CAACG,MAAM,EAAE;UAEvD,MAAMC,UAAU,GAAIN,OAAO,CAACO,GAAG,CAAC,CAACC,KAAK,EAACC,KAAK,KAAK;YAC7CN,OAAO,CAACC,GAAG,CAACI,KAAK,EAAEC,KAAK,CAAC;UAC7B,CAAC,CAAC;QAEN;MAEJ,CAAC,CAAC,MAAM,CAER;IACJ,CAAC;IACDV,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EACN;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA,MAAMW,gBAAgB,GAAG,MAAAA,CAAOf,UAAU,EAAEE,WAAW,KAAK;IACxDD,aAAa,CAACD,UAAU,CAAC;IACzBG,cAAc,CAACD,WAAW,CAAC;EAC/B,CAAC;;EAED;EACH,oBACOX,OAAA,CAAAE,SAAA;IAAAuB,QAAA,EAEChB,UAAU,KAAK,QAAQ,gBACpBT,OAAA,CAACF,cAAc;MACXW,UAAU,EAAEA,UAAW;MACvBF,iBAAiB,EAAEA,iBAAkB;MACrCF,gBAAgB,EAAEA,gBAAiB;MACnCM,WAAW,EAAEA;IAAY;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CAAC,gBAEF7B,OAAA,CAACH,IAAI;MACDiC,cAAc,EAAEN;IAAiB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpC;EAAC,gBAEJ,CAAC;AAEX;AAACzB,EAAA,CArIQD,IAAI;AAAA4B,EAAA,GAAJ5B,IAAI;AAuIb,eAAeA,IAAI;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}