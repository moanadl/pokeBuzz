{"ast":null,"code":"import scoreTable from\"../data/scoreTable.json\";import pokemonTypes from\"../data/pokemonTypes.json\";// ---------- Calculates the results of the better ranked types/habitas based on the scoreTable for each option selected by the user ---------- //\nexport const getResults=formAnswers=>{// ----- Initializing the score for each type/habitat -----\nconst score={};// Creating the object\npokemonTypes.forEach(type=>{score[type]=0;});// ----- Iterating through the user's answers to calculate the results for type/habitat -----\nObject.entries(formAnswers).forEach(_ref=>{let[questionTitle,answer]=_ref;const questionOptions=scoreTable.find(scoreTableItem=>scoreTableItem.question===questionTitle);if(!questionOptions)return;// Color option\nconst answerPoints=questionOptions.answers.find(a=>a.value===answer);if(!answerPoints)return;Object.entries(answerPoints.points).forEach(_ref2=>{let[type,points]=_ref2;score[type]+=points;});});// ----- Sorting the user's score from highest to lowest -----\nconst sortedScore=Object.entries(score).map(_ref3=>{let[type,points]=_ref3;return{type,points};}).sort((a,b)=>b.points-a.points);return sortedScore;};","map":{"version":3,"names":["scoreTable","pokemonTypes","getResults","formAnswers","score","forEach","type","Object","entries","_ref","questionTitle","answer","questionOptions","find","scoreTableItem","question","answerPoints","answers","a","value","points","_ref2","sortedScore","map","_ref3","sort","b"],"sources":["C:/Moana_SSD/WebDev/Projetos/pokebuzz/src/utils/results.js"],"sourcesContent":["import scoreTable from \"../data/scoreTable.json\"\r\nimport pokemonTypes from \"../data/pokemonTypes.json\";\r\n\r\n// ---------- Calculates the results of the better ranked types/habitas based on the scoreTable for each option selected by the user ---------- //\r\nexport const getResults = (formAnswers) => {\r\n\r\n\t// ----- Initializing the score for each type/habitat -----\r\n\tconst score = {};\r\n\r\n\t// Creating the object\r\n\tpokemonTypes.forEach(type => {\r\n\t\tscore[type] = 0;\r\n\t});\r\n\r\n\t// ----- Iterating through the user's answers to calculate the results for type/habitat -----\r\n\tObject.entries(formAnswers).forEach(([questionTitle, answer]) => {\r\n\t\tconst questionOptions = scoreTable.find(scoreTableItem => scoreTableItem.question === questionTitle);\r\n\t\tif (!questionOptions) return // Color option\r\n\r\n\t\tconst answerPoints = questionOptions.answers.find(a => a.value === answer);\r\n\t\tif (!answerPoints) return\r\n\r\n\t\tObject.entries(answerPoints.points).forEach(([type, points]) => {\r\n\t\t\tscore[type] += points;\r\n\t\t})\r\n\t})\r\n\r\n\t// ----- Sorting the user's score from highest to lowest -----\r\n\tconst sortedScore = Object.entries(score)\r\n\t.map(([type, points]) => ({ type, points }))\r\n\t.sort((a, b) => b.points - a.points);\r\n\r\n\treturn sortedScore;\r\n};\r\n"],"mappings":"AAAA,MAAO,CAAAA,UAAU,KAAM,yBAAyB,CAChD,MAAO,CAAAC,YAAY,KAAM,2BAA2B,CAEpD;AACA,MAAO,MAAM,CAAAC,UAAU,CAAIC,WAAW,EAAK,CAE1C;AACA,KAAM,CAAAC,KAAK,CAAG,CAAC,CAAC,CAEhB;AACAH,YAAY,CAACI,OAAO,CAACC,IAAI,EAAI,CAC5BF,KAAK,CAACE,IAAI,CAAC,CAAG,CAAC,CAChB,CAAC,CAAC,CAEF;AACAC,MAAM,CAACC,OAAO,CAACL,WAAW,CAAC,CAACE,OAAO,CAACI,IAAA,EAA6B,IAA5B,CAACC,aAAa,CAAEC,MAAM,CAAC,CAAAF,IAAA,CAC3D,KAAM,CAAAG,eAAe,CAAGZ,UAAU,CAACa,IAAI,CAACC,cAAc,EAAIA,cAAc,CAACC,QAAQ,GAAKL,aAAa,CAAC,CACpG,GAAI,CAACE,eAAe,CAAE,OAAO;AAE7B,KAAM,CAAAI,YAAY,CAAGJ,eAAe,CAACK,OAAO,CAACJ,IAAI,CAACK,CAAC,EAAIA,CAAC,CAACC,KAAK,GAAKR,MAAM,CAAC,CAC1E,GAAI,CAACK,YAAY,CAAE,OAEnBT,MAAM,CAACC,OAAO,CAACQ,YAAY,CAACI,MAAM,CAAC,CAACf,OAAO,CAACgB,KAAA,EAAoB,IAAnB,CAACf,IAAI,CAAEc,MAAM,CAAC,CAAAC,KAAA,CAC1DjB,KAAK,CAACE,IAAI,CAAC,EAAIc,MAAM,CACtB,CAAC,CAAC,CACH,CAAC,CAAC,CAEF;AACA,KAAM,CAAAE,WAAW,CAAGf,MAAM,CAACC,OAAO,CAACJ,KAAK,CAAC,CACxCmB,GAAG,CAACC,KAAA,MAAC,CAAClB,IAAI,CAAEc,MAAM,CAAC,CAAAI,KAAA,OAAM,CAAElB,IAAI,CAAEc,MAAO,CAAC,EAAC,CAAC,CAC3CK,IAAI,CAAC,CAACP,CAAC,CAAEQ,CAAC,GAAKA,CAAC,CAACN,MAAM,CAAGF,CAAC,CAACE,MAAM,CAAC,CAEpC,MAAO,CAAAE,WAAW,CACnB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}