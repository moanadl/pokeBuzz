{"ast":null,"code":"var _jsxFileName = \"C:\\\\Moana_SSD\\\\WebDev\\\\Projetos\\\\pokebuzz\\\\src\\\\components\\\\PokemonResults\\\\index.jsx\";\nimport PokeCard from \"../PokeCard\";\n\n// ---------- Finds the final 6 pokemons and render them ---------- //\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PokemonResults(props) {\n  let finalPokemons = [];\n  const controlArray = [];\n  let controlVariable = 0;\n\n  // Verificar se pokemon tem plural\n  // console.log('evolutions', props.evolutions)\n\n  // ----- While the number of pokemon is smaller than 6, do the loop -----\n  while (finalPokemons.length < 6) {\n    // console.log('Entrou!');\n    // console.log('controlVariable:', controlVariable);\n\n    const filteredType_Habitat = props.pokemonAttributes.filter(attr => attr.type1 === props.finalScore[controlVariable].type_habitat || attr.type2 === props.finalScore[controlVariable].type_habitat || attr.habitat === props.finalScore[controlVariable].type_habitat);\n\n    // console.log(filteredType_Habitat)\n\n    let filteredColor = filteredType_Habitat.filter(pokeColor => pokeColor.color === props.formAnswers.color || pokeColor.color === 'yellow');\n    // colocar para shuffle cores tbm\n\n    // console.log('pokemons filtrados pela cor:', filteredColor)\n    let filteredColorCopy = filteredColor.map(x => x);\n    const shuffle = myArray => {\n      for (let i = myArray.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [myArray[i], myArray[j]] = [myArray[j], myArray[i]];\n      }\n      return myArray;\n    };\n    const filteredColorShuffled = shuffle(filteredColorCopy);\n\n    //console.log('Shuffle:', filteredColorShuffled);\n\n    for (let pokemonIndex in filteredColorShuffled) {\n      // pokemonIndex é um index ou um nome?\n      let currentPokemon = filteredColorShuffled[pokemonIndex].name;\n      let newIndex = props.evolutions.findIndex(group => group.first === currentPokemon || group.second === currentPokemon || group.third === currentPokemon);\n      //console.log('índice da evolução', newIndex);\n\n      if (controlArray.includes(props.evolutions[newIndex].first || props.evolutions[newIndex].second || props.evolutions[newIndex].third)) {\n        //console.log('Já tem uma evolução!')\n        continue;\n      }\n      if (finalPokemons.length >= 6) {\n        break;\n      }\n\n      // !!!!! Ajeitar condicional para jolteon, vaporeon, etc.\n      // finalPokemons.push(filteredColorShuffled[pokemonIndex])\n      finalPokemons = [...finalPokemons, filteredColorShuffled[pokemonIndex]];\n      // finalPokemons.push(pokemonIndex)\n      controlArray.push(filteredColorShuffled[pokemonIndex].name);\n      // console.log('Array de controle:', controlArray)\n      // console.log('Lista final de pokemon:', finalPokemons)\n\n      // console.log('Nome:' , filteredColor[pokemonIndex]);\n      // console.log('Índice:', newIndex);\n      // console.log('Lista final:', finalPokemons);\n    }\n    controlVariable++;\n  }\n  console.log('Lista final final de pokemon:', finalPokemons);\n\n  // console.log('filteredType_Habitat:', filteredType_Habitat);\n  // console.log('filteredColor:', filteredColor)\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-container\",\n      children: finalPokemons.map(pokeAttributes => {\n        return /*#__PURE__*/_jsxDEV(PokeCard, {\n          name: pokeAttributes.name,\n          image: pokeAttributes.image\n        }, pokeAttributes.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 24\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 3\n  }, this);\n}\n_c = PokemonResults;\nexport default PokemonResults;\nvar _c;\n$RefreshReg$(_c, \"PokemonResults\");","map":{"version":3,"names":["PokeCard","jsxDEV","_jsxDEV","PokemonResults","props","finalPokemons","controlArray","controlVariable","length","filteredType_Habitat","pokemonAttributes","filter","attr","type1","finalScore","type_habitat","type2","habitat","filteredColor","pokeColor","color","formAnswers","filteredColorCopy","map","x","shuffle","myArray","i","j","Math","floor","random","filteredColorShuffled","pokemonIndex","currentPokemon","name","newIndex","evolutions","findIndex","group","first","second","third","includes","push","console","log","children","className","pokeAttributes","image","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Moana_SSD/WebDev/Projetos/pokebuzz/src/components/PokemonResults/index.jsx"],"sourcesContent":["import PokeCard from \"../PokeCard\";\r\n\r\n// ---------- Finds the final 6 pokemons and render them ---------- //\r\nfunction PokemonResults (props) {\r\n    \r\n    let finalPokemons = [];\r\n    const controlArray = [];\r\n    let controlVariable = 0;\r\n\r\n    // Verificar se pokemon tem plural\r\n    // console.log('evolutions', props.evolutions)\r\n    \r\n    // ----- While the number of pokemon is smaller than 6, do the loop -----\r\n    while (finalPokemons.length < 6 ) {\r\n        // console.log('Entrou!');\r\n        // console.log('controlVariable:', controlVariable);\r\n\r\n        const filteredType_Habitat = props.pokemonAttributes.filter(\r\n            attr => attr.type1 === props.finalScore[controlVariable].type_habitat || \r\n            attr.type2 === props.finalScore[controlVariable].type_habitat || \r\n            attr.habitat === props.finalScore[controlVariable].type_habitat\r\n        );\r\n\r\n        // console.log(filteredType_Habitat)\r\n\r\n        let filteredColor = filteredType_Habitat.filter(pokeColor => pokeColor.color === props.formAnswers.color || pokeColor.color === 'yellow');\r\n        // colocar para shuffle cores tbm\r\n\r\n\r\n        // console.log('pokemons filtrados pela cor:', filteredColor)\r\n        let filteredColorCopy = filteredColor.map((x) => x);\r\n        \r\n        const shuffle = (myArray) => { \r\n            for (let i = myArray.length - 1; i > 0; i--) { \r\n                const j = Math.floor(Math.random() * (i + 1)); \r\n                [myArray[i], myArray[j]] = [myArray[j], myArray[i]]; \r\n            } \r\n            return myArray; \r\n        }; \r\n\r\n        const filteredColorShuffled = shuffle(filteredColorCopy);\r\n\r\n        //console.log('Shuffle:', filteredColorShuffled);\r\n\r\n        for (let pokemonIndex in filteredColorShuffled) {\r\n            // pokemonIndex é um index ou um nome?\r\n            let currentPokemon = filteredColorShuffled[pokemonIndex].name;\r\n            let newIndex = props.evolutions.findIndex(group => group.first === currentPokemon || group.second === currentPokemon || group.third === currentPokemon );\r\n            //console.log('índice da evolução', newIndex);\r\n\r\n            if (controlArray.includes(props.evolutions[newIndex].first || props.evolutions[newIndex].second || props.evolutions[newIndex].third)) {\r\n                //console.log('Já tem uma evolução!')\r\n                continue\r\n            }\r\n\r\n            if (finalPokemons.length >= 6) {\r\n                break\r\n            }\r\n            \r\n            // !!!!! Ajeitar condicional para jolteon, vaporeon, etc.\r\n            // finalPokemons.push(filteredColorShuffled[pokemonIndex])\r\n            finalPokemons = [...finalPokemons, filteredColorShuffled[pokemonIndex]]\r\n            // finalPokemons.push(pokemonIndex)\r\n            controlArray.push(filteredColorShuffled[pokemonIndex].name)\r\n            // console.log('Array de controle:', controlArray)\r\n            // console.log('Lista final de pokemon:', finalPokemons)\r\n\r\n            // console.log('Nome:' , filteredColor[pokemonIndex]);\r\n            // console.log('Índice:', newIndex);\r\n            // console.log('Lista final:', finalPokemons);\r\n        }\r\n        controlVariable++\r\n    }\r\n\r\n    console.log('Lista final final de pokemon:', finalPokemons);\r\n        \r\n\r\n\r\n    // console.log('filteredType_Habitat:', filteredType_Habitat);\r\n    // console.log('filteredColor:', filteredColor)\r\n\treturn (\r\n\t\t<section>\r\n                <div className=\"card-container\">\r\n                {finalPokemons.map(pokeAttributes => {\r\n                return <PokeCard key={pokeAttributes.name} name={pokeAttributes.name} image={pokeAttributes.image}/>\r\n                })}\r\n                </div>\r\n\t\t</section>\r\n\t)\r\n}\r\n\r\nexport default PokemonResults;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}