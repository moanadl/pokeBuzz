{"ast":null,"code":"// ---------- Function do calculate the results of the better ranked types/habitas based on the scoreTable for each option selected by the user ---------- //\nexport const getResults = usersAnswers => {\n  // console.log(usersAnswers);\n\n  // ----- Initializing the score for each type/habitat -----\n  const score = [{\n    type_habitat: 'bug',\n    value: 0\n  }, {\n    type_habitat: 'dragon',\n    value: 0\n  }, {\n    type_habitat: 'electric',\n    value: 0\n  }, {\n    type_habitat: 'fairy',\n    value: 0\n  }, {\n    type_habitat: 'fighting',\n    value: 0\n  }, {\n    type_habitat: 'fire',\n    value: 0\n  }, {\n    type_habitat: 'flying',\n    value: 0\n  }, {\n    type_habitat: 'ghost',\n    value: 0\n  }, {\n    type_habitat: 'grass',\n    value: 0\n  }, {\n    type_habitat: 'ground',\n    value: 0\n  }, {\n    type_habitat: 'ice',\n    value: 0\n  }, {\n    type_habitat: 'normal',\n    value: 0\n  }, {\n    type_habitat: 'poison',\n    value: 0\n  }, {\n    type_habitat: 'psychic',\n    value: 0\n  }, {\n    type_habitat: 'rock',\n    value: 0\n  }, {\n    type_habitat: 'steel',\n    value: 0\n  }, {\n    type_habitat: 'water',\n    value: 0\n  }, {\n    type_habitat: 'cave',\n    value: 0\n  }, {\n    type_habitat: 'forest',\n    value: 0\n  }, {\n    type_habitat: 'grassland',\n    value: 0\n  }, {\n    type_habitat: 'mountain',\n    value: 0\n  }, {\n    type_habitat: 'roughTerrain',\n    value: 0\n  }, {\n    type_habitat: 'sea',\n    value: 0\n  }, {\n    type_habitat: 'urban',\n    value: 0\n  }, {\n    type_habitat: 'waterEdges',\n    value: 0\n  }];\n\n  // ----- Score table for each Option of each Question of the Form -----\n  const scoreTable = [{\n    question: 'transportation',\n    answers: [{\n      value: 'car',\n      points: {\n        roughTerrain: 1,\n        urban: 3,\n        ground: 1,\n        normal: 3\n      }\n    }, {\n      value: 'airplane',\n      points: {\n        mountain: 1,\n        dragon: 2,\n        flying: 3,\n        psychic: 1\n      }\n    }, {\n      value: 'ship',\n      points: {\n        sea: 3,\n        waterEdges: 2,\n        ice: 3,\n        water: 1\n      }\n    }, {\n      value: 'train',\n      points: {\n        cave: 1,\n        electric: 1,\n        fairy: 1,\n        fire: 1,\n        ghost: 1,\n        ground: 1,\n        psychic: 1,\n        rock: 1,\n        steel: 1\n      }\n    }, {\n      value: 'byfoot',\n      points: {\n        cave: 1,\n        forest: 1,\n        grassland: 1,\n        bug: 1,\n        fairy: 1,\n        fighting: 1,\n        grass: 1,\n        ground: 1,\n        poison: 1,\n        rock: 1\n      }\n    }]\n  }, {\n    question: 'setting',\n    answers: [{\n      value: 'countryside',\n      points: {\n        grassland: 3,\n        forest: 2,\n        grass: 2,\n        bug: 2,\n        ground: 1\n      }\n    }, {\n      value: 'beach',\n      points: {\n        waterEdges: 1,\n        sea: 3,\n        water: 2\n      }\n    }, {\n      value: 'mountain',\n      points: {\n        mountain: 3,\n        roughTerrain: 2,\n        fire: 1,\n        ice: 1,\n        dragon: 2,\n        flying: 2,\n        rock: 2\n      }\n    }, {\n      value: 'city',\n      points: {\n        urban: 3,\n        normal: 2,\n        poison: 1,\n        electric: 3,\n        fighting: 2,\n        psychic: 1,\n        ghost: 1\n      }\n    }, {\n      value: 'cave',\n      points: {\n        cave: 3,\n        fairy: 1,\n        rock: 2\n      }\n    }]\n  }, {\n    question: 'naturalPhenomenon',\n    answers: [{\n      value: 'volcano',\n      points: {\n        mountain: 3,\n        fighting: 1,\n        fire: 3,\n        steel: 2\n      }\n    }, {\n      value: 'earthquake',\n      points: {\n        cave: 1,\n        forest: 1,\n        grassland: 1,\n        bug: 1,\n        grass: 1,\n        ground: 3,\n        rock: 2\n      }\n    }, {\n      value: 'tsunami',\n      points: {\n        sea: 3,\n        waterEdges: 1,\n        water: 2\n      }\n    }, {\n      value: 'hurricane',\n      points: {\n        dragon: 2,\n        fairy: 1,\n        flying: 3,\n        psychic: 1\n      }\n    }, {\n      value: 'storm',\n      points: {\n        urban: 2,\n        electric: 3,\n        normal: 1,\n        poison: 1\n      }\n    }, {\n      value: 'sandstorm',\n      points: {\n        roughTerrain: 2,\n        ghost: 1\n      }\n    }, {\n      value: 'blizzard',\n      points: {\n        sea: 1,\n        waterEdges: 2,\n        ice: 3,\n        water: 2\n      }\n    }]\n  }, {\n    question: 'activity',\n    answers: [{\n      value: 'poolparty',\n      points: {\n        sea: 2,\n        waterEdges: 3,\n        ice: 1,\n        water: 3\n      }\n    }, {\n      value: 'workout',\n      points: {\n        urban: 1,\n        fighting: 3,\n        steel: 2\n      }\n    }, {\n      value: 'circus',\n      points: {\n        fairy: 2,\n        ghost: 2,\n        poison: 1,\n        psychic: 3\n      }\n    }, {\n      value: 'camping',\n      points: {\n        forest: 3,\n        grassland: 2,\n        grass: 2,\n        bug: 3\n      }\n    }, {\n      value: 'stayinandchill',\n      points: {\n        urban: 3,\n        normal: 2\n      }\n    }, {\n      value: 'rally',\n      points: {\n        roughTerrain: 3,\n        electric: 1,\n        fire: 1,\n        ground: 3,\n        rock: 2\n      }\n    }, {\n      value: 'hiking',\n      points: {\n        cave: 1,\n        mountain: 3,\n        roughTerrain: 3,\n        dragon: 2,\n        flying: 1,\n        ground: 3,\n        rock: 2\n      }\n    }]\n  }, {\n    question: 'placeToChill',\n    answers: [{\n      value: 'gym',\n      points: {\n        urban: 2,\n        electric: 1,\n        fighting: 3,\n        rock: 1,\n        steel: 2\n      }\n    }, {\n      value: 'cemetery',\n      points: {\n        cave: 1,\n        poison: 3,\n        ghost: 3,\n        psychic: 2\n      }\n    }, {\n      value: 'mall',\n      points: {\n        urban: 3,\n        electric: 2,\n        steel: 1\n      }\n    }, {\n      value: 'pool',\n      points: {\n        sea: 2,\n        waterEdges: 3,\n        ice: 1,\n        water: 3\n      }\n    }, {\n      value: 'library',\n      points: {\n        ghost: 1,\n        normal: 2,\n        psychic: 3\n      }\n    }, {\n      value: 'park',\n      points: {\n        forest: 2,\n        grassland: 3,\n        mountain: 1,\n        roughTerrain: 1\n      }\n    }, {\n      value: 'sauna',\n      points: {\n        fire: 2\n      }\n    }]\n  }, {\n    question: 'taylorAlbum',\n    answers: [{\n      value: 'debut',\n      points: {\n        electric: 1,\n        grass: 3,\n        forest: 2,\n        grassland: 3,\n        waterEdges: 2\n      }\n    }, {\n      value: 'fearlesstv',\n      points: {\n        electric: 1,\n        fairy: 3,\n        flying: 2,\n        steel: 1,\n        roughTerrain: 1\n      }\n    }, {\n      value: 'speaknowtv',\n      points: {\n        dragon: 2,\n        electric: 1,\n        fairy: 2,\n        fighting: 1,\n        flying: 2,\n        urban: 1\n      }\n    }, {\n      value: 'redtv',\n      points: {\n        fire: 2,\n        rock: 1,\n        roughTerrain: 1\n      }\n    }, {\n      value: '1989tv',\n      points: {\n        electric: 2,\n        fighting: 1,\n        flying: 1,\n        ice: 1,\n        water: 1,\n        sea: 1,\n        urban: 3\n      }\n    }, {\n      value: 'reputation',\n      points: {\n        dragon: 2,\n        electric: 2,\n        fighting: 3,\n        fire: 3,\n        ice: 1,\n        poison: 3,\n        steel: 2,\n        urban: 1\n      }\n    }, {\n      value: 'lover',\n      points: {\n        electric: 3,\n        fairy: 2,\n        normal: 1,\n        water: 1,\n        sea: 1,\n        urban: 2\n      }\n    }, {\n      value: 'folklore',\n      points: {\n        bug: 2,\n        fairy: 3,\n        grass: 3,\n        rock: 1,\n        water: 2,\n        cave: 2,\n        forest: 3,\n        grassland: 3,\n        mountain: 1,\n        waterEdges: 2\n      }\n    }, {\n      value: 'evermore',\n      points: {\n        bug: 2,\n        electric: 1,\n        fairy: 3,\n        fire: 2,\n        grass: 3,\n        rock: 1,\n        cave: 2,\n        forest: 3,\n        grassland: 3\n      }\n    }, {\n      value: 'midnights',\n      points: {\n        bug: 1,\n        fairy: 2,\n        normal: 2,\n        poison: 3,\n        mountain: 1,\n        urban: 3\n      }\n    }, {\n      value: 'thetorturedpoetsdepartment',\n      points: {\n        fighting: 3,\n        ghost: 2,\n        poison: 3,\n        psychic: 3,\n        cave: 1,\n        mountain: 1\n      }\n    }]\n  }];\n\n  // ----- Iterating through the user's answers to calculate the results for type/habitat -----\n  for (let answerTitle in usersAnswers) {\n    // ----- Finding the index of the matching question inside the scoreTable -----\n    let indexOfScoreInfo = scoreTable.findIndex(scoreInfo => scoreInfo.question === answerTitle);\n    // ----- The 'color' question will return an index of -1 because it's not contained in the scoreTable. So we'll not consider it -----\n    if (indexOfScoreInfo >= 0) {\n      // ----- Finding the index of the matching answer inside the current question -----\n      let indexOfAnswer = scoreTable[indexOfScoreInfo].answers.findIndex(answerScore => answerScore.value === usersAnswers[answerTitle]);\n      // ----- Accessing that answer to check the scores defined for it -----\n      let scoresList = scoreTable[indexOfScoreInfo].answers[indexOfAnswer].points;\n      // ----- Iterating through each answer score to uptade the user's score for each type/habitat -----\n      for (let scoreItem in scoresList) {\n        // ----- Finding the index matching the current type/habitat score -----\n        const scoreIndex = score.findIndex(item => item.type_habitat === scoreItem);\n        // ----- Updating the user's score -----\n        score[scoreIndex].value += scoresList[scoreItem];\n      }\n    }\n  }\n\n  // ----- Sorting the user's score from highest to lowest -----\n  score.sort(function (a, b) {\n    if (b.value > a.value) {\n      return 1;\n    }\n    if (b.value < a.value) {\n      return -1;\n    }\n    return 0;\n  });\n  return score;\n};","map":{"version":3,"names":["getResults","usersAnswers","score","type_habitat","value","scoreTable","question","answers","points","roughTerrain","urban","ground","normal","mountain","dragon","flying","psychic","sea","waterEdges","ice","water","cave","electric","fairy","fire","ghost","rock","steel","forest","grassland","bug","fighting","grass","poison","answerTitle","indexOfScoreInfo","findIndex","scoreInfo","indexOfAnswer","answerScore","scoresList","scoreItem","scoreIndex","item","sort","a","b"],"sources":["C:/Moana_SSD/WebDev/Projetos/pokebuzz/src/services/results.jsx"],"sourcesContent":["// ---------- Function do calculate the results of the better ranked types/habitas based on the scoreTable for each option selected by the user ---------- //\r\nexport const getResults = (usersAnswers) => {\r\n        \r\n    // console.log(usersAnswers);\r\n\r\n\t// ----- Initializing the score for each type/habitat -----\r\n\tconst score = [\r\n\t\t{\r\n\t\t\ttype_habitat: 'bug',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'dragon',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'electric',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'fairy',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'fighting',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'fire',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'flying',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'ghost',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'grass',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'ground',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'ice',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'normal',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'poison',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'psychic',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'rock',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'steel',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'water',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'cave',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'forest',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'grassland',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'mountain',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'roughTerrain',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'sea',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'urban',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'waterEdges',\r\n\t\t\tvalue: 0,\r\n\t\t}\r\n\t];\r\n\r\n\t// ----- Score table for each Option of each Question of the Form -----\r\n    const scoreTable = [\r\n        {\r\n\t\t\tquestion: 'transportation',\r\n\t\t\tanswers: [\r\n\t\t\t\t{ value: 'car', points: { roughTerrain: 1, urban: 3, ground: 1, normal: 3 } },\r\n\t\t\t\t{ value: 'airplane', points: { mountain: 1, dragon: 2, flying: 3, psychic: 1 } },\r\n\t\t\t\t{ value: 'ship', points: { sea: 3, waterEdges: 2, ice: 3, water: 1 } },\r\n\t\t\t\t{ value: 'train', points: { cave: 1, electric: 1, fairy: 1, fire: 1, ghost: 1, ground: 1, psychic: 1, rock: 1, steel: 1 } },\r\n\t\t\t\t{ value: 'byfoot', points: { cave: 1, forest: 1, grassland: 1, bug: 1, fairy: 1, fighting: 1, grass: 1, ground: 1, poison: 1, rock: 1 } },\r\n\t\t\t]\r\n        },\r\n        {\r\n\t\t\tquestion: 'setting',\r\n\t\t\tanswers: [\r\n\t\t\t\t{ value: 'countryside', points: { grassland: 3 , forest: 2, grass: 2, bug: 2, ground: 1 } },\r\n\t\t\t\t{ value: 'beach', points: { waterEdges: 1, sea: 3, water: 2 } },\r\n\t\t\t\t{ value: 'mountain', points: { mountain: 3, roughTerrain: 2, fire: 1, ice: 1, dragon: 2, flying: 2, rock: 2 } },\r\n\t\t\t\t{ value: 'city', points: { urban: 3, normal: 2, poison: 1, electric: 3, fighting: 2, psychic: 1, ghost: 1 } },\r\n\t\t\t\t{ value: 'cave', points: { cave: 3, fairy: 1, rock: 2 } }\r\n\t\t\t],\r\n        },\r\n        {\r\n\t\t\tquestion: 'naturalPhenomenon',\r\n\t\t\tanswers: [\r\n\t\t\t\t{ value: 'volcano', points: { mountain: 3, fighting: 1, fire: 3, steel: 2 } },\r\n\t\t\t\t{ value: 'earthquake', points: { cave: 1, forest: 1, grassland: 1, bug: 1, grass: 1, ground: 3, rock: 2 } },\r\n\t\t\t\t{ value: 'tsunami', points: { sea: 3, waterEdges: 1, water: 2 } },\r\n\t\t\t\t{ value: 'hurricane', points: { dragon: 2, fairy: 1, flying: 3, psychic: 1 } },\r\n\t\t\t\t{ value: 'storm', points: { urban: 2, electric: 3, normal: 1, poison: 1 } },\r\n\t\t\t\t{ value: 'sandstorm', points: { roughTerrain: 2, ghost: 1 } },\r\n\t\t\t\t{ value: 'blizzard', points: { sea: 1, waterEdges: 2, ice: 3, water: 2 } },\r\n\t\t\t],\r\n        },\r\n        {\r\n\t\t\tquestion: 'activity',\r\n\t\t\tanswers: [\r\n\t\t\t\t{ value: 'poolparty', points: { sea: 2, waterEdges: 3, ice: 1, water: 3 } },\r\n\t\t\t\t{ value: 'workout', points: { urban: 1, fighting: 3, steel: 2 } },\r\n\t\t\t\t{ value: 'circus', points: { fairy: 2, ghost: 2, poison: 1, psychic: 3 } },\r\n\t\t\t\t{ value: 'camping', points: { forest: 3, grassland: 2, grass: 2, bug: 3 } },\r\n\t\t\t\t{ value: 'stayinandchill', points: { urban: 3, normal: 2 } },\r\n\t\t\t\t{ value: 'rally', points: { roughTerrain: 3, electric: 1, fire: 1, ground: 3, rock: 2} },\r\n\t\t\t\t{ value: 'hiking', points: { cave: 1, mountain: 3 , roughTerrain: 3, dragon: 2, flying: 1, ground: 3, rock: 2} },\r\n\t\t\t\t\r\n\t\t\t],\r\n        },\r\n\t\t{\r\n\t\t\tquestion: 'placeToChill',\r\n\t\t\tanswers: [\r\n\t\t\t\t{ value: 'gym', points: { urban: 2, electric: 1, fighting: 3, rock: 1, steel: 2 } },\r\n\t\t\t\t{ value: 'cemetery', points: { cave: 1, poison: 3, ghost: 3, psychic: 2 } },\r\n\t\t\t\t{ value: 'mall', points: { urban: 3, electric: 2, steel: 1 } },\r\n\t\t\t\t{ value: 'pool', points: { sea: 2, waterEdges: 3, ice: 1, water: 3 } },\r\n\t\t\t\t{ value: 'library', points: { ghost: 1, normal: 2, psychic: 3 } },\r\n\t\t\t\t{ value: 'park', points: { forest: 2, grassland: 3, mountain: 1, roughTerrain: 1 } },\r\n\t\t\t\t{ value: 'sauna', points: { fire: 2 } }\r\n\t\t\t]\r\n\t\t},\r\n        {\r\n\t\t\tquestion: 'taylorAlbum',\r\n\t\t\tanswers: [\r\n\t\t\t\t{ value: 'debut', points: { electric: 1, grass: 3, forest: 2, grassland: 3, waterEdges: 2 } },\r\n\t\t\t\t{ value: 'fearlesstv', points: { electric: 1, fairy: 3, flying: 2, steel: 1, roughTerrain: 1} },\r\n\t\t\t\t{ value: 'speaknowtv', points: { dragon: 2, electric: 1, fairy: 2, fighting: 1, flying: 2, urban: 1} },\r\n\t\t\t\t{ value: 'redtv', points: { fire: 2, rock: 1, roughTerrain: 1} },\r\n\t\t\t\t{ value: '1989tv', points: { electric: 2, fighting: 1, flying: 1, ice: 1, water: 1, sea: 1, urban: 3} },\r\n\t\t\t\t{ value: 'reputation', points: { dragon: 2, electric: 2, fighting: 3, fire: 3, ice: 1, poison: 3, steel: 2, urban: 1} },\r\n\t\t\t\t{ value: 'lover', points: { electric: 3, fairy: 2, normal: 1, water: 1, sea: 1, urban: 2} },\r\n\t\t\t\t{ value: 'folklore', points: { bug: 2, fairy: 3, grass: 3, rock: 1, water: 2, cave: 2, forest: 3, grassland: 3, mountain: 1, waterEdges: 2 } },\r\n\t\t\t\t{ value: 'evermore', points: { bug: 2, electric: 1, fairy: 3, fire: 2, grass: 3, rock: 1, cave: 2, forest: 3, grassland: 3} },\r\n\t\t\t\t{ value: 'midnights', points: { bug: 1, fairy: 2, normal: 2, poison: 3, mountain: 1, urban: 3} },\r\n\t\t\t\t{ value: 'thetorturedpoetsdepartment', points: { fighting: 3, ghost: 2, poison: 3, psychic: 3, cave: 1, mountain: 1 } },\r\n\t\t\t]\r\n        }\r\n    ];\r\n \r\n\t// ----- Iterating through the user's answers to calculate the results for type/habitat -----\r\n\tfor (let answerTitle in usersAnswers) {\r\n\t\t// ----- Finding the index of the matching question inside the scoreTable -----\r\n\t\tlet indexOfScoreInfo = scoreTable.findIndex(scoreInfo => scoreInfo.question === answerTitle);\r\n\t\t// ----- The 'color' question will return an index of -1 because it's not contained in the scoreTable. So we'll not consider it -----\r\n\t\tif (indexOfScoreInfo >= 0) {\r\n\t\t\t// ----- Finding the index of the matching answer inside the current question -----\r\n\t\t\tlet indexOfAnswer = scoreTable[indexOfScoreInfo].answers.findIndex(answerScore => answerScore.value === usersAnswers[answerTitle]);\r\n\t\t\t// ----- Accessing that answer to check the scores defined for it -----\r\n\t\t\tlet scoresList = scoreTable[indexOfScoreInfo].answers[indexOfAnswer].points;\r\n\t\t\t// ----- Iterating through each answer score to uptade the user's score for each type/habitat -----\r\n\t\t\tfor (let scoreItem in scoresList) { \r\n\t\t\t\t// ----- Finding the index matching the current type/habitat score -----\r\n\t\t\t\tconst scoreIndex = score.findIndex(item => item.type_habitat === scoreItem);\r\n\t\t\t\t// ----- Updating the user's score -----\r\n\t\t\t\tscore[scoreIndex].value += scoresList[scoreItem];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// ----- Sorting the user's score from highest to lowest -----\r\n\tscore.sort(function (a, b) {\r\n\t\tif (b.value > a.value) {\r\n\t\t  return 1;\r\n\t\t}\r\n\t\tif (b.value < a.value) {\r\n\t\t  return -1;\r\n\t\t}\r\n\t\treturn 0;\r\n\t  });\r\n\r\n\t  return score;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}