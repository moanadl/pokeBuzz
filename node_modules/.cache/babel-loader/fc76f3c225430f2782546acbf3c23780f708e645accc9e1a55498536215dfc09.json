{"ast":null,"code":"import questionOptions from '../data/questionOptions.json';\nimport { filterPokemon } from './filterPokemon';\nexport const findPokemon = props => {\n  const {\n    finalScore,\n    formAnswers,\n    pokemonAttributes,\n    evolutionsGroups\n  } = props;\n  if (finalScore.length === 0 || pokemonAttributes.length === 0 || evolutionsGroups.length === 0) {\n    return [];\n  }\n  let chosenPokemon = [];\n  const chosenEvolutions = new Set();\n  const forbiddenIDs = new Set([144, 145, 146, 149]); // Articuno, Zapdos, Moltres, Dragonite\n  const colors = questionOptions.colorOptions.map(color => color.toLowerCase());\n  const primaryColor = formAnswers.color.toLowerCase();\n  const getRandomAltColor = () => {\n    const altColorOptions = colors.filter(color => color !== primaryColor);\n    let rdmIndex = Math.floor(Math.random() * altColorOptions.length);\n    return altColorOptions[rdmIndex];\n  };\n  const shuffle = myArray => {\n    const array = [...myArray];\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    ;\n    return array;\n  };\n  let scoreIndex = 0;\n  while (chosenPokemon.length < 6) {\n    const targetType = finalScore[scoreIndex].type;\n    let altColor = getRandomAltColor();\n    const candidates = filterPokemon(pokemonAttributes, targetType, primaryColor, altColor);\n    const shuffledCandidates = shuffle(candidates);\n    for (const pokemon of shuffledCandidates) {\n      // Doesn't executeif array is empty\n      const {\n        id,\n        name\n      } = pokemon;\n\n      // Checks for rare Pokémon\n      if (forbiddenIDs.has(id)) continue;\n\n      // Checks for repeated Pokémon or Pokémon from the same evolution group\n      const evolutionsIndex = evolutionsGroups.findIndex(evolution => evolution.first === name || evolution.second === name || evolution.third === name);\n      const evolutionKey = evolutionsIndex !== -1 ? `evol-${evolutionsIndex}` : `poke-${name}`;\n      if (chosenEvolutions.has(evolutionKey)) continue;\n      chosenPokemon.push(pokemon);\n      chosenEvolutions.add(evolutionKey);\n      if (chosenPokemon.length === 6) break;\n    }\n    scoreIndex++;\n  }\n  return chosenPokemon;\n};","map":{"version":3,"names":["questionOptions","filterPokemon","findPokemon","props","finalScore","formAnswers","pokemonAttributes","evolutionsGroups","length","chosenPokemon","chosenEvolutions","Set","forbiddenIDs","colors","colorOptions","map","color","toLowerCase","primaryColor","getRandomAltColor","altColorOptions","filter","rdmIndex","Math","floor","random","shuffle","myArray","array","i","j","scoreIndex","targetType","type","altColor","candidates","shuffledCandidates","pokemon","id","name","has","evolutionsIndex","findIndex","evolution","first","second","third","evolutionKey","push","add"],"sources":["C:/Moana_SSD/WebDev/Projetos/pokebuzz/src/utils/findPokemon.js"],"sourcesContent":["import questionOptions from '../data/questionOptions.json';\r\nimport { filterPokemon } from './filterPokemon';\r\n\r\nexport const findPokemon = (props) => {\r\n\r\n    \r\n    const { finalScore, formAnswers, pokemonAttributes, evolutionsGroups } = props;\r\n\r\n    if (finalScore.length === 0 || pokemonAttributes.length === 0 || evolutionsGroups.length === 0) {\r\n        return [];\r\n    }\r\n\r\n    let chosenPokemon = [];\r\n    const chosenEvolutions = new Set();\r\n    const forbiddenIDs = new Set([144, 145, 146, 149]); // Articuno, Zapdos, Moltres, Dragonite\r\n    const colors = questionOptions.colorOptions.map(color => color.toLowerCase());\r\n    const primaryColor = formAnswers.color.toLowerCase();\r\n\r\n    const getRandomAltColor = () => {\r\n        const altColorOptions = colors.filter(color => color !== primaryColor);\r\n        let rdmIndex = Math.floor(Math.random() * altColorOptions.length);\r\n        return altColorOptions[rdmIndex];\r\n    }\r\n\r\n    const shuffle = (myArray) => { \r\n        const array = [...myArray];\r\n\r\n        for (let i = array.length - 1; i > 0; i--) { \r\n            const j = Math.floor(Math.random() * (i + 1)); \r\n            [array[i], array[j]] = [array[j], array[i]]; \r\n        };\r\n\r\n        return array; \r\n    }; \r\n    \r\n    let scoreIndex = 0;\r\n\r\n    while (chosenPokemon.length < 6 ) {\r\n\r\n        const targetType = finalScore[scoreIndex].type;\r\n        let altColor = getRandomAltColor();\r\n        \r\n        const candidates = filterPokemon(pokemonAttributes, targetType, primaryColor, altColor);\r\n\r\n        const shuffledCandidates = shuffle(candidates);\r\n\r\n        for (const pokemon of shuffledCandidates) { // Doesn't executeif array is empty\r\n            const { id, name } = pokemon;\r\n\r\n            // Checks for rare Pokémon\r\n            if (forbiddenIDs.has(id)) continue;\r\n\r\n            // Checks for repeated Pokémon or Pokémon from the same evolution group\r\n            const evolutionsIndex = evolutionsGroups.findIndex(\r\n                evolution => evolution.first === name || \r\n                evolution.second === name || \r\n                evolution.third === name\r\n            );\r\n\r\n            const evolutionKey = evolutionsIndex !== -1 ? `evol-${evolutionsIndex}` : `poke-${name}`;\r\n\r\n            if (chosenEvolutions.has(evolutionKey)) continue;\r\n\r\n            chosenPokemon.push(pokemon);\r\n            chosenEvolutions.add(evolutionKey);\r\n            \r\n            if (chosenPokemon.length === 6) break\r\n\r\n        }\r\n        scoreIndex++\r\n    }\r\n\r\n\treturn chosenPokemon;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}