{"ast":null,"code":"var _jsxFileName = \"C:\\\\Moana_SSD\\\\WebDev\\\\Projetos\\\\pokebuzz\\\\src\\\\components\\\\Question\\\\index.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport Option from \"../Option\";\nimport questionOptions from '../../data/questionOptions.json';\n\n// ---------- Renders each question of the Form ---------- //\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Question({\n  label,\n  index,\n  getFormAnswers\n}) {\n  _s();\n  // Sends the options of each question to the Option Component\n  const options = {\n    colorOptions: ['Black', 'Blue', 'Brown', 'Gray', 'Green', 'Pink', 'Purple', 'Red', 'Yellow', 'White'],\n    transportationOptions: ['Car', 'Airplane', 'Ship', 'Train', 'By foot'],\n    settingOptions: ['Countryside', 'Beach', 'Mountain', 'City', 'Cave'],\n    naturalPhenomenonOptions: ['Volcano', 'Earthquake', 'Tsunami', 'Hurricane', 'Storm', 'Sand storm', 'Blizzard'],\n    activityOptions: ['Pool party', 'Work out', 'Circus', 'Camping', 'Stay in and chill', 'Rally', 'Hiking'],\n    chillOptions: ['Gym', 'Cemetery', 'Mall', 'Pool', 'Library', 'Park', 'Sauna'],\n    taylorOptions: ['Debut', 'Fearless TV', 'Speak Now TV', 'Red TV', '1989 TV', 'Reputation', 'Lover', 'Folklore', 'Evermore', 'Midnights', 'The Tortured Poets Department']\n  };\n  const [answer, setAnswer] = useState('');\n  const questionNameMap = {\n    colorOptions: 'color',\n    transportationOptions: 'transportation',\n    settingOptions: 'setting',\n    naturalPhenomenonOptions: 'naturalPhenomenon',\n    activityOptions: 'activity',\n    chillOptions: 'placeToChill',\n    taylorOptions: 'taylorAlbum'\n  };\n  const optionKey = Object.keys(questionOptions)[index];\n  const questionName = questionNameMap[optionKey];\n  const handleChange = e => {\n    const selectedOption = e.target.value;\n    setAnswer(selectedOption);\n    getFormAnswers({\n      [questionName]: selectedOption\n    }); // From Form component\n  };\n  return /*#__PURE__*/_jsxDEV(\"fieldset\", {\n    children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }, this), questionOptions[optionKey].map(option => /*#__PURE__*/_jsxDEV(Option, {\n      id: `option-${questionOptions.toLowerCase().replace(/\\s/g, '')}`,\n      name: Object.keys(questionOptions)[index],\n      value: questionOptions.toLowerCase().replace(/\\s/g, ''),\n      content: questionOptions,\n      getData: handleChange\n    }, `option-${questionOptions.toLowerCase().replace(/\\s/g, '')}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 21\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 13\n  }, this);\n}\n_s(Question, \"epwReYWmqQUcEJwlNWWu20QHlN0=\");\n_c = Question;\nexport default Question;\n\n// Tentar colocar todas as respostas em um objeto ao invés de estados individuais. Fazer tipo foi feito no Form, mas fazer direto aqui, sem precisar mandar tanta variável para o Form.\n// Encurtar caminhos, otimizar processos, reduzir código. KISS.\nvar _c;\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"names":["useState","useEffect","Option","questionOptions","jsxDEV","_jsxDEV","Question","label","index","getFormAnswers","_s","options","colorOptions","transportationOptions","settingOptions","naturalPhenomenonOptions","activityOptions","chillOptions","taylorOptions","answer","setAnswer","questionNameMap","optionKey","Object","keys","questionName","handleChange","e","selectedOption","target","value","children","fileName","_jsxFileName","lineNumber","columnNumber","map","option","id","toLowerCase","replace","name","content","getData","_c","$RefreshReg$"],"sources":["C:/Moana_SSD/WebDev/Projetos/pokebuzz/src/components/Question/index.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport Option from \"../Option\";\r\nimport questionOptions from '../../data/questionOptions.json';\r\n\r\n// ---------- Renders each question of the Form ---------- //\r\nfunction Question ({ label, index, getFormAnswers }) {\r\n\r\n    // Sends the options of each question to the Option Component\r\n    const options = {\r\n        colorOptions: ['Black', 'Blue', 'Brown', 'Gray', 'Green', 'Pink', 'Purple', 'Red', 'Yellow', 'White'],\r\n        transportationOptions: ['Car', 'Airplane', 'Ship', 'Train', 'By foot'],\r\n        settingOptions: ['Countryside', 'Beach', 'Mountain', 'City', 'Cave'],\r\n        naturalPhenomenonOptions: ['Volcano', 'Earthquake', 'Tsunami', 'Hurricane', 'Storm', 'Sand storm', 'Blizzard'],\r\n        activityOptions: ['Pool party', 'Work out', 'Circus', 'Camping', 'Stay in and chill', 'Rally', 'Hiking'],\r\n        chillOptions: ['Gym', 'Cemetery', 'Mall', 'Pool', 'Library', 'Park', 'Sauna'],\r\n        taylorOptions: ['Debut', 'Fearless TV', 'Speak Now TV', 'Red TV', '1989 TV', 'Reputation', 'Lover', 'Folklore', 'Evermore', 'Midnights', 'The Tortured Poets Department']\r\n    };\r\n\r\n    const [answer, setAnswer] = useState('');\r\n\r\n    const questionNameMap = {\r\n        colorOptions: 'color',\r\n        transportationOptions: 'transportation',\r\n        settingOptions: 'setting',\r\n        naturalPhenomenonOptions: 'naturalPhenomenon',\r\n        activityOptions: 'activity',\r\n        chillOptions: 'placeToChill',\r\n        taylorOptions: 'taylorAlbum'\r\n    };\r\n\r\n    const optionKey = Object.keys(questionOptions)[index];\r\n    const questionName = questionNameMap[optionKey];\r\n\r\n    const handleChange = e => {\r\n        const selectedOption = e.target.value;\r\n        setAnswer(selectedOption);\r\n        getFormAnswers({ [questionName]: selectedOption }); // From Form component\r\n    }\r\n\r\n\treturn (\r\n            <fieldset>\r\n                <legend>{label}</legend>\r\n                {questionOptions[optionKey].map(option => \r\n                    <Option \r\n                        key={`option-${questionOptions.toLowerCase().replace(/\\s/g, '')}`} \r\n                        id={`option-${questionOptions.toLowerCase().replace(/\\s/g, '')}`} \r\n                        name={Object.keys(questionOptions)[index]} \r\n                        value={questionOptions.toLowerCase().replace(/\\s/g, '')} \r\n                        content={questionOptions} \r\n                        getData={handleChange} />\r\n                )}\r\n            </fieldset>\r\n\t)\r\n}\r\n\r\nexport default Question;\r\n\r\n// Tentar colocar todas as respostas em um objeto ao invés de estados individuais. Fazer tipo foi feito no Form, mas fazer direto aqui, sem precisar mandar tanta variável para o Form.\r\n// Encurtar caminhos, otimizar processos, reduzir código. KISS.\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}