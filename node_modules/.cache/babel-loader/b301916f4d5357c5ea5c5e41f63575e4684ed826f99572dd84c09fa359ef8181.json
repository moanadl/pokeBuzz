{"ast":null,"code":"var _jsxFileName = \"C:\\\\Moana_SSD\\\\WebDev\\\\Projetos\\\\pokebuzz\\\\src\\\\pages\\\\Home.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { GetAPIData } from \"../services/APIData\";\nimport Form from \"../components/Form\";\nimport PokemonResults from \"../components/PokemonResults\";\nimport './Home.css';\n\n// ---------- Renders the Form and the final results ---------- //\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Home() {\n  _s();\n  // ----- Creating the state for the constants that will be used -----\n  const [APIDataPokemon, setAPIDataPokemon] = useState([]);\n  const [APIDataSpecies, setAPIDataSpecies] = useState([]);\n  const [APIDataEvolutions, setAPIDataEvolutions] = useState([]);\n  const [evolutionsGroups, setEvolutionsGroups] = useState([]);\n  const [pokemonAttributes, setPokemonAttributes] = useState([]);\n  const [finalScore, setfinalScore] = useState([]);\n  const [formAnswers, setFormAnswers] = useState([]);\n\n  // ----- On page load -----\n  useEffect(() => {\n    // ----- Calls the function GetAPIData imported from APIData.jsx to set pokemon, species and evolution data -----\n    const fetchData = async () => {\n      await GetAPIData().then(data => {\n        setAPIDataPokemon(data.pokemon);\n        setAPIDataSpecies(data.species);\n        setAPIDataEvolutions(data.evolutions);\n        console.log('evolutions', APIDataEvolutions);\n      });\n    };\n    fetchData();\n  }, []);\n\n  // ----- On APIDataPokemon, APIDataSpecies or APIDataEvolutions update... -----\n  useEffect(() => {\n    // ----- If the data returned alright... -----\n    if (APIDataPokemon.length > 0 && APIDataSpecies.length > 0 && APIDataEvolutions.length > 0) {\n      // ----- Creates an array with information/attributes of all pokemon -----\n      getPokemonAttributes();\n\n      // ----- Creates an array grouping all evolutions of an especies -----\n      const evolutions = getEvolutionGroups(APIDataEvolutions);\n      setEvolutionsGroups(evolutions);\n    } else {\n      console.log('No data available yet.');\n    }\n  }, [APIDataPokemon, APIDataSpecies, APIDataEvolutions]);\n\n  // ----- Gathers information on each pokemon and species on one single array -----\n  const getPokemonAttributes = () => {\n    console.log('Entrou em atributos');\n    const dataExtractionPokemon = APIDataPokemon.map(data => {\n      return {\n        id: data.data.id,\n        name: data.data.name,\n        height: data.data.height,\n        weight: data.data.weight,\n        type1: data.data.types[0].type.name,\n        type2: data.data.types[1] ? data.data.types[1].type.name : null,\n        image: data.data.sprites.other.dream_world.front_default\n      };\n    });\n    const dataExtractionSpecies = APIDataSpecies.map(data => {\n      return {\n        color: data.data.color.name,\n        habitat: data.data.habitat.name\n      };\n    });\n    const attributesAll = dataExtractionPokemon.map((pokemonInfo, index) => {\n      const speciesInfo = dataExtractionSpecies[index] || {};\n      return {\n        ...pokemonInfo,\n        ...speciesInfo\n      };\n    });\n    setPokemonAttributes(attributesAll);\n  };\n  const getEvolutionGroups = evolutionsData => {\n    return evolutionsData.map(groups => {\n      var _groups$data$chain$ev, _groups$data$chain$ev2, _groups$data$chain$ev3, _groups$data$chain$ev4, _groups$data$chain$ev5, _groups$data$chain$ev6, _groups$data$chain$ev7, _groups$data$chain$ev8;\n      return {\n        first: groups.data.chain.species.name || null,\n        second: ((_groups$data$chain$ev = groups.data.chain.evolves_to) === null || _groups$data$chain$ev === void 0 ? void 0 : (_groups$data$chain$ev2 = _groups$data$chain$ev[0]) === null || _groups$data$chain$ev2 === void 0 ? void 0 : (_groups$data$chain$ev3 = _groups$data$chain$ev2.species) === null || _groups$data$chain$ev3 === void 0 ? void 0 : _groups$data$chain$ev3.name) || null,\n        third: ((_groups$data$chain$ev4 = groups.data.chain.evolves_to) === null || _groups$data$chain$ev4 === void 0 ? void 0 : (_groups$data$chain$ev5 = _groups$data$chain$ev4[0]) === null || _groups$data$chain$ev5 === void 0 ? void 0 : (_groups$data$chain$ev6 = _groups$data$chain$ev5.evolves_to) === null || _groups$data$chain$ev6 === void 0 ? void 0 : (_groups$data$chain$ev7 = _groups$data$chain$ev6[0]) === null || _groups$data$chain$ev7 === void 0 ? void 0 : (_groups$data$chain$ev8 = _groups$data$chain$ev7.species) === null || _groups$data$chain$ev8 === void 0 ? void 0 : _groups$data$chain$ev8.name) || null\n      };\n    });\n  };\n\n  // ----- Sets the form anwsers and the calculated results for type/habitat received from the Form component -----\n  const handleFormSubmit = async (finalScore, formAnswers) => {\n    setfinalScore(finalScore);\n    setFormAnswers(formAnswers);\n  };\n\n  // ----- If the form hasn't been submitted, return Form. If it has, return results. -----\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: finalScore == 'batata' ? /*#__PURE__*/_jsxDEV(PokemonResults, {\n      finalScore: finalScore,\n      pokemonAttributes: pokemonAttributes,\n      evolutionsGroups: evolutionsGroups,\n      formAnswers: formAnswers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(Form, {\n      getFormResults: handleFormSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(Home, \"VA1Rhh2WfpQqmnhKrk6Bw9IB1fA=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["useEffect","useState","GetAPIData","Form","PokemonResults","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","_s","APIDataPokemon","setAPIDataPokemon","APIDataSpecies","setAPIDataSpecies","APIDataEvolutions","setAPIDataEvolutions","evolutionsGroups","setEvolutionsGroups","pokemonAttributes","setPokemonAttributes","finalScore","setfinalScore","formAnswers","setFormAnswers","fetchData","then","data","pokemon","species","evolutions","console","log","length","getPokemonAttributes","getEvolutionGroups","dataExtractionPokemon","map","id","name","height","weight","type1","types","type","type2","image","sprites","other","dream_world","front_default","dataExtractionSpecies","color","habitat","attributesAll","pokemonInfo","index","speciesInfo","evolutionsData","groups","_groups$data$chain$ev","_groups$data$chain$ev2","_groups$data$chain$ev3","_groups$data$chain$ev4","_groups$data$chain$ev5","_groups$data$chain$ev6","_groups$data$chain$ev7","_groups$data$chain$ev8","first","chain","second","evolves_to","third","handleFormSubmit","children","fileName","_jsxFileName","lineNumber","columnNumber","getFormResults","_c","$RefreshReg$"],"sources":["C:/Moana_SSD/WebDev/Projetos/pokebuzz/src/pages/Home.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { GetAPIData } from \"../services/APIData\";\r\nimport Form from \"../components/Form\";\r\nimport PokemonResults from \"../components/PokemonResults\";\r\nimport './Home.css'\r\n\r\n// ---------- Renders the Form and the final results ---------- //\r\nfunction Home () {    \r\n    \r\n    // ----- Creating the state for the constants that will be used -----\r\n    const [APIDataPokemon, setAPIDataPokemon] = useState([]);\r\n    const [APIDataSpecies, setAPIDataSpecies] = useState([]);\r\n    const [APIDataEvolutions, setAPIDataEvolutions] = useState([]);\r\n    const [evolutionsGroups, setEvolutionsGroups] = useState([]);\r\n    const [pokemonAttributes, setPokemonAttributes] = useState([]);\r\n    const [finalScore, setfinalScore] = useState([]);\r\n    const [formAnswers, setFormAnswers] = useState([]);\r\n    \r\n    // ----- On page load -----\r\n    useEffect(() => {\r\n        // ----- Calls the function GetAPIData imported from APIData.jsx to set pokemon, species and evolution data -----\r\n        const fetchData = async () => {\r\n           await GetAPIData().then(data => {\r\n            setAPIDataPokemon(data.pokemon);\r\n            setAPIDataSpecies(data.species);\r\n            setAPIDataEvolutions(data.evolutions);\r\n\r\n            console.log('evolutions', APIDataEvolutions);\r\n        });\r\n    };\r\n            fetchData();\r\n    }, []);\r\n\r\n    // ----- On APIDataPokemon, APIDataSpecies or APIDataEvolutions update... -----\r\n    useEffect(() => {\r\n        // ----- If the data returned alright... -----\r\n        if (APIDataPokemon.length > 0 && APIDataSpecies.length > 0 && APIDataEvolutions.length > 0) {\r\n            // ----- Creates an array with information/attributes of all pokemon -----\r\n            getPokemonAttributes();\r\n\r\n            // ----- Creates an array grouping all evolutions of an especies -----\r\n            const evolutions = getEvolutionGroups(APIDataEvolutions); \r\n            setEvolutionsGroups(evolutions);\r\n            \r\n        } else {\r\n            console.log('No data available yet.');\r\n        }\r\n    }, [APIDataPokemon, APIDataSpecies, APIDataEvolutions]);\r\n\r\n    // ----- Gathers information on each pokemon and species on one single array -----\r\n    const getPokemonAttributes = () => {\r\n        console.log('Entrou em atributos')\r\n\r\n        const dataExtractionPokemon = APIDataPokemon.map((data) => {\r\n            return {\r\n                id: data.data.id,\r\n                name: data.data.name,\r\n                height: data.data.height,\r\n                weight: data.data.weight,\r\n                type1: data.data.types[0].type.name,\r\n                type2: data.data.types[1] ? data.data.types[1].type.name : null,\r\n                image: data.data.sprites.other.dream_world.front_default,\r\n            }\r\n        })\r\n\r\n        const dataExtractionSpecies = APIDataSpecies.map(data => {\r\n            return {\r\n                color: data.data.color.name,\r\n                habitat: data.data.habitat.name\r\n            }\r\n        })\r\n\r\n        const attributesAll = dataExtractionPokemon.map((pokemonInfo, index) => {\r\n            const speciesInfo = dataExtractionSpecies[index] || {};\r\n            return {\r\n                ...pokemonInfo,\r\n                ...speciesInfo\r\n            }\r\n        })\r\n\r\n        setPokemonAttributes(attributesAll);\r\n        \r\n    }\r\n\r\n    const getEvolutionGroups = (evolutionsData) => {\r\n        return evolutionsData.map(groups => ({\r\n            first: groups.data.chain.species.name || null,\r\n            second: groups.data.chain.evolves_to?.[0]?.species?.name || null,\r\n            third: groups.data.chain.evolves_to?.[0]?.evolves_to?.[0]?.species?.name || null\r\n        }));\r\n    };\r\n\r\n    // ----- Sets the form anwsers and the calculated results for type/habitat received from the Form component -----\r\n    const handleFormSubmit = async (finalScore, formAnswers) => {\r\n        setfinalScore(finalScore);\r\n        setFormAnswers(formAnswers)\r\n    }\r\n\r\n    // ----- If the form hasn't been submitted, return Form. If it has, return results. -----\r\n\treturn (\r\n        <> \r\n        {/* {finalScore.length > 0 ?  */}\r\n        {finalScore == 'batata' ? \r\n            <PokemonResults \r\n                finalScore={finalScore} \r\n                pokemonAttributes={pokemonAttributes} \r\n                evolutionsGroups={evolutionsGroups} \r\n                formAnswers={formAnswers} \r\n            /> \r\n                :\r\n            <Form \r\n                getFormResults={handleFormSubmit} \r\n            />\r\n        }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}