{"ast":null,"code":"var _jsxFileName = \"C:\\\\Moana_SSD\\\\WebDev\\\\Projetos\\\\pokebuzz\\\\src\\\\pages\\\\Home.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { GetAPIData } from \"../services/APIData\";\nimport Form from \"../components/Form\";\nimport PokemonResults from \"../components/PokemonResults\";\nimport './Home.css';\nimport Loading from \"../components/Loading\";\n\n// ---------- Renders the Form and the final results ---------- //\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Home() {\n  _s();\n  // ----- Creating the state for the constants that will be used -----\n  const [evolutionsGroups, setEvolutionsGroups] = useState([]);\n  const [pokemonAttributes, setPokemonAttributes] = useState([]);\n  const [finalScore, setfinalScore] = useState([]);\n  const [formAnswers, setFormAnswers] = useState([]);\n\n  // ----- On page load -----\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Gets the data from the API\n        const {\n          APIPokemon,\n          APISpecies,\n          APIEvolutions\n        } = await GetAPIData();\n\n        // ----- If the data returned alright... -----\n        if (APIPokemon.length && APISpecies.length && APIEvolutions.length) {\n          // ----- Creates an array with information/attributes of all pokemon -----\n          const attributes = APIPokemon.map((data, index) => {\n            var _APISpecies$index, _pokemonData$types$, _pokemonData$types$2, _pokemonData$sprites, _pokemonData$sprites$, _pokemonData$sprites$2, _speciesData$color, _speciesData$habitat;\n            const pokemonData = data.data;\n            const speciesData = ((_APISpecies$index = APISpecies[index]) === null || _APISpecies$index === void 0 ? void 0 : _APISpecies$index.data) || {};\n            return {\n              id: pokemonData.id,\n              name: pokemonData.name,\n              height: pokemonData.height,\n              weight: pokemonData.weight,\n              type1: ((_pokemonData$types$ = pokemonData.types[0]) === null || _pokemonData$types$ === void 0 ? void 0 : _pokemonData$types$.type.name) || null,\n              type2: ((_pokemonData$types$2 = pokemonData.types[1]) === null || _pokemonData$types$2 === void 0 ? void 0 : _pokemonData$types$2.type.name) || null,\n              image: (_pokemonData$sprites = pokemonData.sprites) === null || _pokemonData$sprites === void 0 ? void 0 : (_pokemonData$sprites$ = _pokemonData$sprites.other) === null || _pokemonData$sprites$ === void 0 ? void 0 : (_pokemonData$sprites$2 = _pokemonData$sprites$.dream_world) === null || _pokemonData$sprites$2 === void 0 ? void 0 : _pokemonData$sprites$2.front_default,\n              color: ((_speciesData$color = speciesData.color) === null || _speciesData$color === void 0 ? void 0 : _speciesData$color.name) || null,\n              habitat: ((_speciesData$habitat = speciesData.habitat) === null || _speciesData$habitat === void 0 ? void 0 : _speciesData$habitat.name) || null\n            };\n          });\n          // ----- Creates an array grouping all evolutions of an especies -----\n          const evolutions = APIEvolutions.map(data => {\n            var _evolutionsData$chain, _evolutionsData$chain2, _evolutionsData$chain3, _evolutionsData$chain4, _evolutionsData$chain5, _evolutionsData$chain6, _evolutionsData$chain7, _evolutionsData$chain8;\n            const evolutionsData = data.data;\n            return {\n              first: evolutionsData.chain.species.name || null,\n              second: ((_evolutionsData$chain = evolutionsData.chain.evolves_to) === null || _evolutionsData$chain === void 0 ? void 0 : (_evolutionsData$chain2 = _evolutionsData$chain[0]) === null || _evolutionsData$chain2 === void 0 ? void 0 : (_evolutionsData$chain3 = _evolutionsData$chain2.species) === null || _evolutionsData$chain3 === void 0 ? void 0 : _evolutionsData$chain3.name) || null,\n              third: ((_evolutionsData$chain4 = evolutionsData.chain.evolves_to) === null || _evolutionsData$chain4 === void 0 ? void 0 : (_evolutionsData$chain5 = _evolutionsData$chain4[0]) === null || _evolutionsData$chain5 === void 0 ? void 0 : (_evolutionsData$chain6 = _evolutionsData$chain5.evolves_to) === null || _evolutionsData$chain6 === void 0 ? void 0 : (_evolutionsData$chain7 = _evolutionsData$chain6[0]) === null || _evolutionsData$chain7 === void 0 ? void 0 : (_evolutionsData$chain8 = _evolutionsData$chain7.species) === null || _evolutionsData$chain8 === void 0 ? void 0 : _evolutionsData$chain8.name) || null\n            };\n          });\n          setPokemonAttributes(attributes);\n          setEvolutionsGroups(evolutions);\n        } else {\n          console.warn('Some API data could not be loaded correctly');\n        }\n        ;\n      } catch (error) {\n        console.error('Error loading the API data', error);\n      }\n      ;\n    };\n    fetchData();\n  }, []);\n\n  // ----- Sets the form anwsers and the calculated results for type/habitat received from the Form component -----\n  const handleFormSubmit = async (finalScore, formAnswers) => {\n    setfinalScore(finalScore);\n    setFormAnswers(formAnswers);\n  };\n\n  // ----- If the form hasn't been submitted, return Form. If it has, return results. -----\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: finalScore.length > 0 ? /*#__PURE__*/_jsxDEV(PokemonResults, {\n      finalScore: finalScore,\n      pokemonAttributes: pokemonAttributes,\n      evolutionsGroups: evolutionsGroups,\n      formAnswers: formAnswers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Form, {\n        getFormResults: handleFormSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n}\n_s(Home, \"lKcC/kxoki05oN5ZC/8VXFeMsys=\");\n_c = Home;\n;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["useEffect","useState","GetAPIData","Form","PokemonResults","Loading","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","_s","evolutionsGroups","setEvolutionsGroups","pokemonAttributes","setPokemonAttributes","finalScore","setfinalScore","formAnswers","setFormAnswers","fetchData","APIPokemon","APISpecies","APIEvolutions","length","attributes","map","data","index","_APISpecies$index","_pokemonData$types$","_pokemonData$types$2","_pokemonData$sprites","_pokemonData$sprites$","_pokemonData$sprites$2","_speciesData$color","_speciesData$habitat","pokemonData","speciesData","id","name","height","weight","type1","types","type","type2","image","sprites","other","dream_world","front_default","color","habitat","evolutions","_evolutionsData$chain","_evolutionsData$chain2","_evolutionsData$chain3","_evolutionsData$chain4","_evolutionsData$chain5","_evolutionsData$chain6","_evolutionsData$chain7","_evolutionsData$chain8","evolutionsData","first","chain","species","second","evolves_to","third","console","warn","error","handleFormSubmit","children","fileName","_jsxFileName","lineNumber","columnNumber","getFormResults","_c","$RefreshReg$"],"sources":["C:/Moana_SSD/WebDev/Projetos/pokebuzz/src/pages/Home.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { GetAPIData } from \"../services/APIData\";\r\nimport Form from \"../components/Form\";\r\nimport PokemonResults from \"../components/PokemonResults\";\r\nimport './Home.css'\r\nimport Loading from \"../components/Loading\";\r\n\r\n// ---------- Renders the Form and the final results ---------- //\r\nfunction Home () {    \r\n    \r\n    // ----- Creating the state for the constants that will be used -----\r\n    const [evolutionsGroups, setEvolutionsGroups] = useState([]);\r\n    const [pokemonAttributes, setPokemonAttributes] = useState([]);\r\n    const [finalScore, setfinalScore] = useState([]);\r\n    const [formAnswers, setFormAnswers] = useState([]);\r\n    \r\n    // ----- On page load -----\r\n    useEffect (() => {\r\n        \r\n        const fetchData = async () => {\r\n            \r\n            try {\r\n\r\n                // Gets the data from the API\r\n                const { APIPokemon, APISpecies, APIEvolutions } = await GetAPIData();\r\n\r\n                // ----- If the data returned alright... -----\r\n                if (APIPokemon.length && APISpecies.length && APIEvolutions.length) {\r\n\r\n                    // ----- Creates an array with information/attributes of all pokemon -----\r\n                    const attributes = APIPokemon.map((data,index) => {\r\n                        const pokemonData = data.data;\r\n                        const speciesData = APISpecies[index]?.data || {};\r\n\r\n                        return {\r\n                            id: pokemonData.id,\r\n                            name: pokemonData.name,\r\n                            height: pokemonData.height,\r\n                            weight: pokemonData.weight,\r\n                            type1: pokemonData.types[0]?.type.name || null,\r\n                            type2: pokemonData.types[1]?.type.name || null,\r\n                            image: pokemonData.sprites?.other?.dream_world?.front_default,\r\n                            color: speciesData.color?.name || null,\r\n                            habitat: speciesData.habitat?.name || null\r\n                        };\r\n\r\n                    });\r\n                    // ----- Creates an array grouping all evolutions of an especies -----\r\n                    const evolutions = APIEvolutions.map(data => {\r\n                        const evolutionsData = data.data;\r\n\r\n                        return {\r\n                            first: evolutionsData.chain.species.name || null,\r\n                            second: evolutionsData.chain.evolves_to?.[0]?.species?.name || null,\r\n                            third: evolutionsData.chain.evolves_to?.[0]?.evolves_to?.[0]?.species?.name || null\r\n                        };\r\n\r\n                    });\r\n\r\n                    setPokemonAttributes(attributes);\r\n                    setEvolutionsGroups(evolutions);\r\n\r\n                } else {\r\n                    console.warn('Some API data could not be loaded correctly')\r\n                };\r\n            } catch (error) {\r\n                console.error('Error loading the API data', error);\r\n            };\r\n        };\r\n\r\n        fetchData();\r\n\r\n    }, []);\r\n\r\n    // ----- Sets the form anwsers and the calculated results for type/habitat received from the Form component -----\r\n    const handleFormSubmit = async (finalScore, formAnswers) => {\r\n        setfinalScore(finalScore);\r\n        setFormAnswers(formAnswers)\r\n    };\r\n\r\n    // ----- If the form hasn't been submitted, return Form. If it has, return results. -----\r\n\treturn (\r\n        <> \r\n        {finalScore.length > 0 ? \r\n            <PokemonResults \r\n                finalScore={finalScore} \r\n                pokemonAttributes={pokemonAttributes} \r\n                evolutionsGroups={evolutionsGroups} \r\n                formAnswers={formAnswers} \r\n            /> \r\n                :\r\n                <div>\r\n            <Form \r\n                getFormResults={handleFormSubmit} \r\n            />\r\n            <Loading />\r\n            </div>\r\n        }\r\n        </>\r\n    );\r\n\r\n};\r\n\r\nexport default Home;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}