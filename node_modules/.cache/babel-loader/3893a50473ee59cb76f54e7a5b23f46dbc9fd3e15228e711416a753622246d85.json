{"ast":null,"code":"var _jsxFileName = \"C:\\\\Moana_SSD\\\\WebDev\\\\Projetos\\\\pokebuzz\\\\src\\\\components\\\\Form\\\\index.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { getResults } from \"../../utils/results\";\nimport Question from \"../Question\";\nimport questions from '../../data/questionsData.json';\nimport './Form.css';\n\n// ---------- Renders the Form ---------- //\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Form(props) {\n  _s();\n  const [formErrors, setFormErrors] = useState([]);\n\n  // ----- Creating the state for the form answers -----\n  const [formAnswers, setFormAnswers] = useState(() => {\n    Object.fromEntries(questions.map(key => [key, '']));\n  });\n\n  // ----- Gets the value of each radio button from the component Question to set the formAnswers -----\n  const getFormAnswers = partialAnswer => {\n    setFormAnswers(prev => ({\n      ...prev,\n      ...partialAnswer\n    }));\n  };\n\n  // ----- On form submission -----\n  const sendFormAnswers = e => {\n    e.preventDefault();\n    const formData = new FormData(e.target);\n    console.log(formData);\n    const missingFields = [];\n    questions.forEach(question => {\n      if (!formData.get(question.key)) {\n        missingFields.push(question.label);\n      }\n    });\n    if (missingFields.length > 0) {\n      setFormErrors(missingFields);\n      return;\n    }\n    setFormErrors([]);\n    console.log(missingFields);\n\n    // ----- Calls the imported function getResults to calculate the results of the quiz for type/habitat -----\n    const finalScore = getResults(formAnswers);\n    // ----- Calls the prop function getFormResults with the calculated result for type/habitat and the form answers -----\n    props.getFormResults(finalScore, formAnswers);\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendFormAnswers,\n      children: [questions.map((question, index) => /*#__PURE__*/_jsxDEV(Question, {\n        label: `${question.label}:`,\n        optionKey: question.key,\n        hasError: formErrors.includes(question.label),\n        getFormAnswers: getFormAnswers,\n        index: index\n      }, question.key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 6\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        class: \"form-button\",\n        children: \"Catch 'em!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 5\n      }, this), formErrors.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-errors\",\n        style: {\n          color: 'red',\n          marginTop: '1rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"You need to select one option from the following questions:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: formErrors.map((field, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: field\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 8\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 3\n  }, this);\n}\n_s(Form, \"aA5s4j+NOKRad9txjlEht9RDhLE=\");\n_c = Form;\nexport default Form;\nvar _c;\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["useState","getResults","Question","questions","jsxDEV","_jsxDEV","Form","props","_s","formErrors","setFormErrors","formAnswers","setFormAnswers","Object","fromEntries","map","key","getFormAnswers","partialAnswer","prev","sendFormAnswers","e","preventDefault","formData","FormData","target","console","log","missingFields","forEach","question","get","push","label","length","finalScore","getFormResults","children","onSubmit","index","optionKey","hasError","includes","fileName","_jsxFileName","lineNumber","columnNumber","class","className","style","color","marginTop","field","_c","$RefreshReg$"],"sources":["C:/Moana_SSD/WebDev/Projetos/pokebuzz/src/components/Form/index.jsx"],"sourcesContent":["import {useState } from \"react\";\r\nimport { getResults } from \"../../utils/results\";\r\nimport Question from \"../Question\";\r\nimport questions from '../../data/questionsData.json';\r\nimport './Form.css'\r\n\r\n// ---------- Renders the Form ---------- //\r\nfunction Form (props) {\r\n\r\n\tconst [formErrors, setFormErrors] = useState([]);\r\n\r\n\t// ----- Creating the state for the form answers -----\r\n\tconst [formAnswers, setFormAnswers] = useState(() => {\r\n\t\tObject.fromEntries(questions.map(key => [key, '']));\r\n\t});\r\n\r\n\t// ----- Gets the value of each radio button from the component Question to set the formAnswers -----\r\n\tconst getFormAnswers = (partialAnswer) => {\r\n        setFormAnswers((prev) => ({\r\n            ...prev,\r\n\t\t\t...partialAnswer\r\n        }));\r\n\t};\r\n\r\n\t// ----- On form submission -----\r\n\tconst sendFormAnswers = (e) => {\r\n\t\te.preventDefault();\r\n\t\tconst formData = new FormData(e.target);\r\n\t\tconsole.log(formData);\r\n\r\n\t\tconst missingFields = [];\r\n\r\n\t\tquestions.forEach(question => {\r\n\t\t\tif (!formData.get(question.key)) {\r\n\t\t\tmissingFields.push(question.label);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t if (missingFields.length > 0) {\r\n\t\t\tsetFormErrors(missingFields);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tsetFormErrors([]);\r\n\r\n\t\tconsole.log(missingFields);\r\n\r\n\t\t// ----- Calls the imported function getResults to calculate the results of the quiz for type/habitat -----\r\n\t\tconst finalScore = getResults(formAnswers);\r\n\t\t// ----- Calls the prop function getFormResults with the calculated result for type/habitat and the form answers -----\r\n\t\tprops.getFormResults(finalScore, formAnswers);\r\n\t}\r\n    \r\n\treturn (\r\n\t\t<section>\r\n\t\t\t<form onSubmit={sendFormAnswers}>\r\n\t\t\t\t{questions.map((question, index) => \r\n\t\t\t\t\t<Question \r\n\t\t\t\t\t\tkey={question.key} \r\n\t\t\t\t\t\tlabel={`${question.label}:`} \r\n\t\t\t\t\t\toptionKey={question.key}\r\n\t\t\t\t\t\thasError={formErrors.includes(question.label)}\r\n\t\t\t\t\t\tgetFormAnswers={getFormAnswers}\r\n\t\t\t\t\t\tindex={index} /> \r\n\t\t\t\t)}\r\n\r\n\t\t\t\t<button class=\"form-button\">Catch 'em!</button>\r\n\t\t\t\t{formErrors.length > 0 && (\r\n\t\t\t\t\t<div className=\"form-errors\" style={{ color: 'red', marginTop: '1rem' }}>\r\n\t\t\t\t\t\t<p>You need to select one option from the following questions:</p>\r\n\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t{formErrors.map((field, index) => (\r\n\t\t\t\t\t\t\t<li key={index}>{field}</li>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t)}\r\n\t\t\t</form>\r\n\t\t</section>\r\n\t)\r\n}\r\n\r\nexport default Form;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}