{"ast":null,"code":"import{useEffect,useState}from\"react\";import{GetAPIData}from\"../../services/APIData\";import Form from\"../../components/Form\";import PokemonResults from\"../../components/PokemonResults\";import Loading from\"../../components/Loading\";import MoreInfoLink from\"../../components/MoreInfoLink/index\";import Logo from\"../../components/Logo/index\";import ErrorData from\"../../components/ErrorData\";import{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";function PokeBuzz(){const[evolutionsGroups,setEvolutionsGroups]=useState([]);const[pokemonAttributes,setPokemonAttributes]=useState([]);const[finalScore,setfinalScore]=useState([]);const[formAnswers,setFormAnswers]=useState([]);const[isLoading,setIsLoading]=useState(true);const[isProcessing,setIsProcessing]=useState(false);const[isDataRetrieved,setIsDataRetrieved]=useState(true);// ----- On page load -----\nuseEffect(()=>{const fetchData=async()=>{try{const{APIPokemon,APISpecies,APIEvolutions}=await GetAPIData();// ----- If the data returned alright... -----\nif(APIPokemon.length&&APISpecies.length&&APIEvolutions.length){// ----- Creates an array with information/attributes of all pokemon -----\nconst attributes=APIPokemon.map((data,index)=>{var _APISpecies$index,_pokemonData$types$,_pokemonData$types$2,_pokemonData$sprites,_pokemonData$sprites$,_pokemonData$sprites$2,_speciesData$color,_speciesData$habitat;const pokemonData=data.data;const speciesData=((_APISpecies$index=APISpecies[index])===null||_APISpecies$index===void 0?void 0:_APISpecies$index.data)||{};return{id:pokemonData.id,name:pokemonData.name,height:pokemonData.height,weight:pokemonData.weight,type1:((_pokemonData$types$=pokemonData.types[0])===null||_pokemonData$types$===void 0?void 0:_pokemonData$types$.type.name)||null,type2:((_pokemonData$types$2=pokemonData.types[1])===null||_pokemonData$types$2===void 0?void 0:_pokemonData$types$2.type.name)||null,image:(_pokemonData$sprites=pokemonData.sprites)===null||_pokemonData$sprites===void 0?void 0:(_pokemonData$sprites$=_pokemonData$sprites.other)===null||_pokemonData$sprites$===void 0?void 0:(_pokemonData$sprites$2=_pokemonData$sprites$.dream_world)===null||_pokemonData$sprites$2===void 0?void 0:_pokemonData$sprites$2.front_default,color:((_speciesData$color=speciesData.color)===null||_speciesData$color===void 0?void 0:_speciesData$color.name)||null,habitat:((_speciesData$habitat=speciesData.habitat)===null||_speciesData$habitat===void 0?void 0:_speciesData$habitat.name)||null};});// ----- Creates an array grouping all evolutions of an especies -----\nconst evolutions=APIEvolutions.map(data=>{var _evolutionsData$chain,_evolutionsData$chain2,_evolutionsData$chain3,_evolutionsData$chain4,_evolutionsData$chain5,_evolutionsData$chain6,_evolutionsData$chain7,_evolutionsData$chain8;const evolutionsData=data.data;return{first:evolutionsData.chain.species.name||null,second:((_evolutionsData$chain=evolutionsData.chain.evolves_to)===null||_evolutionsData$chain===void 0?void 0:(_evolutionsData$chain2=_evolutionsData$chain[0])===null||_evolutionsData$chain2===void 0?void 0:(_evolutionsData$chain3=_evolutionsData$chain2.species)===null||_evolutionsData$chain3===void 0?void 0:_evolutionsData$chain3.name)||null,third:((_evolutionsData$chain4=evolutionsData.chain.evolves_to)===null||_evolutionsData$chain4===void 0?void 0:(_evolutionsData$chain5=_evolutionsData$chain4[0])===null||_evolutionsData$chain5===void 0?void 0:(_evolutionsData$chain6=_evolutionsData$chain5.evolves_to)===null||_evolutionsData$chain6===void 0?void 0:(_evolutionsData$chain7=_evolutionsData$chain6[0])===null||_evolutionsData$chain7===void 0?void 0:(_evolutionsData$chain8=_evolutionsData$chain7.species)===null||_evolutionsData$chain8===void 0?void 0:_evolutionsData$chain8.name)||null};});setPokemonAttributes(attributes);setEvolutionsGroups(evolutions);}else{setIsProcessing(true);setTimeout(()=>{setIsProcessing(false);},3000);setIsDataRetrieved(false);console.warn('Some API data could not be loaded correctly');};setIsLoading(false);}catch(error){setIsProcessing(true);setTimeout(()=>{setIsProcessing(false);},3000);setIsDataRetrieved(false);};};fetchData();},[]);// ----- Sets the form anwsers and the calculates results for type/habitat received from the Form component -----\nconst handleFormSubmit=async(finalScore,formAnswers)=>{setIsProcessing(true);setfinalScore(finalScore);setFormAnswers(formAnswers);setTimeout(()=>{setIsProcessing(false);},1000);};// ----- If the form hasn't been submitted, return Form. If it has, return results. -----\nreturn/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(MoreInfoLink,{}),/*#__PURE__*/_jsx(Logo,{logoHome:false}),isLoading||isProcessing?/*#__PURE__*/_jsx(Loading,{}):!isDataRetrieved?/*#__PURE__*/_jsx(ErrorData,{}):finalScore.length>0?/*#__PURE__*/_jsx(PokemonResults,{finalScore:finalScore,pokemonAttributes:pokemonAttributes,evolutionsGroups:evolutionsGroups,formAnswers:formAnswers}):/*#__PURE__*/_jsx(Form,{getFormResults:handleFormSubmit})]});};export default PokeBuzz;","map":{"version":3,"names":["useEffect","useState","GetAPIData","Form","PokemonResults","Loading","MoreInfoLink","Logo","ErrorData","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","PokeBuzz","evolutionsGroups","setEvolutionsGroups","pokemonAttributes","setPokemonAttributes","finalScore","setfinalScore","formAnswers","setFormAnswers","isLoading","setIsLoading","isProcessing","setIsProcessing","isDataRetrieved","setIsDataRetrieved","fetchData","APIPokemon","APISpecies","APIEvolutions","length","attributes","map","data","index","_APISpecies$index","_pokemonData$types$","_pokemonData$types$2","_pokemonData$sprites","_pokemonData$sprites$","_pokemonData$sprites$2","_speciesData$color","_speciesData$habitat","pokemonData","speciesData","id","name","height","weight","type1","types","type","type2","image","sprites","other","dream_world","front_default","color","habitat","evolutions","_evolutionsData$chain","_evolutionsData$chain2","_evolutionsData$chain3","_evolutionsData$chain4","_evolutionsData$chain5","_evolutionsData$chain6","_evolutionsData$chain7","_evolutionsData$chain8","evolutionsData","first","chain","species","second","evolves_to","third","setTimeout","console","warn","error","handleFormSubmit","children","logoHome","getFormResults"],"sources":["C:/Moana_SSD/WebDev/Projetos/pokebuzz/src/pages/PokeBuzz/PokeBuzz.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { GetAPIData } from \"../../services/APIData\";\r\nimport Form from \"../../components/Form\";\r\nimport PokemonResults from \"../../components/PokemonResults\";\r\nimport Loading from \"../../components/Loading\";\r\nimport MoreInfoLink from \"../../components/MoreInfoLink/index\";\r\nimport Logo from \"../../components/Logo/index\"\r\nimport ErrorData from \"../../components/ErrorData\";\r\n\r\nfunction PokeBuzz () {    \r\n    \r\n    const [evolutionsGroups, setEvolutionsGroups] = useState([]);\r\n    const [pokemonAttributes, setPokemonAttributes] = useState([]);\r\n    const [finalScore, setfinalScore] = useState([]);\r\n    const [formAnswers, setFormAnswers] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [isProcessing, setIsProcessing] = useState(false);\r\n    const [isDataRetrieved, setIsDataRetrieved] = useState(true);\r\n    \r\n    // ----- On page load -----\r\n    useEffect (() => {\r\n        \r\n        const fetchData = async () => {\r\n            \r\n            try {\r\n\r\n                const { APIPokemon, APISpecies, APIEvolutions } = await GetAPIData();\r\n\r\n                // ----- If the data returned alright... -----\r\n                if (APIPokemon.length && APISpecies.length && APIEvolutions.length) {\r\n\r\n                    // ----- Creates an array with information/attributes of all pokemon -----\r\n                    const attributes = APIPokemon.map((data,index) => {\r\n                        const pokemonData = data.data;\r\n                        const speciesData = APISpecies[index]?.data || {};\r\n\r\n                        return {\r\n                            id: pokemonData.id,\r\n                            name: pokemonData.name,\r\n                            height: pokemonData.height,\r\n                            weight: pokemonData.weight,\r\n                            type1: pokemonData.types[0]?.type.name || null,\r\n                            type2: pokemonData.types[1]?.type.name || null,\r\n                            image: pokemonData.sprites?.other?.dream_world?.front_default,\r\n                            color: speciesData.color?.name || null,\r\n                            habitat: speciesData.habitat?.name || null\r\n                        };\r\n\r\n                    });\r\n\r\n                    // ----- Creates an array grouping all evolutions of an especies -----\r\n                    const evolutions = APIEvolutions.map(data => {\r\n                        const evolutionsData = data.data;\r\n\r\n                        return {\r\n                            first: evolutionsData.chain.species.name || null,\r\n                            second: evolutionsData.chain.evolves_to?.[0]?.species?.name || null,\r\n                            third: evolutionsData.chain.evolves_to?.[0]?.evolves_to?.[0]?.species?.name || null\r\n                        };\r\n\r\n                    });\r\n\r\n                    setPokemonAttributes(attributes);\r\n                    setEvolutionsGroups(evolutions);\r\n\r\n                } else {\r\n                    setIsProcessing(true);\r\n                \r\n                    setTimeout(() => {\r\n                        setIsProcessing(false);\r\n                    }, 3000);\r\n                    setIsDataRetrieved(false);\r\n                    console.warn('Some API data could not be loaded correctly')\r\n                };\r\n\r\n                setIsLoading(false);\r\n            } catch (error) {\r\n                setIsProcessing(true);\r\n                \r\n                setTimeout(() => {\r\n                    setIsProcessing(false);\r\n                }, 3000);\r\n                setIsDataRetrieved(false);\r\n            };\r\n        };\r\n\r\n        fetchData();\r\n\r\n    }, []);\r\n\r\n    // ----- Sets the form anwsers and the calculates results for type/habitat received from the Form component -----\r\n    const handleFormSubmit = async (finalScore, formAnswers) => {\r\n        setIsProcessing(true);\r\n        setfinalScore(finalScore);\r\n        setFormAnswers(formAnswers);\r\n\r\n        setTimeout(() => {\r\n            setIsProcessing(false);\r\n        }, 1000);\r\n    };\r\n\r\n    // ----- If the form hasn't been submitted, return Form. If it has, return results. -----\r\n    return (\r\n        <> \r\n            <MoreInfoLink />\r\n            <Logo logoHome={false}/>\r\n            {isLoading || isProcessing ? (\r\n                <Loading /> \r\n            ) : !isDataRetrieved ? (\r\n                <ErrorData />\r\n            ) : finalScore.length > 0 ? (\r\n                <PokemonResults \r\n                    finalScore={finalScore} \r\n                    pokemonAttributes={pokemonAttributes} \r\n                    evolutionsGroups={evolutionsGroups} \r\n                    formAnswers={formAnswers}\r\n                />\r\n            ) : (\r\n                <Form \r\n                    getFormResults={handleFormSubmit} \r\n                />\r\n            )}\r\n        </>\r\n    );\r\n\r\n};\r\n\r\nexport default PokeBuzz;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}