{"ast":null,"code":"var _jsxFileName = \"C:\\\\Moana_SSD\\\\WebDev\\\\Projetos\\\\pokebuzz\\\\src\\\\pages\\\\Home.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport './Home.css';\nimport { GetAPIData } from \"../services/APIData\";\nimport Form from \"../components/Form\";\nimport PokemonResults from \"../components/PokemonResults\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Home() {\n  _s();\n  // ----- Creating the state for the constants that will be used -----\n  const [pokemonData, setPokemonData] = useState([]);\n  const [speciesData, setSpeciesData] = useState([]);\n  const [evolutionsData, setEvolutionsData] = useState([]);\n  const [evolutionsGroups, setEvolutionsGroups] = useState([]);\n  const [pokemonAttributes, setPokemonsAttributes] = useState([]);\n  const [typeHabitatResults, setTypeHabitatResults] = useState([]);\n  const [formAnswers, setFormAnswers] = useState([]);\n\n  // ----- On page load -----\n  useEffect(() => {\n    // ----- Calls the function GetAPIData imported from APIData.jsx to set pokemon, species and evolution data -----\n    const fetchData = async () => {\n      const APIData = await GetAPIData();\n      setPokemonData(APIData.pokemon[0]);\n      setSpeciesData(APIData.species[0]);\n      setEvolutionsData(APIData.evolutions[0]);\n    };\n    fetchData();\n  }, []);\n\n  // ----- When pokemonData, speciesData or evolutionsData is updated... -----\n  useEffect(() => {\n    // ----- If the data returned alright... -----\n    if (pokemonData.length > 0 && speciesData.length > 0 && evolutionsData.length > 0) {\n      // ----- Creates an array with information/attributes of all pokemon -----\n      getPokemonAttributes();\n\n      // ----- Creates an array grouping all evolutions of an especies -----\n      const pokeEvolutions = evolutionsData.map(groups => {\n        const infoChain = groups.data.chain;\n        return {\n          first: infoChain.species.name ? infoChain.species.name : null,\n          second: infoChain.evolves_to.length > 0 ? infoChain.evolves_to[0].species.name : null,\n          third: infoChain.evolves_to.length > 0 && infoChain.evolves_to[0].evolves_to.length > 0 ? infoChain.evolves_to[0].evolves_to[0].species.name : null\n        };\n      });\n      setEvolutionsGroups(pokeEvolutions);\n    } else {\n      console.log('No data available yet.');\n    }\n  }, [pokemonData, speciesData, evolutionsData]);\n\n  // ----- Gathers information on each pokemon and species on one single array -----\n  const getPokemonAttributes = () => {\n    const pokemonInfo = pokemonData.map(data => {\n      const pokemonData = data.data;\n      return {\n        id: pokemonData.id,\n        name: pokemonData.name,\n        height: pokemonData.height,\n        weight: pokemonData.weight,\n        type1: pokemonData.types[0].type.name,\n        type2: pokemonData.types[1] ? pokemonData.types[1].type.name : null,\n        image: pokemonData.sprites.other.dream_world.front_default\n      };\n    });\n    const speciesInfo = speciesData.map(data => {\n      const speciesData = data.data;\n      return {\n        color: speciesData.color.name,\n        habitat: speciesData.habitat.name\n      };\n    });\n    const attributes = pokemonInfo.map((pokemonItem, index) => {\n      const speciesItem = speciesInfo[index] || {};\n      return {\n        ...pokemonItem,\n        ...speciesItem\n      };\n    });\n    setPokemonsAttributes(attributes);\n  };\n\n  // ----- Sets the form anwsers and the calculated results for type/habitat received from the Form component -----\n  const getFormResults = (typeHabitatResults, formAnswers) => {\n    setTypeHabitatResults(typeHabitatResults);\n    setFormAnswers(formAnswers);\n  };\n\n  // ----- If the form hasn't been submitted, return Form. If it has, return results. -----\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: typeHabitatResults.length > 0 ? /*#__PURE__*/_jsxDEV(PokemonResults, {\n      pokemonResults: typeHabitatResults,\n      pokemonAttributes: pokemonAttributes,\n      evolutions: evolutionsGroups,\n      formAnswers: formAnswers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(Form, {\n      getFormResults: getFormResults\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(Home, \"YyXRQAwY+5+mh/0PRz3cXQGpBkk=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["useEffect","useState","GetAPIData","Form","PokemonResults","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","_s","pokemonData","setPokemonData","speciesData","setSpeciesData","evolutionsData","setEvolutionsData","evolutionsGroups","setEvolutionsGroups","pokemonAttributes","setPokemonsAttributes","typeHabitatResults","setTypeHabitatResults","formAnswers","setFormAnswers","fetchData","APIData","pokemon","species","evolutions","length","getPokemonAttributes","pokeEvolutions","map","groups","infoChain","data","chain","first","name","second","evolves_to","third","console","log","pokemonInfo","id","height","weight","type1","types","type","type2","image","sprites","other","dream_world","front_default","speciesInfo","color","habitat","attributes","pokemonItem","index","speciesItem","getFormResults","children","pokemonResults","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Moana_SSD/WebDev/Projetos/pokebuzz/src/pages/Home.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport './Home.css'\r\nimport { GetAPIData } from \"../services/APIData\";\r\nimport Form from \"../components/Form\";\r\nimport PokemonResults from \"../components/PokemonResults\";\r\n\r\nfunction Home () {    \r\n    \r\n    // ----- Creating the state for the constants that will be used -----\r\n    const [pokemonData, setPokemonData] = useState([]);\r\n    const [speciesData, setSpeciesData] = useState([]);\r\n    const [evolutionsData, setEvolutionsData] = useState([]);\r\n    const [evolutionsGroups, setEvolutionsGroups] = useState([]);\r\n    const [pokemonAttributes, setPokemonsAttributes] = useState([]);\r\n    const [typeHabitatResults, setTypeHabitatResults] = useState([]);\r\n    const [formAnswers, setFormAnswers] = useState([]);\r\n    \r\n    // ----- On page load -----\r\n    useEffect(() => {\r\n        // ----- Calls the function GetAPIData imported from APIData.jsx to set pokemon, species and evolution data -----\r\n        const fetchData = async () => {\r\n            const APIData = await GetAPIData();\r\n\r\n            setPokemonData(APIData.pokemon[0]);\r\n            setSpeciesData(APIData.species[0]);\r\n            setEvolutionsData(APIData.evolutions[0]);\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    // ----- When pokemonData, speciesData or evolutionsData is updated... -----\r\n    useEffect(() => {\r\n        // ----- If the data returned alright... -----\r\n        if (pokemonData.length > 0 && speciesData.length > 0 && evolutionsData.length > 0) {\r\n            // ----- Creates an array with information/attributes of all pokemon -----\r\n            getPokemonAttributes();\r\n\r\n            // ----- Creates an array grouping all evolutions of an especies -----\r\n            const pokeEvolutions = evolutionsData.map(groups => {\r\n                const infoChain = groups.data.chain;\r\n                return {\r\n                        first: infoChain.species.name ? infoChain.species.name : null,\r\n                        second: infoChain.evolves_to.length > 0 ? infoChain.evolves_to[0].species.name : null,\r\n                        third: infoChain.evolves_to.length > 0 && infoChain.evolves_to[0].evolves_to.length > 0 ? infoChain.evolves_to[0].evolves_to[0].species.name : null\r\n                    }\r\n                \r\n            })\r\n            setEvolutionsGroups(pokeEvolutions);\r\n        } else {\r\n            console.log('No data available yet.');\r\n        }\r\n    }, [pokemonData, speciesData, evolutionsData]);\r\n\r\n    // ----- Gathers information on each pokemon and species on one single array -----\r\n    const getPokemonAttributes = () => {\r\n\r\n        const pokemonInfo = pokemonData.map((data) => {\r\n            const pokemonData = data.data;\r\n            return {\r\n                id: pokemonData.id,\r\n                name: pokemonData.name,\r\n                height: pokemonData.height,\r\n                weight: pokemonData.weight,\r\n                type1: pokemonData.types[0].type.name,\r\n                type2: pokemonData.types[1] ? pokemonData.types[1].type.name : null,\r\n                image: pokemonData.sprites.other.dream_world.front_default,\r\n            }\r\n        })\r\n\r\n        const speciesInfo = speciesData.map(data => {\r\n            const speciesData = data.data;\r\n            return {\r\n                color: speciesData.color.name,\r\n                habitat: speciesData.habitat.name\r\n            }\r\n        })\r\n\r\n        const attributes = pokemonInfo.map((pokemonItem, index) => {\r\n            const speciesItem = speciesInfo[index] || {};\r\n            return {\r\n                ...pokemonItem,\r\n                ...speciesItem,\r\n            }\r\n        })\r\n\r\n        setPokemonsAttributes(attributes);\r\n    }\r\n\r\n    // ----- Sets the form anwsers and the calculated results for type/habitat received from the Form component -----\r\n    const getFormResults = (typeHabitatResults, formAnswers) => {\r\n        setTypeHabitatResults(typeHabitatResults);\r\n        setFormAnswers(formAnswers)\r\n    }\r\n\r\n    // ----- If the form hasn't been submitted, return Form. If it has, return results. -----\r\n\treturn (\r\n        <> \r\n        {typeHabitatResults.length > 0 ? \r\n            <PokemonResults \r\n                pokemonResults={typeHabitatResults} \r\n                pokemonAttributes={pokemonAttributes} \r\n                evolutions={evolutionsGroups} \r\n                formAnswers={formAnswers} \r\n            /> \r\n                :\r\n            <Form \r\n                getFormResults={getFormResults} \r\n            />\r\n        }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}