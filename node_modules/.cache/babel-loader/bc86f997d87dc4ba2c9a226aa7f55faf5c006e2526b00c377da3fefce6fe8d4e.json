{"ast":null,"code":"import teste from \"../data/scoreTable.json\";\n// ---------- Function do calculate the results of the better ranked types/habitas based on the scoreTable for each option selected by the user ---------- //\nexport const getResults = formAnswers => {\n  // ----- Initializing the score for each type/habitat -----\n  const score = [{\n    type_habitat: 'bug',\n    value: 0\n  }, {\n    type_habitat: 'dragon',\n    value: 0\n  }, {\n    type_habitat: 'electric',\n    value: 0\n  }, {\n    type_habitat: 'fairy',\n    value: 0\n  }, {\n    type_habitat: 'fighting',\n    value: 0\n  }, {\n    type_habitat: 'fire',\n    value: 0\n  }, {\n    type_habitat: 'flying',\n    value: 0\n  }, {\n    type_habitat: 'ghost',\n    value: 0\n  }, {\n    type_habitat: 'grass',\n    value: 0\n  }, {\n    type_habitat: 'ground',\n    value: 0\n  }, {\n    type_habitat: 'ice',\n    value: 0\n  }, {\n    type_habitat: 'normal',\n    value: 0\n  }, {\n    type_habitat: 'poison',\n    value: 0\n  }, {\n    type_habitat: 'psychic',\n    value: 0\n  }, {\n    type_habitat: 'rock',\n    value: 0\n  }, {\n    type_habitat: 'steel',\n    value: 0\n  }, {\n    type_habitat: 'water',\n    value: 0\n  }, {\n    type_habitat: 'cave',\n    value: 0\n  }, {\n    type_habitat: 'forest',\n    value: 0\n  }, {\n    type_habitat: 'grassland',\n    value: 0\n  }, {\n    type_habitat: 'mountain',\n    value: 0\n  }, {\n    type_habitat: 'roughTerrain',\n    value: 0\n  }, {\n    type_habitat: 'sea',\n    value: 0\n  }, {\n    type_habitat: 'urban',\n    value: 0\n  }, {\n    type_habitat: 'waterEdges',\n    value: 0\n  }];\n\n  // ----- Score table for each Option of each Question of the Form -----\n  // Colocar em ordem alfabética a pontuação\n  // const scoreTable = [\n  //     {\n  // \t\tquestion: 'transportation',\n  // \t\tanswers: [\n  // \t\t\t{ value: 'car', points: { ground: 1, normal: 3, roughTerrain: 1, urban: 3 } },\n  // \t\t\t{ value: 'airplane', points: { dragon: 2, flying: 3, psychic: 1, mountain: 1 } },\n  // \t\t\t{ value: 'ship', points: { ice: 3, water: 1, sea: 3, waterEdges: 2 } },\n  // \t\t\t{ value: 'train', points: { electric: 1, fairy: 1, fire: 1, ghost: 1, ground: 1, psychic: 1, rock: 1, steel: 1, cave: 2 } },\n  // \t\t\t{ value: 'byfoot', points: { bug: 1, fairy: 1, fighting: 1, grass: 1, ground: 1, poison: 1, rock: 1, cave: 1, forest: 1, grassland: 1 } },\n  // \t\t]\n  //     },\n  //     {\n  // \t\tquestion: 'setting',\n  // \t\tanswers: [\n  // \t\t\t{ value: 'countryside', points: { bug: 2, grass: 2, ground: 1, forest: 2, grassland: 3 } },\n  // \t\t\t{ value: 'beach', points: { water: 2, sea: 3, waterEdges: 1 } },\n  // \t\t\t{ value: 'mountain', points: { dragon: 2, fire: 1, flying: 2, ice: 1, rock: 2, mountain: 3, roughTerrain: 2 } },\n  // \t\t\t{ value: 'city', points: { electric: 3, fighting: 2, ghost: 1, normal: 2, poison: 1, psychic: 1, urban: 3 } },\n  // \t\t\t{ value: 'cave', points: { fairy: 1, rock: 2, cave: 3 } }\n  // \t\t],\n  //     },\n  //     {\n  // \t\tquestion: 'naturalPhenomenon',\n  // \t\tanswers: [\n  // \t\t\t{ value: 'volcano', points: { mountain: 3, fighting: 1, fire: 3, steel: 2 } },\n  // \t\t\t{ value: 'earthquake', points: { cave: 1, forest: 1, grassland: 1, bug: 1, grass: 1, ground: 3, rock: 2 } },\n  // \t\t\t{ value: 'tsunami', points: { sea: 3, waterEdges: 1, water: 2 } },\n  // \t\t\t{ value: 'hurricane', points: { dragon: 2, fairy: 1, flying: 3, psychic: 1 } },\n  // \t\t\t{ value: 'storm', points: { urban: 2, electric: 3, normal: 1, poison: 1 } },\n  // \t\t\t{ value: 'sandstorm', points: { roughTerrain: 2, ghost: 1 } },\n  // \t\t\t{ value: 'blizzard', points: { sea: 1, waterEdges: 2, ice: 3, water: 2 } },\n  // \t\t],\n  //     },\n  //     {\n  // \t\tquestion: 'activity',\n  // \t\tanswers: [\n  // \t\t\t{ value: 'poolparty', points: { sea: 2, waterEdges: 3, ice: 1, water: 3 } },\n  // \t\t\t{ value: 'workout', points: { urban: 1, fighting: 3, steel: 2 } },\n  // \t\t\t{ value: 'circus', points: { fairy: 2, ghost: 2, poison: 1, psychic: 3 } },\n  // \t\t\t{ value: 'camping', points: { forest: 3, grassland: 2, grass: 2, bug: 3 } },\n  // \t\t\t{ value: 'stayinandchill', points: { urban: 3, normal: 2 } },\n  // \t\t\t{ value: 'rally', points: { roughTerrain: 3, electric: 1, fire: 1, ground: 3, rock: 2} },\n  // \t\t\t{ value: 'hiking', points: { cave: 1, mountain: 3 , roughTerrain: 3, dragon: 2, flying: 1, ground: 3, rock: 2} },\n\n  // \t\t],\n  //     },\n  // \t{\n  // \t\tquestion: 'placeToChill',\n  // \t\tanswers: [\n  // \t\t\t{ value: 'gym', points: { urban: 2, electric: 1, fighting: 3, rock: 1, steel: 2 } },\n  // \t\t\t{ value: 'cemetery', points: { cave: 1, poison: 3, ghost: 3, psychic: 2 } },\n  // \t\t\t{ value: 'mall', points: { urban: 3, electric: 2, steel: 1 } },\n  // \t\t\t{ value: 'pool', points: { sea: 2, waterEdges: 3, ice: 1, water: 3 } },\n  // \t\t\t{ value: 'library', points: { ghost: 1, normal: 2, psychic: 3 } },\n  // \t\t\t{ value: 'park', points: { forest: 2, grassland: 3, mountain: 1, roughTerrain: 1 } },\n  // \t\t\t{ value: 'sauna', points: { fire: 2 } }\n  // \t\t]\n  // \t},\n  //     {\n  // \t\tquestion: 'taylorAlbum',\n  // \t\tanswers: [\n  // \t\t\t{ value: 'debut', points: { electric: 1, grass: 3, forest: 2, grassland: 3, waterEdges: 2 } },\n  // \t\t\t{ value: 'fearlesstv', points: { electric: 1, fairy: 3, flying: 2, steel: 1, roughTerrain: 1} },\n  // \t\t\t{ value: 'speaknowtv', points: { dragon: 2, electric: 1, fairy: 2, fighting: 1, flying: 2, urban: 1} },\n  // \t\t\t{ value: 'redtv', points: { fire: 2, rock: 1, roughTerrain: 1} },\n  // \t\t\t{ value: '1989tv', points: { electric: 2, fighting: 1, flying: 1, ice: 1, water: 1, sea: 1, urban: 3} },\n  // \t\t\t{ value: 'reputation', points: { dragon: 2, electric: 2, fighting: 3, fire: 3, ice: 1, poison: 3, steel: 2, urban: 1} },\n  // \t\t\t{ value: 'lover', points: { electric: 3, fairy: 2, normal: 1, water: 1, sea: 1, urban: 2} },\n  // \t\t\t{ value: 'folklore', points: { bug: 2, fairy: 3, grass: 3, rock: 1, water: 2, cave: 2, forest: 3, grassland: 3, mountain: 1, waterEdges: 2 } },\n  // \t\t\t{ value: 'evermore', points: { bug: 2, electric: 1, fairy: 3, fire: 2, grass: 3, rock: 1, cave: 2, forest: 3, grassland: 3} },\n  // \t\t\t{ value: 'midnights', points: { bug: 1, fairy: 2, normal: 2, poison: 3, mountain: 1, urban: 3} },\n  // \t\t\t{ value: 'thetorturedpoetsdepartment', points: { fighting: 3, ghost: 2, poison: 3, psychic: 3, cave: 1, mountain: 1 } },\n  // \t\t]\n  //     }\n  // ];\n\n  const scoreTable = teste;\n  console.log(scoreTable);\n\n  // ----- Iterating through the user's answers to calculate the results for type/habitat -----\n  for (let answerTitle in formAnswers) {\n    // ----- Finding the index of the matching question inside the scoreTable -----\n    let indexOfScoreInfo = scoreTable.findIndex(scoreInfo => scoreInfo.question === answerTitle);\n    // ----- The 'color' question will return an index of -1 because it's not contained in the scoreTable. So we'll not consider it -----\n    if (indexOfScoreInfo >= 0) {\n      // ----- Finding the index of the matching answer inside the current question -----\n      let indexOfAnswer = scoreTable[indexOfScoreInfo].answers.findIndex(answerScore => answerScore.value === formAnswers[answerTitle]);\n      // ----- Accessing that answer to check the scores defined for it -----\n      let scoresList = scoreTable[indexOfScoreInfo].answers[indexOfAnswer].points;\n      // ----- Iterating through each answer score to update the user's score for each type/habitat -----\n      for (let scoreItem in scoresList) {\n        // ----- Finding the index matching the current type/habitat score -----\n        const scoreIndex = score.findIndex(item => item.type_habitat === scoreItem);\n        // ----- Updating the user's score -----\n        score[scoreIndex].value += scoresList[scoreItem];\n      }\n    }\n  }\n\n  // ----- Sorting the user's score from highest to lowest -----\n  score.sort(function (a, b) {\n    if (b.value > a.value) {\n      return 1;\n    }\n    if (b.value < a.value) {\n      return -1;\n    }\n    return 0;\n  });\n  console.log('finalScore', score);\n  return score;\n};","map":{"version":3,"names":["teste","getResults","formAnswers","score","type_habitat","value","scoreTable","console","log","answerTitle","indexOfScoreInfo","findIndex","scoreInfo","question","indexOfAnswer","answers","answerScore","scoresList","points","scoreItem","scoreIndex","item","sort","a","b"],"sources":["C:/Moana_SSD/WebDev/Projetos/pokebuzz/src/services/results.jsx"],"sourcesContent":["\r\nimport teste from \"../data/scoreTable.json\"\r\n// ---------- Function do calculate the results of the better ranked types/habitas based on the scoreTable for each option selected by the user ---------- //\r\nexport const getResults = (formAnswers) => {\r\n\r\n\t// ----- Initializing the score for each type/habitat -----\r\n\tconst score = [\r\n\t\t{\r\n\t\t\ttype_habitat: 'bug',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'dragon',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'electric',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'fairy',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'fighting',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'fire',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'flying',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'ghost',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'grass',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'ground',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'ice',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'normal',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'poison',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'psychic',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'rock',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'steel',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'water',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'cave',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'forest',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'grassland',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'mountain',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'roughTerrain',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'sea',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'urban',\r\n\t\t\tvalue: 0,\r\n\t\t},\r\n\t\t{\r\n\t\t\ttype_habitat: 'waterEdges',\r\n\t\t\tvalue: 0,\r\n\t\t}\r\n\t];\r\n\r\n\t// ----- Score table for each Option of each Question of the Form -----\r\n\t// Colocar em ordem alfabética a pontuação\r\n    // const scoreTable = [\r\n    //     {\r\n\t// \t\tquestion: 'transportation',\r\n\t// \t\tanswers: [\r\n\t// \t\t\t{ value: 'car', points: { ground: 1, normal: 3, roughTerrain: 1, urban: 3 } },\r\n\t// \t\t\t{ value: 'airplane', points: { dragon: 2, flying: 3, psychic: 1, mountain: 1 } },\r\n\t// \t\t\t{ value: 'ship', points: { ice: 3, water: 1, sea: 3, waterEdges: 2 } },\r\n\t// \t\t\t{ value: 'train', points: { electric: 1, fairy: 1, fire: 1, ghost: 1, ground: 1, psychic: 1, rock: 1, steel: 1, cave: 2 } },\r\n\t// \t\t\t{ value: 'byfoot', points: { bug: 1, fairy: 1, fighting: 1, grass: 1, ground: 1, poison: 1, rock: 1, cave: 1, forest: 1, grassland: 1 } },\r\n\t// \t\t]\r\n    //     },\r\n    //     {\r\n\t// \t\tquestion: 'setting',\r\n\t// \t\tanswers: [\r\n\t// \t\t\t{ value: 'countryside', points: { bug: 2, grass: 2, ground: 1, forest: 2, grassland: 3 } },\r\n\t// \t\t\t{ value: 'beach', points: { water: 2, sea: 3, waterEdges: 1 } },\r\n\t// \t\t\t{ value: 'mountain', points: { dragon: 2, fire: 1, flying: 2, ice: 1, rock: 2, mountain: 3, roughTerrain: 2 } },\r\n\t// \t\t\t{ value: 'city', points: { electric: 3, fighting: 2, ghost: 1, normal: 2, poison: 1, psychic: 1, urban: 3 } },\r\n\t// \t\t\t{ value: 'cave', points: { fairy: 1, rock: 2, cave: 3 } }\r\n\t// \t\t],\r\n    //     },\r\n    //     {\r\n\t// \t\tquestion: 'naturalPhenomenon',\r\n\t// \t\tanswers: [\r\n\t// \t\t\t{ value: 'volcano', points: { mountain: 3, fighting: 1, fire: 3, steel: 2 } },\r\n\t// \t\t\t{ value: 'earthquake', points: { cave: 1, forest: 1, grassland: 1, bug: 1, grass: 1, ground: 3, rock: 2 } },\r\n\t// \t\t\t{ value: 'tsunami', points: { sea: 3, waterEdges: 1, water: 2 } },\r\n\t// \t\t\t{ value: 'hurricane', points: { dragon: 2, fairy: 1, flying: 3, psychic: 1 } },\r\n\t// \t\t\t{ value: 'storm', points: { urban: 2, electric: 3, normal: 1, poison: 1 } },\r\n\t// \t\t\t{ value: 'sandstorm', points: { roughTerrain: 2, ghost: 1 } },\r\n\t// \t\t\t{ value: 'blizzard', points: { sea: 1, waterEdges: 2, ice: 3, water: 2 } },\r\n\t// \t\t],\r\n    //     },\r\n    //     {\r\n\t// \t\tquestion: 'activity',\r\n\t// \t\tanswers: [\r\n\t// \t\t\t{ value: 'poolparty', points: { sea: 2, waterEdges: 3, ice: 1, water: 3 } },\r\n\t// \t\t\t{ value: 'workout', points: { urban: 1, fighting: 3, steel: 2 } },\r\n\t// \t\t\t{ value: 'circus', points: { fairy: 2, ghost: 2, poison: 1, psychic: 3 } },\r\n\t// \t\t\t{ value: 'camping', points: { forest: 3, grassland: 2, grass: 2, bug: 3 } },\r\n\t// \t\t\t{ value: 'stayinandchill', points: { urban: 3, normal: 2 } },\r\n\t// \t\t\t{ value: 'rally', points: { roughTerrain: 3, electric: 1, fire: 1, ground: 3, rock: 2} },\r\n\t// \t\t\t{ value: 'hiking', points: { cave: 1, mountain: 3 , roughTerrain: 3, dragon: 2, flying: 1, ground: 3, rock: 2} },\r\n\t\t\t\t\r\n\t// \t\t],\r\n    //     },\r\n\t// \t{\r\n\t// \t\tquestion: 'placeToChill',\r\n\t// \t\tanswers: [\r\n\t// \t\t\t{ value: 'gym', points: { urban: 2, electric: 1, fighting: 3, rock: 1, steel: 2 } },\r\n\t// \t\t\t{ value: 'cemetery', points: { cave: 1, poison: 3, ghost: 3, psychic: 2 } },\r\n\t// \t\t\t{ value: 'mall', points: { urban: 3, electric: 2, steel: 1 } },\r\n\t// \t\t\t{ value: 'pool', points: { sea: 2, waterEdges: 3, ice: 1, water: 3 } },\r\n\t// \t\t\t{ value: 'library', points: { ghost: 1, normal: 2, psychic: 3 } },\r\n\t// \t\t\t{ value: 'park', points: { forest: 2, grassland: 3, mountain: 1, roughTerrain: 1 } },\r\n\t// \t\t\t{ value: 'sauna', points: { fire: 2 } }\r\n\t// \t\t]\r\n\t// \t},\r\n    //     {\r\n\t// \t\tquestion: 'taylorAlbum',\r\n\t// \t\tanswers: [\r\n\t// \t\t\t{ value: 'debut', points: { electric: 1, grass: 3, forest: 2, grassland: 3, waterEdges: 2 } },\r\n\t// \t\t\t{ value: 'fearlesstv', points: { electric: 1, fairy: 3, flying: 2, steel: 1, roughTerrain: 1} },\r\n\t// \t\t\t{ value: 'speaknowtv', points: { dragon: 2, electric: 1, fairy: 2, fighting: 1, flying: 2, urban: 1} },\r\n\t// \t\t\t{ value: 'redtv', points: { fire: 2, rock: 1, roughTerrain: 1} },\r\n\t// \t\t\t{ value: '1989tv', points: { electric: 2, fighting: 1, flying: 1, ice: 1, water: 1, sea: 1, urban: 3} },\r\n\t// \t\t\t{ value: 'reputation', points: { dragon: 2, electric: 2, fighting: 3, fire: 3, ice: 1, poison: 3, steel: 2, urban: 1} },\r\n\t// \t\t\t{ value: 'lover', points: { electric: 3, fairy: 2, normal: 1, water: 1, sea: 1, urban: 2} },\r\n\t// \t\t\t{ value: 'folklore', points: { bug: 2, fairy: 3, grass: 3, rock: 1, water: 2, cave: 2, forest: 3, grassland: 3, mountain: 1, waterEdges: 2 } },\r\n\t// \t\t\t{ value: 'evermore', points: { bug: 2, electric: 1, fairy: 3, fire: 2, grass: 3, rock: 1, cave: 2, forest: 3, grassland: 3} },\r\n\t// \t\t\t{ value: 'midnights', points: { bug: 1, fairy: 2, normal: 2, poison: 3, mountain: 1, urban: 3} },\r\n\t// \t\t\t{ value: 'thetorturedpoetsdepartment', points: { fighting: 3, ghost: 2, poison: 3, psychic: 3, cave: 1, mountain: 1 } },\r\n\t// \t\t]\r\n    //     }\r\n    // ];\r\n\r\n\tconst scoreTable = teste;\r\n\tconsole.log(scoreTable)\r\n \r\n\t// ----- Iterating through the user's answers to calculate the results for type/habitat -----\r\n\tfor (let answerTitle in formAnswers) {\r\n\t\t// ----- Finding the index of the matching question inside the scoreTable -----\r\n\t\tlet indexOfScoreInfo = scoreTable.findIndex(scoreInfo => scoreInfo.question === answerTitle);\r\n\t\t// ----- The 'color' question will return an index of -1 because it's not contained in the scoreTable. So we'll not consider it -----\r\n\t\tif (indexOfScoreInfo >= 0) {\r\n\t\t\t// ----- Finding the index of the matching answer inside the current question -----\r\n\t\t\tlet indexOfAnswer = scoreTable[indexOfScoreInfo].answers.findIndex(answerScore => answerScore.value === formAnswers[answerTitle]);\r\n\t\t\t// ----- Accessing that answer to check the scores defined for it -----\r\n\t\t\tlet scoresList = scoreTable[indexOfScoreInfo].answers[indexOfAnswer].points;\r\n\t\t\t// ----- Iterating through each answer score to update the user's score for each type/habitat -----\r\n\t\t\tfor (let scoreItem in scoresList) { \r\n\t\t\t\t// ----- Finding the index matching the current type/habitat score -----\r\n\t\t\t\tconst scoreIndex = score.findIndex(item => item.type_habitat === scoreItem);\r\n\t\t\t\t// ----- Updating the user's score -----\r\n\t\t\t\tscore[scoreIndex].value += scoresList[scoreItem];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// ----- Sorting the user's score from highest to lowest -----\r\n\tscore.sort(function (a, b) {\r\n\t\tif (b.value > a.value) {\r\n\t\t  return 1;\r\n\t\t}\r\n\t\tif (b.value < a.value) {\r\n\t\t  return -1;\r\n\t\t}\r\n\t\treturn 0;\r\n\t  });\r\n\r\n\t  console.log('finalScore', score);\r\n\t  return score;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}