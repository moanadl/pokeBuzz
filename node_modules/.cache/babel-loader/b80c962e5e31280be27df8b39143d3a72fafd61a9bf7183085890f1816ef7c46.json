{"ast":null,"code":"import{useState}from\"react\";import Option from\"../Option\";import questionOptions from'../../data/questionOptions.json';import questionNameMap from'../../data/questionNameMap.json';import\"./Question.css\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function Question(_ref){let{label,optionKey,hasError,getFormAnswers,index,testid}=_ref;const[answer,setAnswer]=useState('');const questionName=Object.keys(questionNameMap)[index];const handleChange=e=>{const selectedOption=e.target.value;const fieldsetParent=e.target.parentNode.closest('fieldset');const errorImage=fieldsetParent.getElementsByClassName('form-error-image')[0];if(errorImage!==undefined){errorImage.style.display='none';}fieldsetParent.classList.remove('error-fieldset');setAnswer(selectedOption);getFormAnswers({[optionKey]:selectedOption});// From Form component\n};return/*#__PURE__*/_jsxs(\"fieldset\",{\"data-testid\":testid,className:hasError?'error-fieldset':'',children:[hasError?/*#__PURE__*/_jsx(\"img\",{src:\"images/snorlax.png\",className:\"form-error-image\",role:\"alert\",alt:\"Snorlax indicating unanswered question\"}):'',/*#__PURE__*/_jsx(\"legend\",{children:label}),questionOptions[questionName].map(option=>/*#__PURE__*/_jsx(Option,{id:\"option-\".concat(option.toLowerCase().replace(/\\s/g,'')),name:optionKey,value:option.toLowerCase().replace(/\\s/g,''),content:option,getData:handleChange},\"option-\".concat(option.toLowerCase().replace(/\\s/g,''))))]});};export default Question;","map":{"version":3,"names":["useState","Option","questionOptions","questionNameMap","jsx","_jsx","jsxs","_jsxs","Question","_ref","label","optionKey","hasError","getFormAnswers","index","testid","answer","setAnswer","questionName","Object","keys","handleChange","e","selectedOption","target","value","fieldsetParent","parentNode","closest","errorImage","getElementsByClassName","undefined","style","display","classList","remove","className","children","src","role","alt","map","option","id","concat","toLowerCase","replace","name","content","getData"],"sources":["C:/Moana_SSD/WebDev/Projetos/pokebuzz/src/components/Question/index.jsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport Option from \"../Option\";\r\nimport questionOptions from '../../data/questionOptions.json';\r\nimport questionNameMap from '../../data/questionNameMap.json';\r\nimport \"./Question.css\"\r\n\r\nfunction Question ({ label, optionKey, hasError, getFormAnswers, index, testid}) {\r\n\r\n    const [answer, setAnswer] = useState('');\r\n\r\n   const questionName = Object.keys(questionNameMap)[index];\r\n    \r\n    const handleChange = e => {\r\n        const selectedOption = e.target.value;\r\n        const fieldsetParent = e.target.parentNode.closest('fieldset');\r\n        const errorImage = fieldsetParent.getElementsByClassName('form-error-image')[0];\r\n\r\n        if (errorImage !== undefined) {\r\n            errorImage.style.display = 'none'\r\n        }\r\n\r\n        fieldsetParent.classList.remove('error-fieldset');\r\n\r\n        setAnswer(selectedOption);\r\n        getFormAnswers({ [optionKey]: selectedOption }); // From Form component\r\n    };\r\n    \r\n\treturn (\r\n            <fieldset data-testid={testid} className={hasError ? 'error-fieldset' : ''}>\r\n\r\n                {hasError ? <img src='images/snorlax.png' className=\"form-error-image\" role='alert' alt='Snorlax indicating unanswered question'/> : ''}\r\n\r\n                <legend>{label}</legend>\r\n                {questionOptions[questionName].map(option => \r\n                    <Option \r\n                        key={`option-${option.toLowerCase().replace(/\\s/g, '')}`} \r\n                        id={`option-${option.toLowerCase().replace(/\\s/g, '')}`} \r\n                        name={optionKey} \r\n                        value={option.toLowerCase().replace(/\\s/g, '')} \r\n                        content={option} \r\n                        getData={handleChange} />\r\n                )}\r\n\r\n            </fieldset>\r\n\t);\r\n};\r\n\r\nexport default Question;\r\n"],"mappings":"AAAA,OAASA,QAAQ,KAAQ,OAAO,CAChC,MAAO,CAAAC,MAAM,KAAM,WAAW,CAC9B,MAAO,CAAAC,eAAe,KAAM,iCAAiC,CAC7D,MAAO,CAAAC,eAAe,KAAM,iCAAiC,CAC7D,MAAO,gBAAgB,QAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEvB,QAAS,CAAAC,QAAQA,CAAAC,IAAA,CAAgE,IAA9D,CAAEC,KAAK,CAAEC,SAAS,CAAEC,QAAQ,CAAEC,cAAc,CAAEC,KAAK,CAAEC,MAAM,CAAC,CAAAN,IAAA,CAE3E,KAAM,CAACO,MAAM,CAAEC,SAAS,CAAC,CAAGjB,QAAQ,CAAC,EAAE,CAAC,CAEzC,KAAM,CAAAkB,YAAY,CAAGC,MAAM,CAACC,IAAI,CAACjB,eAAe,CAAC,CAACW,KAAK,CAAC,CAEvD,KAAM,CAAAO,YAAY,CAAGC,CAAC,EAAI,CACtB,KAAM,CAAAC,cAAc,CAAGD,CAAC,CAACE,MAAM,CAACC,KAAK,CACrC,KAAM,CAAAC,cAAc,CAAGJ,CAAC,CAACE,MAAM,CAACG,UAAU,CAACC,OAAO,CAAC,UAAU,CAAC,CAC9D,KAAM,CAAAC,UAAU,CAAGH,cAAc,CAACI,sBAAsB,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAE/E,GAAID,UAAU,GAAKE,SAAS,CAAE,CAC1BF,UAAU,CAACG,KAAK,CAACC,OAAO,CAAG,MAAM,CACrC,CAEAP,cAAc,CAACQ,SAAS,CAACC,MAAM,CAAC,gBAAgB,CAAC,CAEjDlB,SAAS,CAACM,cAAc,CAAC,CACzBV,cAAc,CAAC,CAAE,CAACF,SAAS,EAAGY,cAAe,CAAC,CAAC,CAAE;AACrD,CAAC,CAEJ,mBACWhB,KAAA,aAAU,cAAaQ,MAAO,CAACqB,SAAS,CAAExB,QAAQ,CAAG,gBAAgB,CAAG,EAAG,CAAAyB,QAAA,EAEtEzB,QAAQ,cAAGP,IAAA,QAAKiC,GAAG,CAAC,oBAAoB,CAACF,SAAS,CAAC,kBAAkB,CAACG,IAAI,CAAC,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC,CAAC,CAAG,EAAE,cAEvInC,IAAA,WAAAgC,QAAA,CAAS3B,KAAK,CAAS,CAAC,CACvBR,eAAe,CAACgB,YAAY,CAAC,CAACuB,GAAG,CAACC,MAAM,eACrCrC,IAAA,CAACJ,MAAM,EAEH0C,EAAE,WAAAC,MAAA,CAAYF,MAAM,CAACG,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,KAAK,CAAE,EAAE,CAAC,CAAG,CACxDC,IAAI,CAAEpC,SAAU,CAChBc,KAAK,CAAEiB,MAAM,CAACG,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,KAAK,CAAE,EAAE,CAAE,CAC/CE,OAAO,CAAEN,MAAO,CAChBO,OAAO,CAAE5B,YAAa,YAAAuB,MAAA,CALPF,MAAM,CAACG,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,KAAK,CAAE,EAAE,CAAC,CAK9B,CAChC,CAAC,EAEK,CAAC,CAEvB,CAAC,CAED,cAAe,CAAAtC,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}