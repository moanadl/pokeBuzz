{"ast":null,"code":"import scoreTable from \"../data/scoreTable.json\";\nimport pokemonTypes from \"../data/pokemonTypes.json\";\n\n// ---------- Function do calculate the results of the better ranked types/habitas based on the scoreTable for each option selected by the user ---------- //\nexport const getResults = formAnswers => {\n  // ----- Initializing the score for each type/habitat -----\n  const score = {};\n\n  // Creating the object\n  pokemonTypes.forEach(type => {\n    score[type] = 0;\n  });\n\n  // ----- Iterating through the user's answers to calculate the results for type/habitat -----\n  Object.entries(formAnswers).forEach(([questionTitle, answer]) => {\n    const questionOptions = scoreTable.find(scoreTableItem => scoreTableItem.question === questionTitle);\n    if (!questionOptions) return; // Color option\n\n    const answerPoints = questionOptions.answers.find(a => a.value === answer);\n    if (!answerPoints) return;\n    Object.entries(answerPoints.points).forEach(([type, points]) => {\n      score[type] += points;\n    });\n  });\n  console.log('teste', Object.entries(score));\n  console.log('score', score);\n  // ----- Sorting the user's score from highest to lowest -----\n  const sortedScore = Object.entries(score).map(([type, points]) => ({\n    type,\n    points\n  })).sort((a, b) => b.points - a.points);\n  console.log('finalScore', sortedScore);\n  return sortedScore;\n};","map":{"version":3,"names":["scoreTable","pokemonTypes","getResults","formAnswers","score","forEach","type","Object","entries","questionTitle","answer","questionOptions","find","scoreTableItem","question","answerPoints","answers","a","value","points","console","log","sortedScore","map","sort","b"],"sources":["C:/Moana_SSD/WebDev/Projetos/pokebuzz/src/services/results.jsx"],"sourcesContent":["\r\nimport scoreTable from \"../data/scoreTable.json\"\r\nimport pokemonTypes from \"../data/pokemonTypes.json\";\r\n\r\n// ---------- Function do calculate the results of the better ranked types/habitas based on the scoreTable for each option selected by the user ---------- //\r\nexport const getResults = (formAnswers) => {\r\n\r\n\t// ----- Initializing the score for each type/habitat -----\r\n\tconst score = {};\r\n\r\n\t// Creating the object\r\n\tpokemonTypes.forEach(type => {\r\n\t\tscore[type] = 0;\r\n\t});\r\n\r\n\t// ----- Iterating through the user's answers to calculate the results for type/habitat -----\r\n\tObject.entries(formAnswers).forEach(([questionTitle, answer]) => {\r\n\t\tconst questionOptions = scoreTable.find(scoreTableItem => scoreTableItem.question === questionTitle);\r\n\t\tif (!questionOptions) return // Color option\r\n\r\n\t\tconst answerPoints = questionOptions.answers.find(a => a.value === answer);\r\n\t\tif (!answerPoints) return\r\n\r\n\t\tObject.entries(answerPoints.points).forEach(([type, points]) => {\r\n\t\t\tscore[type] += points;\r\n\t\t})\r\n\t})\r\n\r\n\tconsole.log('teste', Object.entries(score));\r\n\tconsole.log('score', score);\r\n\t// ----- Sorting the user's score from highest to lowest -----\r\n\tconst sortedScore = Object.entries(score)\r\n\t.map(([type, points]) => ({ type, points }))\r\n\t.sort((a, b) => b.points - a.points);\r\n\r\n\t  console.log('finalScore', sortedScore);\r\n\t  return sortedScore;\r\n};\r\n"],"mappings":"AACA,OAAOA,UAAU,MAAM,yBAAyB;AAChD,OAAOC,YAAY,MAAM,2BAA2B;;AAEpD;AACA,OAAO,MAAMC,UAAU,GAAIC,WAAW,IAAK;EAE1C;EACA,MAAMC,KAAK,GAAG,CAAC,CAAC;;EAEhB;EACAH,YAAY,CAACI,OAAO,CAACC,IAAI,IAAI;IAC5BF,KAAK,CAACE,IAAI,CAAC,GAAG,CAAC;EAChB,CAAC,CAAC;;EAEF;EACAC,MAAM,CAACC,OAAO,CAACL,WAAW,CAAC,CAACE,OAAO,CAAC,CAAC,CAACI,aAAa,EAAEC,MAAM,CAAC,KAAK;IAChE,MAAMC,eAAe,GAAGX,UAAU,CAACY,IAAI,CAACC,cAAc,IAAIA,cAAc,CAACC,QAAQ,KAAKL,aAAa,CAAC;IACpG,IAAI,CAACE,eAAe,EAAE,OAAM,CAAC;;IAE7B,MAAMI,YAAY,GAAGJ,eAAe,CAACK,OAAO,CAACJ,IAAI,CAACK,CAAC,IAAIA,CAAC,CAACC,KAAK,KAAKR,MAAM,CAAC;IAC1E,IAAI,CAACK,YAAY,EAAE;IAEnBR,MAAM,CAACC,OAAO,CAACO,YAAY,CAACI,MAAM,CAAC,CAACd,OAAO,CAAC,CAAC,CAACC,IAAI,EAAEa,MAAM,CAAC,KAAK;MAC/Df,KAAK,CAACE,IAAI,CAAC,IAAIa,MAAM;IACtB,CAAC,CAAC;EACH,CAAC,CAAC;EAEFC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEd,MAAM,CAACC,OAAO,CAACJ,KAAK,CAAC,CAAC;EAC3CgB,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEjB,KAAK,CAAC;EAC3B;EACA,MAAMkB,WAAW,GAAGf,MAAM,CAACC,OAAO,CAACJ,KAAK,CAAC,CACxCmB,GAAG,CAAC,CAAC,CAACjB,IAAI,EAAEa,MAAM,CAAC,MAAM;IAAEb,IAAI;IAAEa;EAAO,CAAC,CAAC,CAAC,CAC3CK,IAAI,CAAC,CAACP,CAAC,EAAEQ,CAAC,KAAKA,CAAC,CAACN,MAAM,GAAGF,CAAC,CAACE,MAAM,CAAC;EAElCC,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEC,WAAW,CAAC;EACtC,OAAOA,WAAW;AACrB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}