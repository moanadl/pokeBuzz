{"ast":null,"code":"import questionOptions from'../data/questionOptions.json';import{filterPokemon}from'./filterPokemon';export const findPokemon=props=>{const{finalScore,formAnswers,pokemonAttributes,evolutionsGroups}=props;if(finalScore.length===0||pokemonAttributes.length===0||evolutionsGroups.length===0){return[];}let chosenPokemon=[];const chosenEvolutions=new Set();const forbiddenIDs=new Set([144,145,146,149]);// Articuno, Zapdos, Moltres, Dragonite\nconst colors=questionOptions.colorOptions.map(color=>color.toLowerCase());const primaryColor=formAnswers.color.toLowerCase();const getRandomAltColor=()=>{const altColorOptions=colors.filter(color=>color!==primaryColor);let rdmIndex=Math.floor(Math.random()*altColorOptions.length);return altColorOptions[rdmIndex];};const shuffle=myArray=>{const array=[...myArray];for(let i=array.length-1;i>0;i--){const j=Math.floor(Math.random()*(i+1));[array[i],array[j]]=[array[j],array[i]];};return array;};let scoreIndex=0;while(chosenPokemon.length<6){const targetType=finalScore[scoreIndex].type;let altColor=getRandomAltColor();const candidates=filterPokemon(pokemonAttributes,targetType,primaryColor,altColor);const shuffledCandidates=shuffle(candidates);for(const pokemon of shuffledCandidates){// Doesn't executeif array is empty\nconst{id,name}=pokemon;// Checks for rare Pokémon\nif(forbiddenIDs.has(id))continue;// Checks for repeated Pokémon or Pokémon from the same evolution group\nconst evolutionsIndex=evolutionsGroups.findIndex(evolution=>evolution.first===name||evolution.second===name||evolution.third===name);const evolutionKey=evolutionsIndex!==-1?\"evol-\".concat(evolutionsIndex):\"poke-\".concat(name);if(chosenEvolutions.has(evolutionKey))continue;chosenPokemon.push(pokemon);chosenEvolutions.add(evolutionKey);if(chosenPokemon.length===6)break;}scoreIndex++;}return chosenPokemon;};","map":{"version":3,"names":["questionOptions","filterPokemon","findPokemon","props","finalScore","formAnswers","pokemonAttributes","evolutionsGroups","length","chosenPokemon","chosenEvolutions","Set","forbiddenIDs","colors","colorOptions","map","color","toLowerCase","primaryColor","getRandomAltColor","altColorOptions","filter","rdmIndex","Math","floor","random","shuffle","myArray","array","i","j","scoreIndex","targetType","type","altColor","candidates","shuffledCandidates","pokemon","id","name","has","evolutionsIndex","findIndex","evolution","first","second","third","evolutionKey","concat","push","add"],"sources":["C:/Moana_SSD/WebDev/Projetos/pokebuzz/src/utils/findPokemon.js"],"sourcesContent":["import questionOptions from '../data/questionOptions.json';\r\nimport { filterPokemon } from './filterPokemon';\r\n\r\nexport const findPokemon = (props) => {\r\n\r\n    const { finalScore, formAnswers, pokemonAttributes, evolutionsGroups } = props;\r\n\r\n    if (finalScore.length === 0 || pokemonAttributes.length === 0 || evolutionsGroups.length === 0) {\r\n        return [];\r\n    }\r\n\r\n    let chosenPokemon = [];\r\n    const chosenEvolutions = new Set();\r\n    const forbiddenIDs = new Set([144, 145, 146, 149]); // Articuno, Zapdos, Moltres, Dragonite\r\n    const colors = questionOptions.colorOptions.map(color => color.toLowerCase());\r\n    const primaryColor = formAnswers.color.toLowerCase();\r\n\r\n    const getRandomAltColor = () => {\r\n        const altColorOptions = colors.filter(color => color !== primaryColor);\r\n        let rdmIndex = Math.floor(Math.random() * altColorOptions.length);\r\n        return altColorOptions[rdmIndex];\r\n    }\r\n\r\n    const shuffle = (myArray) => { \r\n        const array = [...myArray];\r\n\r\n        for (let i = array.length - 1; i > 0; i--) { \r\n            const j = Math.floor(Math.random() * (i + 1)); \r\n            [array[i], array[j]] = [array[j], array[i]]; \r\n        };\r\n\r\n        return array; \r\n    }; \r\n    \r\n    let scoreIndex = 0;\r\n\r\n    while (chosenPokemon.length < 6 ) {\r\n\r\n        const targetType = finalScore[scoreIndex].type;\r\n        let altColor = getRandomAltColor();\r\n        \r\n        const candidates = filterPokemon(pokemonAttributes, targetType, primaryColor, altColor);\r\n\r\n        const shuffledCandidates = shuffle(candidates);\r\n\r\n        for (const pokemon of shuffledCandidates) { // Doesn't executeif array is empty\r\n            const { id, name } = pokemon;\r\n\r\n            // Checks for rare Pokémon\r\n            if (forbiddenIDs.has(id)) continue;\r\n\r\n            // Checks for repeated Pokémon or Pokémon from the same evolution group\r\n            const evolutionsIndex = evolutionsGroups.findIndex(\r\n                evolution => evolution.first === name || \r\n                evolution.second === name || \r\n                evolution.third === name\r\n            );\r\n\r\n            const evolutionKey = evolutionsIndex !== -1 ? `evol-${evolutionsIndex}` : `poke-${name}`;\r\n\r\n            if (chosenEvolutions.has(evolutionKey)) continue;\r\n\r\n            chosenPokemon.push(pokemon);\r\n            chosenEvolutions.add(evolutionKey);\r\n            \r\n            if (chosenPokemon.length === 6) break\r\n\r\n        }\r\n        scoreIndex++\r\n    }\r\n\r\n\treturn chosenPokemon;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}