{"ast":null,"code":"var _jsxFileName = \"C:\\\\Moana_SSD\\\\WebDev\\\\Projetos\\\\pokebuzz\\\\src\\\\pages\\\\Home.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { GetAPIData } from \"../services/APIData\";\nimport Form from \"../components/Form\";\nimport PokemonResults from \"../components/PokemonResults\";\nimport './Home.css';\n\n// ---------- Renders the Form and the final results ---------- //\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Home() {\n  _s();\n  // ----- Creating the state for the constants that will be used -----\n  const [APIDataPokemon, setAPIDataPokemon] = useState([]);\n  const [APIDataSpecies, setAPIDataSpecies] = useState([]);\n  const [APIDataEvolutions, setAPIDataEvolutions] = useState([]);\n  const [evolutionsGroups, setEvolutionsGroups] = useState([]);\n  const [pokemonAttributes, setPokemonsAttributes] = useState([]);\n  const [typeHabitatResults, setTypeHabitatResults] = useState([]);\n  const [formAnswers, setFormAnswers] = useState([]);\n\n  // ----- On page load -----\n  useEffect(() => {\n    // ----- Calls the function GetAPIData imported from APIData.jsx to set pokemon, species and evolution data -----\n    const fetchData = async () => {\n      const APIData = await GetAPIData();\n      setAPIDataPokemon(APIData.pokemon[0]);\n      setAPIDataSpecies(APIData.species[0]);\n      setAPIDataEvolutions(APIData.evolutions[0]);\n    };\n    fetchData();\n  }, []);\n\n  // console.log('APIDataPokemon', APIDataPokemon);\n  // console.log('APIDataSpecies', APIDataSpecies);\n  // console.log('APIDataEvolutions', APIDataEvolutions);\n\n  // ----- On APIDataPokemon, APIDataSpecies or APIDataEvolutions update... -----\n  useEffect(() => {\n    // ----- If the data returned alright... -----\n    if (APIDataPokemon.length > 0 && APIDataSpecies.length > 0 && APIDataEvolutions.length > 0) {\n      // ----- Creates an array with information/attributes of all pokemon -----\n      getPokemonAttributes();\n      console.log(pokemonAttributes);\n      // ----- Creates an array grouping all evolutions of an especies -----\n      const pokeEvolutions = APIDataEvolutions.map(groups => {\n        const infoChain = groups.data.chain;\n        return {\n          first: infoChain.species.name ? infoChain.species.name : null,\n          second: infoChain.evolves_to.length > 0 ? infoChain.evolves_to[0].species.name : null,\n          third: infoChain.evolves_to.length > 0 && infoChain.evolves_to[0].evolves_to.length > 0 ? infoChain.evolves_to[0].evolves_to[0].species.name : null\n        };\n      });\n      setEvolutionsGroups(pokeEvolutions);\n      //console.log('group', evolutionsGroups)\n    } else {\n      console.log('No data available yet.');\n    }\n  }, [APIDataPokemon, APIDataSpecies, APIDataEvolutions]);\n\n  // ----- Gathers information on each pokemon and species on one single array -----\n  const getPokemonAttributes = () => {\n    const pokemonInfo = APIDataPokemon.map(data => {\n      const APIDataPokemon = data.data;\n      return {\n        id: APIDataPokemon.id,\n        name: APIDataPokemon.name,\n        height: APIDataPokemon.height,\n        weight: APIDataPokemon.weight,\n        type1: APIDataPokemon.types[0].type.name,\n        type2: APIDataPokemon.types[1] ? APIDataPokemon.types[1].type.name : null,\n        image: APIDataPokemon.sprites.other.dream_world.front_default\n      };\n    });\n    const speciesInfo = APIDataSpecies.map(data => {\n      const APIDataSpecies = data.data;\n      return {\n        color: APIDataSpecies.color.name,\n        habitat: APIDataSpecies.habitat.name\n      };\n    });\n    const attributes = pokemonInfo.map((pokemonItem, index) => {\n      const speciesItem = speciesInfo[index] || {};\n      return {\n        ...pokemonItem,\n        ...speciesItem\n      };\n    });\n    setPokemonsAttributes(attributes);\n  };\n\n  // ----- Sets the form anwsers and the calculated results for type/habitat received from the Form component -----\n  const getFormResults = (typeHabitatResults, formAnswers) => {\n    setTypeHabitatResults(typeHabitatResults);\n    setFormAnswers(formAnswers);\n  };\n\n  // ----- If the form hasn't been submitted, return Form. If it has, return results. -----\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: typeHabitatResults.length > 0 ? /*#__PURE__*/_jsxDEV(PokemonResults, {\n      pokemonResults: typeHabitatResults,\n      pokemonAttributes: pokemonAttributes,\n      evolutions: evolutionsGroups,\n      formAnswers: formAnswers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(Form, {\n      getFormResults: getFormResults\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(Home, \"WNvi23UkhzwaUFt3cjXYAJfJAWM=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["useEffect","useState","GetAPIData","Form","PokemonResults","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","_s","APIDataPokemon","setAPIDataPokemon","APIDataSpecies","setAPIDataSpecies","APIDataEvolutions","setAPIDataEvolutions","evolutionsGroups","setEvolutionsGroups","pokemonAttributes","setPokemonsAttributes","typeHabitatResults","setTypeHabitatResults","formAnswers","setFormAnswers","fetchData","APIData","pokemon","species","evolutions","length","getPokemonAttributes","console","log","pokeEvolutions","map","groups","infoChain","data","chain","first","name","second","evolves_to","third","pokemonInfo","id","height","weight","type1","types","type","type2","image","sprites","other","dream_world","front_default","speciesInfo","color","habitat","attributes","pokemonItem","index","speciesItem","getFormResults","children","pokemonResults","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Moana_SSD/WebDev/Projetos/pokebuzz/src/pages/Home.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { GetAPIData } from \"../services/APIData\";\r\nimport Form from \"../components/Form\";\r\nimport PokemonResults from \"../components/PokemonResults\";\r\nimport './Home.css'\r\n\r\n// ---------- Renders the Form and the final results ---------- //\r\nfunction Home () {    \r\n    \r\n    // ----- Creating the state for the constants that will be used -----\r\n    const [APIDataPokemon, setAPIDataPokemon] = useState([]);\r\n    const [APIDataSpecies, setAPIDataSpecies] = useState([]);\r\n    const [APIDataEvolutions, setAPIDataEvolutions] = useState([]);\r\n    const [evolutionsGroups, setEvolutionsGroups] = useState([]);\r\n    const [pokemonAttributes, setPokemonsAttributes] = useState([]);\r\n    const [typeHabitatResults, setTypeHabitatResults] = useState([]);\r\n    const [formAnswers, setFormAnswers] = useState([]);\r\n    \r\n    // ----- On page load -----\r\n    useEffect(() => {\r\n        // ----- Calls the function GetAPIData imported from APIData.jsx to set pokemon, species and evolution data -----\r\n        const fetchData = async () => {\r\n            const APIData = await GetAPIData();\r\n\r\n            setAPIDataPokemon(APIData.pokemon[0]);\r\n            setAPIDataSpecies(APIData.species[0]);\r\n            setAPIDataEvolutions(APIData.evolutions[0]);\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    // console.log('APIDataPokemon', APIDataPokemon);\r\n    // console.log('APIDataSpecies', APIDataSpecies);\r\n    // console.log('APIDataEvolutions', APIDataEvolutions);\r\n\r\n    // ----- On APIDataPokemon, APIDataSpecies or APIDataEvolutions update... -----\r\n    useEffect(() => {\r\n        // ----- If the data returned alright... -----\r\n        if (APIDataPokemon.length > 0 && APIDataSpecies.length > 0 && APIDataEvolutions.length > 0) {\r\n            // ----- Creates an array with information/attributes of all pokemon -----\r\n            getPokemonAttributes();\r\n            console.log(pokemonAttributes)\r\n            // ----- Creates an array grouping all evolutions of an especies -----\r\n            const pokeEvolutions = APIDataEvolutions.map(groups => {\r\n                const infoChain = groups.data.chain;\r\n                return {\r\n                        first: infoChain.species.name ? infoChain.species.name : null,\r\n                        second: infoChain.evolves_to.length > 0 ? infoChain.evolves_to[0].species.name : null,\r\n                        third: infoChain.evolves_to.length > 0 && infoChain.evolves_to[0].evolves_to.length > 0 ? infoChain.evolves_to[0].evolves_to[0].species.name : null\r\n                    }\r\n                \r\n            })\r\n            setEvolutionsGroups(pokeEvolutions);\r\n            //console.log('group', evolutionsGroups)\r\n        } else {\r\n            console.log('No data available yet.');\r\n        }\r\n    }, [APIDataPokemon, APIDataSpecies, APIDataEvolutions]);\r\n\r\n    // ----- Gathers information on each pokemon and species on one single array -----\r\n    const getPokemonAttributes = () => {\r\n\r\n        const pokemonInfo = APIDataPokemon.map((data) => {\r\n            const APIDataPokemon = data.data;\r\n            return {\r\n                id: APIDataPokemon.id,\r\n                name: APIDataPokemon.name,\r\n                height: APIDataPokemon.height,\r\n                weight: APIDataPokemon.weight,\r\n                type1: APIDataPokemon.types[0].type.name,\r\n                type2: APIDataPokemon.types[1] ? APIDataPokemon.types[1].type.name : null,\r\n                image: APIDataPokemon.sprites.other.dream_world.front_default,\r\n            }\r\n        })\r\n\r\n        const speciesInfo = APIDataSpecies.map(data => {\r\n            const APIDataSpecies = data.data;\r\n            return {\r\n                color: APIDataSpecies.color.name,\r\n                habitat: APIDataSpecies.habitat.name\r\n            }\r\n        })\r\n\r\n        const attributes = pokemonInfo.map((pokemonItem, index) => {\r\n            const speciesItem = speciesInfo[index] || {};\r\n            return {\r\n                ...pokemonItem,\r\n                ...speciesItem,\r\n            }\r\n        })\r\n\r\n        setPokemonsAttributes(attributes);\r\n    }\r\n\r\n    // ----- Sets the form anwsers and the calculated results for type/habitat received from the Form component -----\r\n    const getFormResults = (typeHabitatResults, formAnswers) => {\r\n        setTypeHabitatResults(typeHabitatResults);\r\n        setFormAnswers(formAnswers)\r\n    }\r\n\r\n    // ----- If the form hasn't been submitted, return Form. If it has, return results. -----\r\n\treturn (\r\n        <> \r\n        {typeHabitatResults.length > 0 ? \r\n            <PokemonResults \r\n                pokemonResults={typeHabitatResults} \r\n                pokemonAttributes={pokemonAttributes} \r\n                evolutions={evolutionsGroups} \r\n                formAnswers={formAnswers} \r\n            /> \r\n                :\r\n            <Form \r\n                getFormResults={getFormResults} \r\n            />\r\n        }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,UAAU,QAAQ,qBAAqB;AAChD,OAAOC,IAAI,MAAM,oBAAoB;AACrC,OAAOC,cAAc,MAAM,8BAA8B;AACzD,OAAO,YAAY;;AAEnB;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACA,SAASC,IAAIA,CAAA,EAAI;EAAAC,EAAA;EAEb;EACA,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACY,cAAc,EAAEC,iBAAiB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACc,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM,CAACgB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAM,CAACkB,iBAAiB,EAAEC,qBAAqB,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAC/D,MAAM,CAACoB,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EAChE,MAAM,CAACsB,WAAW,EAAEC,cAAc,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;;EAElD;EACAD,SAAS,CAAC,MAAM;IACZ;IACA,MAAMyB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,MAAMC,OAAO,GAAG,MAAMxB,UAAU,CAAC,CAAC;MAElCU,iBAAiB,CAACc,OAAO,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC;MACrCb,iBAAiB,CAACY,OAAO,CAACE,OAAO,CAAC,CAAC,CAAC,CAAC;MACrCZ,oBAAoB,CAACU,OAAO,CAACG,UAAU,CAAC,CAAC,CAAC,CAAC;IAC/C,CAAC;IAEDJ,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;EACA;;EAEA;EACAzB,SAAS,CAAC,MAAM;IACZ;IACA,IAAIW,cAAc,CAACmB,MAAM,GAAG,CAAC,IAAIjB,cAAc,CAACiB,MAAM,GAAG,CAAC,IAAIf,iBAAiB,CAACe,MAAM,GAAG,CAAC,EAAE;MACxF;MACAC,oBAAoB,CAAC,CAAC;MACtBC,OAAO,CAACC,GAAG,CAACd,iBAAiB,CAAC;MAC9B;MACA,MAAMe,cAAc,GAAGnB,iBAAiB,CAACoB,GAAG,CAACC,MAAM,IAAI;QACnD,MAAMC,SAAS,GAAGD,MAAM,CAACE,IAAI,CAACC,KAAK;QACnC,OAAO;UACCC,KAAK,EAAEH,SAAS,CAACT,OAAO,CAACa,IAAI,GAAGJ,SAAS,CAACT,OAAO,CAACa,IAAI,GAAG,IAAI;UAC7DC,MAAM,EAAEL,SAAS,CAACM,UAAU,CAACb,MAAM,GAAG,CAAC,GAAGO,SAAS,CAACM,UAAU,CAAC,CAAC,CAAC,CAACf,OAAO,CAACa,IAAI,GAAG,IAAI;UACrFG,KAAK,EAAEP,SAAS,CAACM,UAAU,CAACb,MAAM,GAAG,CAAC,IAAIO,SAAS,CAACM,UAAU,CAAC,CAAC,CAAC,CAACA,UAAU,CAACb,MAAM,GAAG,CAAC,GAAGO,SAAS,CAACM,UAAU,CAAC,CAAC,CAAC,CAACA,UAAU,CAAC,CAAC,CAAC,CAACf,OAAO,CAACa,IAAI,GAAG;QACnJ,CAAC;MAET,CAAC,CAAC;MACFvB,mBAAmB,CAACgB,cAAc,CAAC;MACnC;IACJ,CAAC,MAAM;MACHF,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;IACzC;EACJ,CAAC,EAAE,CAACtB,cAAc,EAAEE,cAAc,EAAEE,iBAAiB,CAAC,CAAC;;EAEvD;EACA,MAAMgB,oBAAoB,GAAGA,CAAA,KAAM;IAE/B,MAAMc,WAAW,GAAGlC,cAAc,CAACwB,GAAG,CAAEG,IAAI,IAAK;MAC7C,MAAM3B,cAAc,GAAG2B,IAAI,CAACA,IAAI;MAChC,OAAO;QACHQ,EAAE,EAAEnC,cAAc,CAACmC,EAAE;QACrBL,IAAI,EAAE9B,cAAc,CAAC8B,IAAI;QACzBM,MAAM,EAAEpC,cAAc,CAACoC,MAAM;QAC7BC,MAAM,EAAErC,cAAc,CAACqC,MAAM;QAC7BC,KAAK,EAAEtC,cAAc,CAACuC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAACV,IAAI;QACxCW,KAAK,EAAEzC,cAAc,CAACuC,KAAK,CAAC,CAAC,CAAC,GAAGvC,cAAc,CAACuC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAACV,IAAI,GAAG,IAAI;QACzEY,KAAK,EAAE1C,cAAc,CAAC2C,OAAO,CAACC,KAAK,CAACC,WAAW,CAACC;MACpD,CAAC;IACL,CAAC,CAAC;IAEF,MAAMC,WAAW,GAAG7C,cAAc,CAACsB,GAAG,CAACG,IAAI,IAAI;MAC3C,MAAMzB,cAAc,GAAGyB,IAAI,CAACA,IAAI;MAChC,OAAO;QACHqB,KAAK,EAAE9C,cAAc,CAAC8C,KAAK,CAAClB,IAAI;QAChCmB,OAAO,EAAE/C,cAAc,CAAC+C,OAAO,CAACnB;MACpC,CAAC;IACL,CAAC,CAAC;IAEF,MAAMoB,UAAU,GAAGhB,WAAW,CAACV,GAAG,CAAC,CAAC2B,WAAW,EAAEC,KAAK,KAAK;MACvD,MAAMC,WAAW,GAAGN,WAAW,CAACK,KAAK,CAAC,IAAI,CAAC,CAAC;MAC5C,OAAO;QACH,GAAGD,WAAW;QACd,GAAGE;MACP,CAAC;IACL,CAAC,CAAC;IAEF5C,qBAAqB,CAACyC,UAAU,CAAC;EACrC,CAAC;;EAED;EACA,MAAMI,cAAc,GAAGA,CAAC5C,kBAAkB,EAAEE,WAAW,KAAK;IACxDD,qBAAqB,CAACD,kBAAkB,CAAC;IACzCG,cAAc,CAACD,WAAW,CAAC;EAC/B,CAAC;;EAED;EACH,oBACOjB,OAAA,CAAAE,SAAA;IAAA0D,QAAA,EACC7C,kBAAkB,CAACS,MAAM,GAAG,CAAC,gBAC1BxB,OAAA,CAACF,cAAc;MACX+D,cAAc,EAAE9C,kBAAmB;MACnCF,iBAAiB,EAAEA,iBAAkB;MACrCU,UAAU,EAAEZ,gBAAiB;MAC7BM,WAAW,EAAEA;IAAY;MAAA6C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CAAC,gBAEFjE,OAAA,CAACH,IAAI;MACD8D,cAAc,EAAEA;IAAe;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC;EAAC,gBAEJ,CAAC;AAEX;AAAC7D,EAAA,CA/GQD,IAAI;AAAA+D,EAAA,GAAJ/D,IAAI;AAiHb,eAAeA,IAAI;AAAC,IAAA+D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}