{"ast":null,"code":"var _jsxFileName = \"C:\\\\Moana_SSD\\\\WebDev\\\\Projetos\\\\pokebuzz\\\\src\\\\components\\\\Form\\\\index.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { getResults } from \"../../services/results\";\nimport Question from \"../Question\";\nimport './Form.css';\n\n// ---------- Renders the Form ---------- //\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Form(props) {\n  _s();\n  const questionsContent = ['Choose a color', 'Choose a transportation', 'Choose a setting', 'Choose a natural phenomenon', 'Choose something to do', 'Choose a place to chill', 'Choose a Taylor Swift album'];\n  const questionsKeys = ['colorChoice', 'transportationChoice', 'settingChoice', 'phenomenonChoice', 'activityChoice', 'chillChoice', 'taylorChoice'];\n\n  // ----- Creating the state for the user's answers -----\n  const [formAnswers, setFormAnswers] = useState({\n    color: '',\n    transportation: '',\n    setting: '',\n    naturalPhenomenon: '',\n    activity: '',\n    placeToChill: '',\n    taylorAlbum: ''\n  });\n\n  // ----- Gets the value of each radio button from the component Question to set the formAnswers -----\n  const getFormAnswers = (color, transportation, setting, naturalPhenomenon, activity, placeToChill, taylorAlbum) => {\n    setFormAnswers(prevData => ({\n      ...prevData,\n      color: color ? color : prevData.color,\n      transportation: transportation ? transportation : prevData.transportation,\n      setting: setting ? setting : prevData.setting,\n      naturalPhenomenon: naturalPhenomenon ? naturalPhenomenon : prevData.naturalPhenomenon,\n      activity: activity ? activity : prevData.activity,\n      placeToChill: placeToChill ? placeToChill : prevData.placeToChill,\n      taylorAlbum: taylorAlbum ? taylorAlbum : prevData.taylorAlbum\n    }));\n  };\n\n  // ----- On form submission -----\n  const sendFormAnswers = e => {\n    e.preventDefault();\n    // ----- Calls the imported function getResults to calculate the results of the quiz for type/habitat -----\n    const finalScore = getResults(formAnswers);\n    // ----- Calls the prop function getFormResults with the calculated result for type/habitat and the form answers -----\n    props.getFormResults(finalScore, formAnswers);\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Find out your six\", /*#__PURE__*/_jsxDEV(\"img\", {\n        height: \"200px\",\n        src: \"images/logo-pokemon.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendFormAnswers,\n      children: [questionsContent.map((questionContent, index) => /*#__PURE__*/_jsxDEV(Question, {\n        label: `${questionContent}:`,\n        index: index,\n        getFormAnswers: getFormAnswers\n      }, questionsKeys[index], false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 6\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Catch 'em!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 3\n  }, this);\n}\n_s(Form, \"GNmqQTLb4VpwJDgTJOzdqMCadU8=\");\n_c = Form;\nexport default Form;\nvar _c;\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["useState","getResults","Question","jsxDEV","_jsxDEV","Form","props","_s","questionsContent","questionsKeys","formAnswers","setFormAnswers","color","transportation","setting","naturalPhenomenon","activity","placeToChill","taylorAlbum","getFormAnswers","prevData","sendFormAnswers","e","preventDefault","finalScore","getFormResults","children","height","src","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","map","questionContent","index","label","_c","$RefreshReg$"],"sources":["C:/Moana_SSD/WebDev/Projetos/pokebuzz/src/components/Form/index.jsx"],"sourcesContent":["import {useState } from \"react\";\r\nimport { getResults } from \"../../services/results\";\r\nimport Question from \"../Question\";\r\nimport './Form.css'\r\n\r\n// ---------- Renders the Form ---------- //\r\nfunction Form (props) {\r\n\r\n\tconst questionsContent = ['Choose a color', 'Choose a transportation', 'Choose a setting', 'Choose a natural phenomenon', 'Choose something to do', 'Choose a place to chill', 'Choose a Taylor Swift album'];\r\n\tconst questionsKeys = ['colorChoice', 'transportationChoice', 'settingChoice', 'phenomenonChoice', 'activityChoice', 'chillChoice', 'taylorChoice'];\r\n\r\n\t// ----- Creating the state for the user's answers -----\r\n\tconst [formAnswers, setFormAnswers] = useState({\r\n\t    color: '',\r\n\t    transportation: '',\r\n\t    setting: '',\r\n\t    naturalPhenomenon: '',\r\n\t    activity: '',\r\n\t    placeToChill: '',\r\n\t    taylorAlbum: ''\r\n\t});\r\n\r\n\t// ----- Gets the value of each radio button from the component Question to set the formAnswers -----\r\n\tconst getFormAnswers = (color, transportation, setting, naturalPhenomenon, activity, placeToChill, taylorAlbum) => {\r\n\t\t        \r\n        setFormAnswers((prevData) => ({\r\n            ...prevData,\r\n            color: color ? color : prevData.color,\r\n            transportation: transportation ? transportation : prevData.transportation,\r\n            setting: setting ? setting : prevData.setting,\r\n            naturalPhenomenon: naturalPhenomenon ? naturalPhenomenon : prevData.naturalPhenomenon,\r\n            activity: activity ? activity : prevData.activity,\r\n            placeToChill: placeToChill ? placeToChill : prevData.placeToChill,\r\n            taylorAlbum: taylorAlbum ? taylorAlbum : prevData.taylorAlbum\r\n        }));\r\n\t\t\r\n\t}\r\n\r\n\t// ----- On form submission -----\r\n\tconst sendFormAnswers = (e) => {\r\n\t\te.preventDefault();\r\n\t\t// ----- Calls the imported function getResults to calculate the results of the quiz for type/habitat -----\r\n\t\tconst finalScore = getResults(formAnswers);\r\n\t\t// ----- Calls the prop function getFormResults with the calculated result for type/habitat and the form answers -----\r\n\t\tprops.getFormResults(finalScore, formAnswers);\r\n\t}\r\n    \r\n\treturn (\r\n\t\t<section>\r\n\t\t\t<h1>Find out your six\r\n                <img height=\"200px\" src=\"images/logo-pokemon.png\" />\r\n            </h1>\r\n\t\t\t<form onSubmit={sendFormAnswers}>\r\n\t\t\t\t{questionsContent.map((questionContent, index) => \r\n\t\t\t\t\t<Question \r\n\t\t\t\t\t\tkey={questionsKeys[index]} \r\n\t\t\t\t\t\tlabel={`${questionContent}:`} \r\n\t\t\t\t\t\tindex={index}\r\n\t\t\t\t\t\tgetFormAnswers={getFormAnswers}/> \r\n\t\t\t\t)}\r\n\r\n\t\t\t\t<button>Catch 'em!</button>\r\n\t\t\t</form>\r\n\t\t</section>\r\n\t)\r\n}\r\n\r\nexport default Form;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}