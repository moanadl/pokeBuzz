{"ast":null,"code":"var _jsxFileName = \"C:\\\\Moana_SSD\\\\WebDev\\\\Projetos\\\\pokebuzz\\\\src\\\\components\\\\Question\\\\index.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport Option from \"../Option\";\n\n// ---------- Renders each question of the Form ---------- //\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Question({\n  label,\n  index,\n  getFormAnswers\n}) {\n  _s();\n  const options = {\n    colorOptions: ['Black', 'Blue', 'Brown', 'Gray', 'Green', 'Pink', 'Purple', 'Red', 'Yellow', 'White'],\n    transportationOptions: ['Car', 'Airplane', 'Ship', 'Train', 'By foot'],\n    settingOptions: ['Countryside', 'Beach', 'Mountain', 'City', 'Cave'],\n    naturalPhenomenonOptions: ['Volcano', 'Earthquake', 'Tsunami', 'Hurricane', 'Storm', 'Sand storm', 'Blizzard'],\n    activityOptions: ['Pool party', 'Work out', 'Circus', 'Camping', 'Stay in and chill', 'Rally', 'Hiking'],\n    chillOptions: ['Gym', 'Cemetery', 'Mall', 'Pool', 'Library', 'Park', 'Sauna'],\n    taylorOptions: ['Debut', 'Fearless TV', 'Speak Now TV', 'Red TV', '1989 TV', 'Reputation', 'Lover', 'Folklore', 'Evermore', 'Midnights', 'The Tortured Poets Department']\n  };\n  const [answer, setAnswer] = useState('');\n  const optionKey = Object.keys(options)[index];\n  const questionNameMap = {\n    colorOptions: 'color',\n    transportationOptions: 'transportantion',\n    settingOptions: 'setting',\n    naturalPhenomenonOptions: 'naturalPhenomenon',\n    activityOptions: 'activity',\n    chillOptions: 'placeToChill',\n    taylorOptions: 'taylorAlbum'\n  };\n  console.log(optionKey);\n  const questionName = questionNameMap[optionKey];\n  const handleChange = e => {\n    const {\n      value\n    } = e.target;\n    setAnswer(value);\n    getFormAnswers({\n      [questionName]: value\n    });\n  };\n  console.log(answer);\n\n  // ----- Creating the state for the constants that will be used to set each question -----\n  // const [color, setColor] = useState('');\n  // const [transportation, setTransportation] = useState('');\n  // const [setting, setSetting] = useState('');\n  // const [naturalPhenomenon, setNaturalPhenomenon] = useState('');\n  // const [activity, setActivity] = useState('');\n  // const [placeToChill, setPlaceToChill] = useState('');\n  // const [taylorAlbum, setTaylorAlbum] = useState('');\n\n  // ----- Gets the value of each radio button on the Option component for each question -----\n  // const getSelectionValue = (e) => {\n  //     const {name, value} = e.target;\n\n  // \tif (name === 'colorOptions') {\n  // \t\tsetColor(value)\n  // \t} else if (name === 'transportationOptions') {\n  // \t\tsetTransportation(value);\n  // \t} else if (name === 'settingOptions') {\n  // \t\tsetSetting(value);\n  // \t} else if (name === 'naturalPhenomenonOptions') {\n  // \t\tsetNaturalPhenomenon(value);\n  // \t} else if (name === 'activityOptions') {\n  // \t\tsetActivity(value);\n  // \t} else if (name === 'chillOptions') {\n  // \t\tsetPlaceToChill(value);\n  // \t} else if (name === 'taylorOptions') {\n  // \t\tsetTaylorAlbum(value);\n  // \t}\n\n  // }\n\n  // // ----- On any selected radio button uptade -----\n  // useEffect(() => {\n  //     // ----- Calls the prop function getFormData with the value on the radio button selected for each question -----\n  //     getFormAnswers(color, transportation, setting, naturalPhenomenon, activity, placeToChill, taylorAlbum)\n  // }, [color, transportation, setting, naturalPhenomenon, activity, placeToChill, taylorAlbum]\n  // );\n\n  return /*#__PURE__*/_jsxDEV(\"fieldset\", {\n    children: /*#__PURE__*/_jsxDEV(\"legend\", {\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 13\n  }, this);\n}\n_s(Question, \"epwReYWmqQUcEJwlNWWu20QHlN0=\");\n_c = Question;\nexport default Question;\n\n// Tentar colocar todas as respostas em um objeto ao invés de estados individuais. Fazer tipo foi feito no Form, mas fazer direto aqui, sem precisar mandar tanta variável para o Form.\n// Encurtar caminhos, otimizar processos, reduzir código. KISS.\nvar _c;\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"names":["useState","useEffect","Option","jsxDEV","_jsxDEV","Question","label","index","getFormAnswers","_s","options","colorOptions","transportationOptions","settingOptions","naturalPhenomenonOptions","activityOptions","chillOptions","taylorOptions","answer","setAnswer","optionKey","Object","keys","questionNameMap","console","log","questionName","handleChange","e","value","target","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Moana_SSD/WebDev/Projetos/pokebuzz/src/components/Question/index.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport Option from \"../Option\";\r\n\r\n// ---------- Renders each question of the Form ---------- //\r\nfunction Question ({ label, index, getFormAnswers }) {\r\n\r\n    const options = {\r\n        colorOptions: ['Black', 'Blue', 'Brown', 'Gray', 'Green', 'Pink', 'Purple', 'Red', 'Yellow', 'White'],\r\n        transportationOptions: ['Car', 'Airplane', 'Ship', 'Train', 'By foot'],\r\n        settingOptions: ['Countryside', 'Beach', 'Mountain', 'City', 'Cave'],\r\n        naturalPhenomenonOptions: ['Volcano', 'Earthquake', 'Tsunami', 'Hurricane', 'Storm', 'Sand storm', 'Blizzard'],\r\n        activityOptions: ['Pool party', 'Work out', 'Circus', 'Camping', 'Stay in and chill', 'Rally', 'Hiking'],\r\n        chillOptions: ['Gym', 'Cemetery', 'Mall', 'Pool', 'Library', 'Park', 'Sauna'],\r\n        taylorOptions: ['Debut', 'Fearless TV', 'Speak Now TV', 'Red TV', '1989 TV', 'Reputation', 'Lover', 'Folklore', 'Evermore', 'Midnights', 'The Tortured Poets Department']\r\n    };\r\n\r\n    const [answer, setAnswer] = useState('');\r\n    const optionKey = Object.keys(options)[index];\r\n\r\n    const questionNameMap = {\r\n        colorOptions: 'color',\r\n        transportationOptions: 'transportantion',\r\n        settingOptions: 'setting',\r\n        naturalPhenomenonOptions: 'naturalPhenomenon',\r\n        activityOptions: 'activity',\r\n        chillOptions: 'placeToChill',\r\n        taylorOptions: 'taylorAlbum'\r\n    };\r\n    console.log(optionKey)\r\n\r\n    const questionName = questionNameMap[optionKey];\r\n\r\n    const handleChange = e => {\r\n        const { value } = e.target;\r\n        setAnswer(value);\r\n        getFormAnswers({ [questionName]: value });\r\n    }\r\n\r\n    console.log(answer);\r\n\r\n    // ----- Creating the state for the constants that will be used to set each question -----\r\n    // const [color, setColor] = useState('');\r\n\t// const [transportation, setTransportation] = useState('');\r\n\t// const [setting, setSetting] = useState('');\r\n\t// const [naturalPhenomenon, setNaturalPhenomenon] = useState('');\r\n\t// const [activity, setActivity] = useState('');\r\n\t// const [placeToChill, setPlaceToChill] = useState('');\r\n\t// const [taylorAlbum, setTaylorAlbum] = useState('');\r\n\r\n    // ----- Gets the value of each radio button on the Option component for each question -----\r\n\t// const getSelectionValue = (e) => {\r\n    //     const {name, value} = e.target;\r\n\r\n\t// \tif (name === 'colorOptions') {\r\n\t// \t\tsetColor(value)\r\n\t// \t} else if (name === 'transportationOptions') {\r\n\t// \t\tsetTransportation(value);\r\n\t// \t} else if (name === 'settingOptions') {\r\n\t// \t\tsetSetting(value);\r\n\t// \t} else if (name === 'naturalPhenomenonOptions') {\r\n\t// \t\tsetNaturalPhenomenon(value);\r\n\t// \t} else if (name === 'activityOptions') {\r\n\t// \t\tsetActivity(value);\r\n\t// \t} else if (name === 'chillOptions') {\r\n\t// \t\tsetPlaceToChill(value);\r\n\t// \t} else if (name === 'taylorOptions') {\r\n\t// \t\tsetTaylorAlbum(value);\r\n\t// \t}\r\n    \r\n\t// }\r\n\r\n    // // ----- On any selected radio button uptade -----\r\n    // useEffect(() => {\r\n    //     // ----- Calls the prop function getFormData with the value on the radio button selected for each question -----\r\n    //     getFormAnswers(color, transportation, setting, naturalPhenomenon, activity, placeToChill, taylorAlbum)\r\n    // }, [color, transportation, setting, naturalPhenomenon, activity, placeToChill, taylorAlbum]\r\n    // );\r\n\r\n\treturn (\r\n            <fieldset>\r\n                <legend>{label}</legend>\r\n                {/* {Object.values(options)[index].map(option => \r\n                    <Option \r\n                        key={`option-${option.toLowerCase().replace(/\\s/g, '')}`} \r\n                        id={`option-${option.toLowerCase().replace(/\\s/g, '')}`} \r\n                        name={Object.keys(options)[index]} \r\n                        value={option.toLowerCase().replace(/\\s/g, '')} \r\n                        content={option} \r\n                        getData={getSelectionValue} />\r\n                )} */}\r\n            </fieldset>\r\n\t)\r\n}\r\n\r\nexport default Question;\r\n\r\n// Tentar colocar todas as respostas em um objeto ao invés de estados individuais. Fazer tipo foi feito no Form, mas fazer direto aqui, sem precisar mandar tanta variável para o Form.\r\n// Encurtar caminhos, otimizar processos, reduzir código. KISS.\r\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,MAAM,MAAM,WAAW;;AAE9B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,QAAQA,CAAE;EAAEC,KAAK;EAAEC,KAAK;EAAEC;AAAe,CAAC,EAAE;EAAAC,EAAA;EAEjD,MAAMC,OAAO,GAAG;IACZC,YAAY,EAAE,CAAC,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,CAAC;IACrGC,qBAAqB,EAAE,CAAC,KAAK,EAAE,UAAU,EAAE,MAAM,EAAE,OAAO,EAAE,SAAS,CAAC;IACtEC,cAAc,EAAE,CAAC,aAAa,EAAE,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,CAAC;IACpEC,wBAAwB,EAAE,CAAC,SAAS,EAAE,YAAY,EAAE,SAAS,EAAE,WAAW,EAAE,OAAO,EAAE,YAAY,EAAE,UAAU,CAAC;IAC9GC,eAAe,EAAE,CAAC,YAAY,EAAE,UAAU,EAAE,QAAQ,EAAE,SAAS,EAAE,mBAAmB,EAAE,OAAO,EAAE,QAAQ,CAAC;IACxGC,YAAY,EAAE,CAAC,KAAK,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,OAAO,CAAC;IAC7EC,aAAa,EAAE,CAAC,OAAO,EAAE,aAAa,EAAE,cAAc,EAAE,QAAQ,EAAE,SAAS,EAAE,YAAY,EAAE,OAAO,EAAE,UAAU,EAAE,UAAU,EAAE,WAAW,EAAE,+BAA+B;EAC5K,CAAC;EAED,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAMoB,SAAS,GAAGC,MAAM,CAACC,IAAI,CAACZ,OAAO,CAAC,CAACH,KAAK,CAAC;EAE7C,MAAMgB,eAAe,GAAG;IACpBZ,YAAY,EAAE,OAAO;IACrBC,qBAAqB,EAAE,iBAAiB;IACxCC,cAAc,EAAE,SAAS;IACzBC,wBAAwB,EAAE,mBAAmB;IAC7CC,eAAe,EAAE,UAAU;IAC3BC,YAAY,EAAE,cAAc;IAC5BC,aAAa,EAAE;EACnB,CAAC;EACDO,OAAO,CAACC,GAAG,CAACL,SAAS,CAAC;EAEtB,MAAMM,YAAY,GAAGH,eAAe,CAACH,SAAS,CAAC;EAE/C,MAAMO,YAAY,GAAGC,CAAC,IAAI;IACtB,MAAM;MAAEC;IAAM,CAAC,GAAGD,CAAC,CAACE,MAAM;IAC1BX,SAAS,CAACU,KAAK,CAAC;IAChBrB,cAAc,CAAC;MAAE,CAACkB,YAAY,GAAGG;IAAM,CAAC,CAAC;EAC7C,CAAC;EAEDL,OAAO,CAACC,GAAG,CAACP,MAAM,CAAC;;EAEnB;EACA;EACH;EACA;EACA;EACA;EACA;EACA;;EAEG;EACH;EACG;;EAEH;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEG;EACA;EACA;EACA;EACA;EACA;;EAEH,oBACWd,OAAA;IAAA2B,QAAA,eACI3B,OAAA;MAAA2B,QAAA,EAASzB;IAAK;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAUlB,CAAC;AAEvB;AAAC1B,EAAA,CAxFQJ,QAAQ;AAAA+B,EAAA,GAAR/B,QAAQ;AA0FjB,eAAeA,QAAQ;;AAEvB;AACA;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}