{"ast":null,"code":"var _jsxFileName = \"C:\\\\Moana_SSD\\\\WebDev\\\\Projetos\\\\pokebuzz\\\\src\\\\pages\\\\Home.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { GetAPIData } from \"../services/APIData\";\nimport Form from \"../components/Form\";\nimport PokemonResults from \"../components/PokemonResults\";\nimport './Home.css';\n\n// ---------- Renders the Form and the final results ---------- //\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Home() {\n  _s();\n  // ----- Creating the state for the constants that will be used -----\n  const [APIDataPokemon, setAPIDataPokemon] = useState([]);\n  const [APIDataSpecies, setAPIDataSpecies] = useState([]);\n  const [APIDataEvolutions, setAPIDataEvolutions] = useState([]);\n  const [evolutionsGroups, setEvolutionsGroups] = useState([]);\n  const [pokemonAttributes, setPokemonAttributes] = useState([]);\n  const [finalScore, setfinalScore] = useState([]);\n  const [formAnswers, setFormAnswers] = useState([]);\n\n  // ----- On page load -----\n  useEffect(() => {\n    // ----- Calls the function GetAPIData imported from APIData.jsx to set pokemon, species and evolution data -----\n    const fetchData = async () => {\n      await GetAPIData().then(data => {\n        console.log('dataPokemon', data.pokemon);\n        setAPIDataPokemon(data.pokemon);\n        setAPIDataSpecies(data.species);\n        setAPIDataEvolutions(data.evolutions);\n\n        // console.log(APIDataPokemon);\n      });\n    };\n    fetchData();\n  }, []);\n\n  // const fetchData = async () => {\n  //     // const APIData = await GetAPIData().then(data => {\n  //     await GetAPIData().then(data => {\n  //         setAPIDataPokemon(data.pokemon[0]);\n  //         setAPIDataSpecies(data.species[0]);\n  //         setAPIDataEvolutions(data.evolutions[0]);\n  //         // getPokemonAttributes();\n  //     })\n  //     return APIDataPokemon;\n  // };\n\n  // ----- On APIDataPokemon, APIDataSpecies or APIDataEvolutions update... -----\n  useEffect(() => {\n    // ----- If the data returned alright... -----\n    if (APIDataPokemon && APIDataSpecies && APIDataEvolutions) {\n      // ----- Creates an array with information/attributes of all pokemon -----\n      getPokemonAttributes();\n\n      // ----- Creates an array grouping all evolutions of an especies -----\n      const evolutions = APIDataEvolutions.map(groups => {\n        return {\n          first: groups.data.chain.species.name ? groups.data.chain.species.name : null,\n          second: groups.data.chain.evolves_to.length > 0 ? groups.data.chain.evolves_to[0].species.name : null,\n          third: groups.data.chain.evolves_to.length > 0 && groups.data.chain.evolves_to[0].evolves_to.length > 0 ? groups.data.chain.evolves_to[0].evolves_to[0].species.name : null\n        };\n      });\n      setEvolutionsGroups(evolutions);\n    } else {\n      console.log('No data available yet.');\n    }\n  }, [APIDataPokemon, APIDataSpecies, APIDataEvolutions]);\n\n  // ----- Gathers information on each pokemon and species on one single array -----\n  const getPokemonAttributes = () => {\n    console.log('Entrou em atributos');\n    const dataExtractionPokemon = APIDataPokemon.map(data => {\n      return {\n        id: data.data.id,\n        name: data.data.name,\n        height: data.data.height,\n        weight: data.data.weight,\n        type1: data.data.types[0].type.name,\n        type2: data.data.types[1] ? data.data.types[1].type.name : null,\n        image: data.data.sprites.other.dream_world.front_default\n      };\n    });\n    const dataExtractionSpecies = APIDataSpecies.map(data => {\n      return {\n        color: data.data.color.name,\n        habitat: data.data.habitat.name\n      };\n    });\n    const attributesAll = dataExtractionPokemon.map((pokemonInfo, index) => {\n      const speciesInfo = dataExtractionSpecies[index] || {};\n      return {\n        ...pokemonInfo,\n        ...speciesInfo\n      };\n    });\n    setPokemonAttributes(attributesAll);\n  };\n\n  // ----- Sets the form anwsers and the calculated results for type/habitat received from the Form component -----\n  const getFormResults = async (finalScore, formAnswers) => {\n    setfinalScore(finalScore);\n    setFormAnswers(formAnswers);\n  };\n\n  // ----- If the form hasn't been submitted, return Form. If it has, return results. -----\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: finalScore == 'batata' ? /*#__PURE__*/_jsxDEV(PokemonResults, {\n      finalScore: finalScore,\n      pokemonAttributes: pokemonAttributes,\n      evolutionsGroups: evolutionsGroups,\n      formAnswers: formAnswers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(Form, {\n      getFormResults: getFormResults\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(Home, \"VA1Rhh2WfpQqmnhKrk6Bw9IB1fA=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["useEffect","useState","GetAPIData","Form","PokemonResults","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","_s","APIDataPokemon","setAPIDataPokemon","APIDataSpecies","setAPIDataSpecies","APIDataEvolutions","setAPIDataEvolutions","evolutionsGroups","setEvolutionsGroups","pokemonAttributes","setPokemonAttributes","finalScore","setfinalScore","formAnswers","setFormAnswers","fetchData","then","data","console","log","pokemon","species","evolutions","getPokemonAttributes","map","groups","first","chain","name","second","evolves_to","length","third","dataExtractionPokemon","id","height","weight","type1","types","type","type2","image","sprites","other","dream_world","front_default","dataExtractionSpecies","color","habitat","attributesAll","pokemonInfo","index","speciesInfo","getFormResults","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Moana_SSD/WebDev/Projetos/pokebuzz/src/pages/Home.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { GetAPIData } from \"../services/APIData\";\r\nimport Form from \"../components/Form\";\r\nimport PokemonResults from \"../components/PokemonResults\";\r\nimport './Home.css'\r\n\r\n// ---------- Renders the Form and the final results ---------- //\r\nfunction Home () {    \r\n    \r\n    // ----- Creating the state for the constants that will be used -----\r\n    const [APIDataPokemon, setAPIDataPokemon] = useState([]);\r\n    const [APIDataSpecies, setAPIDataSpecies] = useState([]);\r\n    const [APIDataEvolutions, setAPIDataEvolutions] = useState([]);\r\n    const [evolutionsGroups, setEvolutionsGroups] = useState([]);\r\n    const [pokemonAttributes, setPokemonAttributes] = useState([]);\r\n    const [finalScore, setfinalScore] = useState([]);\r\n    const [formAnswers, setFormAnswers] = useState([]);\r\n    \r\n    // ----- On page load -----\r\n    useEffect(() => {\r\n        // ----- Calls the function GetAPIData imported from APIData.jsx to set pokemon, species and evolution data -----\r\n        const fetchData = async () => {\r\n           await GetAPIData().then(data => {\r\n            console.log('dataPokemon', data.pokemon)\r\n            setAPIDataPokemon(data.pokemon);\r\n            setAPIDataSpecies(data.species);\r\n            setAPIDataEvolutions(data.evolutions);\r\n\r\n            // console.log(APIDataPokemon);\r\n        })\r\n    };\r\n\r\n            fetchData();\r\n\r\n    }, []);\r\n\r\n    // const fetchData = async () => {\r\n    //     // const APIData = await GetAPIData().then(data => {\r\n    //     await GetAPIData().then(data => {\r\n    //         setAPIDataPokemon(data.pokemon[0]);\r\n    //         setAPIDataSpecies(data.species[0]);\r\n    //         setAPIDataEvolutions(data.evolutions[0]);\r\n    //         // getPokemonAttributes();\r\n    //     })\r\n    //     return APIDataPokemon;\r\n    // };\r\n\r\n\r\n    // ----- On APIDataPokemon, APIDataSpecies or APIDataEvolutions update... -----\r\n    useEffect(() => {\r\n        // ----- If the data returned alright... -----\r\n        if (APIDataPokemon && APIDataSpecies && APIDataEvolutions) {\r\n            // ----- Creates an array with information/attributes of all pokemon -----\r\n            getPokemonAttributes();\r\n\r\n            // ----- Creates an array grouping all evolutions of an especies -----\r\n            const evolutions = APIDataEvolutions.map(groups => {\r\n                return {\r\n                        first: groups.data.chain.species.name ? groups.data.chain.species.name : null,\r\n                        second: groups.data.chain.evolves_to.length > 0 ? groups.data.chain.evolves_to[0].species.name : null,\r\n                        third: groups.data.chain.evolves_to.length > 0 && groups.data.chain.evolves_to[0].evolves_to.length > 0 ? groups.data.chain.evolves_to[0].evolves_to[0].species.name : null\r\n                    }\r\n                \r\n            })\r\n            setEvolutionsGroups(evolutions);\r\n            \r\n        } else {\r\n            console.log('No data available yet.');\r\n        }\r\n    }, [APIDataPokemon, APIDataSpecies, APIDataEvolutions]);\r\n\r\n    // ----- Gathers information on each pokemon and species on one single array -----\r\n    const getPokemonAttributes = () => {\r\n        console.log('Entrou em atributos')\r\n\r\n        const dataExtractionPokemon = APIDataPokemon.map((data) => {\r\n            return {\r\n                id: data.data.id,\r\n                name: data.data.name,\r\n                height: data.data.height,\r\n                weight: data.data.weight,\r\n                type1: data.data.types[0].type.name,\r\n                type2: data.data.types[1] ? data.data.types[1].type.name : null,\r\n                image: data.data.sprites.other.dream_world.front_default,\r\n            }\r\n        })\r\n\r\n        const dataExtractionSpecies = APIDataSpecies.map(data => {\r\n            return {\r\n                color: data.data.color.name,\r\n                habitat: data.data.habitat.name\r\n            }\r\n        })\r\n\r\n        const attributesAll = dataExtractionPokemon.map((pokemonInfo, index) => {\r\n            const speciesInfo = dataExtractionSpecies[index] || {};\r\n            return {\r\n                ...pokemonInfo,\r\n                ...speciesInfo\r\n            }\r\n        })\r\n\r\n        setPokemonAttributes(attributesAll);\r\n        \r\n    }\r\n\r\n    // ----- Sets the form anwsers and the calculated results for type/habitat received from the Form component -----\r\n    const getFormResults = async (finalScore, formAnswers) => {\r\n        setfinalScore(finalScore);\r\n        setFormAnswers(formAnswers)\r\n    }\r\n\r\n    // ----- If the form hasn't been submitted, return Form. If it has, return results. -----\r\n\treturn (\r\n        <> \r\n        {/* {finalScore.length > 0 ?  */}\r\n        {finalScore == 'batata' ? \r\n            <PokemonResults \r\n                finalScore={finalScore} \r\n                pokemonAttributes={pokemonAttributes} \r\n                evolutionsGroups={evolutionsGroups} \r\n                formAnswers={formAnswers} \r\n            /> \r\n                :\r\n            <Form \r\n                getFormResults={getFormResults} \r\n            />\r\n        }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}