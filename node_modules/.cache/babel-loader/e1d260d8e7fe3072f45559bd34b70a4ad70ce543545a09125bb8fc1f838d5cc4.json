{"ast":null,"code":"import scoreTable from \"../data/scoreTable.json\";\nimport pokemonTypes from \"../data/pokemonTypes.json\";\n\n// ---------- Function do calculate the results of the better ranked types/habitas based on the scoreTable for each option selected by the user ---------- //\nexport const getResults = formAnswers => {\n  // ----- Initializing the score for each type/habitat -----\n  // const score = [\n  // \t{\n  // \t\ttype_habitat: 'bug',\n  // \t\tvalue: 0,\n  // \t},\n  // \t{\n  // \t\ttype_habitat: 'dragon',\n  // \t\tvalue: 0,\n  // \t},\n  // \t{\n  // \t\ttype_habitat: 'electric',\n  // \t\tvalue: 0,\n  // \t},\n  // \t{\n  // \t\ttype_habitat: 'fairy',\n  // \t\tvalue: 0,\n  // \t},\n  // \t{\n  // \t\ttype_habitat: 'fighting',\n  // \t\tvalue: 0,\n  // \t},\n  // \t{\n  // \t\ttype_habitat: 'fire',\n  // \t\tvalue: 0,\n  // \t},\n  // \t{\n  // \t\ttype_habitat: 'flying',\n  // \t\tvalue: 0,\n  // \t},\n  // \t{\n  // \t\ttype_habitat: 'ghost',\n  // \t\tvalue: 0,\n  // \t},\n  // \t{\n  // \t\ttype_habitat: 'grass',\n  // \t\tvalue: 0,\n  // \t},\n  // \t{\n  // \t\ttype_habitat: 'ground',\n  // \t\tvalue: 0,\n  // \t},\n  // \t{\n  // \t\ttype_habitat: 'ice',\n  // \t\tvalue: 0,\n  // \t},\n  // \t{\n  // \t\ttype_habitat: 'normal',\n  // \t\tvalue: 0,\n  // \t},\n  // \t{\n  // \t\ttype_habitat: 'poison',\n  // \t\tvalue: 0,\n  // \t},\n  // \t{\n  // \t\ttype_habitat: 'psychic',\n  // \t\tvalue: 0,\n  // \t},\n  // \t{\n  // \t\ttype_habitat: 'rock',\n  // \t\tvalue: 0,\n  // \t},\n  // \t{\n  // \t\ttype_habitat: 'steel',\n  // \t\tvalue: 0,\n  // \t},\n  // \t{\n  // \t\ttype_habitat: 'water',\n  // \t\tvalue: 0,\n  // \t},\n  // \t{\n  // \t\ttype_habitat: 'cave',\n  // \t\tvalue: 0,\n  // \t},\n  // \t{\n  // \t\ttype_habitat: 'forest',\n  // \t\tvalue: 0,\n  // \t},\n  // \t{\n  // \t\ttype_habitat: 'grassland',\n  // \t\tvalue: 0,\n  // \t},\n  // \t{\n  // \t\ttype_habitat: 'mountain',\n  // \t\tvalue: 0,\n  // \t},\n  // \t{\n  // \t\ttype_habitat: 'roughTerrain',\n  // \t\tvalue: 0,\n  // \t},\n  // \t{\n  // \t\ttype_habitat: 'sea',\n  // \t\tvalue: 0,\n  // \t},\n  // \t{\n  // \t\ttype_habitat: 'urban',\n  // \t\tvalue: 0,\n  // \t},\n  // \t{\n  // \t\ttype_habitat: 'waterEdges',\n  // \t\tvalue: 0,\n  // \t}\n  // ];\n  const score = {};\n  pokemonTypes.forEach(type => {\n    score[type] = 0;\n  });\n  console.log(formAnswers);\n  // ----- Iterating through the user's answers to calculate the results for type/habitat -----\n  for (let answerTitle in formAnswers) {\n    // ----- Finding the index of the matching question inside the scoreTable -----\n    let indexOfScoreInfo = scoreTable.findIndex(scoreInfo => scoreInfo.question === answerTitle);\n    // ----- The 'color' question will return an index of -1 because it's not contained in the scoreTable. So we'll not consider it -----\n    if (indexOfScoreInfo >= 0) {\n      // ----- Finding the index of the matching answer inside the current question -----\n      let indexOfAnswer = scoreTable[indexOfScoreInfo].answers.findIndex(answerScore => answerScore.value === formAnswers[answerTitle]);\n      // ----- Accessing that answer to check the scores defined for it -----\n      let scoresList = scoreTable[indexOfScoreInfo].answers[indexOfAnswer].points;\n      // ----- Iterating through each answer score to update the user's score for each type/habitat -----\n      for (let scoreItem in scoresList) {\n        // ----- Finding the index matching the current type/habitat score -----\n        const scoreIndex = score.findIndex(item => item.type_habitat === scoreItem);\n        // ----- Updating the user's score -----\n        score[scoreIndex].value += scoresList[scoreItem];\n      }\n    }\n  }\n\n  // ----- Sorting the user's score from highest to lowest -----\n  score.sort(function (a, b) {\n    if (b.value > a.value) {\n      return 1;\n    }\n    if (b.value < a.value) {\n      return -1;\n    }\n    return 0;\n  });\n  console.log('finalScore', score);\n  return score;\n};","map":{"version":3,"names":["scoreTable","pokemonTypes","getResults","formAnswers","score","forEach","type","console","log","answerTitle","indexOfScoreInfo","findIndex","scoreInfo","question","indexOfAnswer","answers","answerScore","value","scoresList","points","scoreItem","scoreIndex","item","type_habitat","sort","a","b"],"sources":["C:/Moana_SSD/WebDev/Projetos/pokebuzz/src/services/results.jsx"],"sourcesContent":["\r\nimport scoreTable from \"../data/scoreTable.json\"\r\nimport pokemonTypes from \"../data/pokemonTypes.json\";\r\n\r\n// ---------- Function do calculate the results of the better ranked types/habitas based on the scoreTable for each option selected by the user ---------- //\r\nexport const getResults = (formAnswers) => {\r\n\r\n\t// ----- Initializing the score for each type/habitat -----\r\n\t// const score = [\r\n\t// \t{\r\n\t// \t\ttype_habitat: 'bug',\r\n\t// \t\tvalue: 0,\r\n\t// \t},\r\n\t// \t{\r\n\t// \t\ttype_habitat: 'dragon',\r\n\t// \t\tvalue: 0,\r\n\t// \t},\r\n\t// \t{\r\n\t// \t\ttype_habitat: 'electric',\r\n\t// \t\tvalue: 0,\r\n\t// \t},\r\n\t// \t{\r\n\t// \t\ttype_habitat: 'fairy',\r\n\t// \t\tvalue: 0,\r\n\t// \t},\r\n\t// \t{\r\n\t// \t\ttype_habitat: 'fighting',\r\n\t// \t\tvalue: 0,\r\n\t// \t},\r\n\t// \t{\r\n\t// \t\ttype_habitat: 'fire',\r\n\t// \t\tvalue: 0,\r\n\t// \t},\r\n\t// \t{\r\n\t// \t\ttype_habitat: 'flying',\r\n\t// \t\tvalue: 0,\r\n\t// \t},\r\n\t// \t{\r\n\t// \t\ttype_habitat: 'ghost',\r\n\t// \t\tvalue: 0,\r\n\t// \t},\r\n\t// \t{\r\n\t// \t\ttype_habitat: 'grass',\r\n\t// \t\tvalue: 0,\r\n\t// \t},\r\n\t// \t{\r\n\t// \t\ttype_habitat: 'ground',\r\n\t// \t\tvalue: 0,\r\n\t// \t},\r\n\t// \t{\r\n\t// \t\ttype_habitat: 'ice',\r\n\t// \t\tvalue: 0,\r\n\t// \t},\r\n\t// \t{\r\n\t// \t\ttype_habitat: 'normal',\r\n\t// \t\tvalue: 0,\r\n\t// \t},\r\n\t// \t{\r\n\t// \t\ttype_habitat: 'poison',\r\n\t// \t\tvalue: 0,\r\n\t// \t},\r\n\t// \t{\r\n\t// \t\ttype_habitat: 'psychic',\r\n\t// \t\tvalue: 0,\r\n\t// \t},\r\n\t// \t{\r\n\t// \t\ttype_habitat: 'rock',\r\n\t// \t\tvalue: 0,\r\n\t// \t},\r\n\t// \t{\r\n\t// \t\ttype_habitat: 'steel',\r\n\t// \t\tvalue: 0,\r\n\t// \t},\r\n\t// \t{\r\n\t// \t\ttype_habitat: 'water',\r\n\t// \t\tvalue: 0,\r\n\t// \t},\r\n\t// \t{\r\n\t// \t\ttype_habitat: 'cave',\r\n\t// \t\tvalue: 0,\r\n\t// \t},\r\n\t// \t{\r\n\t// \t\ttype_habitat: 'forest',\r\n\t// \t\tvalue: 0,\r\n\t// \t},\r\n\t// \t{\r\n\t// \t\ttype_habitat: 'grassland',\r\n\t// \t\tvalue: 0,\r\n\t// \t},\r\n\t// \t{\r\n\t// \t\ttype_habitat: 'mountain',\r\n\t// \t\tvalue: 0,\r\n\t// \t},\r\n\t// \t{\r\n\t// \t\ttype_habitat: 'roughTerrain',\r\n\t// \t\tvalue: 0,\r\n\t// \t},\r\n\t// \t{\r\n\t// \t\ttype_habitat: 'sea',\r\n\t// \t\tvalue: 0,\r\n\t// \t},\r\n\t// \t{\r\n\t// \t\ttype_habitat: 'urban',\r\n\t// \t\tvalue: 0,\r\n\t// \t},\r\n\t// \t{\r\n\t// \t\ttype_habitat: 'waterEdges',\r\n\t// \t\tvalue: 0,\r\n\t// \t}\r\n\t// ];\r\n\tconst score = {};\r\n\r\n\tpokemonTypes.forEach(type => {\r\n\t\tscore[type] = 0;\r\n\t});\r\n \r\n\tconsole.log(formAnswers);\r\n\t// ----- Iterating through the user's answers to calculate the results for type/habitat -----\r\n\tfor (let answerTitle in formAnswers) {\r\n\t\t// ----- Finding the index of the matching question inside the scoreTable -----\r\n\t\tlet indexOfScoreInfo = scoreTable.findIndex(scoreInfo => scoreInfo.question === answerTitle);\r\n\t\t// ----- The 'color' question will return an index of -1 because it's not contained in the scoreTable. So we'll not consider it -----\r\n\t\tif (indexOfScoreInfo >= 0) {\r\n\t\t\t// ----- Finding the index of the matching answer inside the current question -----\r\n\t\t\tlet indexOfAnswer = scoreTable[indexOfScoreInfo].answers.findIndex(answerScore => answerScore.value === formAnswers[answerTitle]);\r\n\t\t\t// ----- Accessing that answer to check the scores defined for it -----\r\n\t\t\tlet scoresList = scoreTable[indexOfScoreInfo].answers[indexOfAnswer].points;\r\n\t\t\t// ----- Iterating through each answer score to update the user's score for each type/habitat -----\r\n\t\t\tfor (let scoreItem in scoresList) { \r\n\t\t\t\t// ----- Finding the index matching the current type/habitat score -----\r\n\t\t\t\tconst scoreIndex = score.findIndex(item => item.type_habitat === scoreItem);\r\n\t\t\t\t// ----- Updating the user's score -----\r\n\t\t\t\tscore[scoreIndex].value += scoresList[scoreItem];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// ----- Sorting the user's score from highest to lowest -----\r\n\tscore.sort(function (a, b) {\r\n\t\tif (b.value > a.value) {\r\n\t\t  return 1;\r\n\t\t}\r\n\t\tif (b.value < a.value) {\r\n\t\t  return -1;\r\n\t\t}\r\n\t\treturn 0;\r\n\t  });\r\n\r\n\t  console.log('finalScore', score);\r\n\t  return score;\r\n};\r\n"],"mappings":"AACA,OAAOA,UAAU,MAAM,yBAAyB;AAChD,OAAOC,YAAY,MAAM,2BAA2B;;AAEpD;AACA,OAAO,MAAMC,UAAU,GAAIC,WAAW,IAAK;EAE1C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAMC,KAAK,GAAG,CAAC,CAAC;EAEhBH,YAAY,CAACI,OAAO,CAACC,IAAI,IAAI;IAC5BF,KAAK,CAACE,IAAI,CAAC,GAAG,CAAC;EAChB,CAAC,CAAC;EAEFC,OAAO,CAACC,GAAG,CAACL,WAAW,CAAC;EACxB;EACA,KAAK,IAAIM,WAAW,IAAIN,WAAW,EAAE;IACpC;IACA,IAAIO,gBAAgB,GAAGV,UAAU,CAACW,SAAS,CAACC,SAAS,IAAIA,SAAS,CAACC,QAAQ,KAAKJ,WAAW,CAAC;IAC5F;IACA,IAAIC,gBAAgB,IAAI,CAAC,EAAE;MAC1B;MACA,IAAII,aAAa,GAAGd,UAAU,CAACU,gBAAgB,CAAC,CAACK,OAAO,CAACJ,SAAS,CAACK,WAAW,IAAIA,WAAW,CAACC,KAAK,KAAKd,WAAW,CAACM,WAAW,CAAC,CAAC;MACjI;MACA,IAAIS,UAAU,GAAGlB,UAAU,CAACU,gBAAgB,CAAC,CAACK,OAAO,CAACD,aAAa,CAAC,CAACK,MAAM;MAC3E;MACA,KAAK,IAAIC,SAAS,IAAIF,UAAU,EAAE;QACjC;QACA,MAAMG,UAAU,GAAGjB,KAAK,CAACO,SAAS,CAACW,IAAI,IAAIA,IAAI,CAACC,YAAY,KAAKH,SAAS,CAAC;QAC3E;QACAhB,KAAK,CAACiB,UAAU,CAAC,CAACJ,KAAK,IAAIC,UAAU,CAACE,SAAS,CAAC;MACjD;IACD;EACD;;EAEA;EACAhB,KAAK,CAACoB,IAAI,CAAC,UAAUC,CAAC,EAAEC,CAAC,EAAE;IAC1B,IAAIA,CAAC,CAACT,KAAK,GAAGQ,CAAC,CAACR,KAAK,EAAE;MACrB,OAAO,CAAC;IACV;IACA,IAAIS,CAAC,CAACT,KAAK,GAAGQ,CAAC,CAACR,KAAK,EAAE;MACrB,OAAO,CAAC,CAAC;IACX;IACA,OAAO,CAAC;EACP,CAAC,CAAC;EAEFV,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEJ,KAAK,CAAC;EAChC,OAAOA,KAAK;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}