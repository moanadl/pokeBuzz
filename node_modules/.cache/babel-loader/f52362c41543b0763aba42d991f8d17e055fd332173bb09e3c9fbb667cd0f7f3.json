{"ast":null,"code":"var _jsxFileName = \"C:\\\\Moana_SSD\\\\WebDev\\\\Projetos\\\\pokebuzz\\\\src\\\\components\\\\Question\\\\index.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport Option from \"../Option\";\n\n// ---------- Renders each question of the Form ---------- //\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Question(props) {\n  _s();\n  const options = {\n    colorOptions: ['Black', 'Blue', 'Brown', 'Gray', 'Green', 'Pink', 'Purple', 'Red', 'Yellow', 'White'],\n    transportationOptions: ['Car', 'Airplane', 'Ship', 'Train', 'By foot'],\n    settingOptions: ['Countryside', 'Beach', 'Mountain', 'City', 'Cave'],\n    naturalPhenomenonOptions: ['Volcano', 'Earthquake', 'Tsunami', 'Hurricane', 'Storm', 'Sand storm', 'Blizzard'],\n    activityOptions: ['Pool party', 'Work out', 'Circus', 'Camping', 'Stay in and chill', 'Rally', 'Hiking'],\n    chillOptions: ['Gym', 'Cemetery', 'Mall', 'Pool', 'Library', 'Park', 'Sauna'],\n    taylorOptions: ['Debut', 'Fearless TV', 'Speak Now TV', 'Red TV', '1989 TV', 'Reputation', 'Lover', 'Folklore', 'Evermore', 'Midnights', 'The Tortured Poets Department']\n  };\n\n  // ----- Creating the state for the constants that will be used to set each question -----\n  const [color, setColor] = useState('');\n  const [transportation, setTransportation] = useState('');\n  const [setting, setSetting] = useState('');\n  const [naturalPhenomenon, setNaturalPhenomenon] = useState('');\n  const [activity, setActivity] = useState('');\n  const [placeToChill, setPlaceToChill] = useState('');\n  const [taylorAlbum, setTaylorAlbum] = useState('');\n\n  // ----- Gets the value of each radio button on the Option component for each question -----\n  const getSelectionValue = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    if (name === 'colorOptions') {\n      setColor(value);\n      console.log(color);\n    } else if (name === 'transportationOptions') {\n      setTransportation(value);\n      console.log(transportation);\n    } else if (name === 'settingOptions') {\n      setSetting(value);\n    } else if (name === 'naturalPhenomenonOptions') {\n      setNaturalPhenomenon(value);\n    } else if (name === 'activityOptions') {\n      setActivity(value);\n    } else if (name === 'chillOptions') {\n      setPlaceToChill(value);\n    } else if (name === 'taylorOptions') {\n      setTaylorAlbum(value);\n    }\n  };\n\n  // ----- On any selected radio button uptade -----\n  useEffect(() => {\n    // ----- Calls the prop funcion getFormData with the value oh the radio button selected for each question -----\n    props.getFormData(color, transportation, setting, naturalPhenomenon, activity, placeToChill, taylorAlbum);\n  }, [color, transportation, setting, naturalPhenomenon, activity, placeToChill, taylorAlbum]);\n  return /*#__PURE__*/_jsxDEV(\"fieldset\", {\n    children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n      children: props.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }, this), Object.values(options)[props.index].map(option => /*#__PURE__*/_jsxDEV(Option, {\n      id: `option-${option.toLowerCase().replace(/\\s/g, '')}`,\n      name: Object.keys(options)[props.index],\n      value: option.toLowerCase().replace(/\\s/g, ''),\n      content: option,\n      getData: getSelectionValue\n    }, `option-${option.toLowerCase().replace(/\\s/g, '')}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 21\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 13\n  }, this);\n}\n_s(Question, \"g6iCu5H76IJ2kE+zRzegg/XW1Co=\");\n_c = Question;\nexport default Question;\n\n// Tentar colocar todas as respostas em um objeto ao invés de estados individuais. Fazer tipo foi feito no Form, mas fazer direto aqui, sem precisar mandar tanta variável para o Form.\n// Encurtar caminhos, otimizar processos, reduzir código. KISS.\nvar _c;\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"names":["useState","useEffect","Option","jsxDEV","_jsxDEV","Question","props","_s","options","colorOptions","transportationOptions","settingOptions","naturalPhenomenonOptions","activityOptions","chillOptions","taylorOptions","color","setColor","transportation","setTransportation","setting","setSetting","naturalPhenomenon","setNaturalPhenomenon","activity","setActivity","placeToChill","setPlaceToChill","taylorAlbum","setTaylorAlbum","getSelectionValue","e","name","value","target","console","log","getFormData","children","label","fileName","_jsxFileName","lineNumber","columnNumber","Object","values","index","map","option","id","toLowerCase","replace","keys","content","getData","_c","$RefreshReg$"],"sources":["C:/Moana_SSD/WebDev/Projetos/pokebuzz/src/components/Question/index.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport Option from \"../Option\";\r\n\r\n// ---------- Renders each question of the Form ---------- //\r\nfunction Question (props) {\r\n\r\n    const options = {\r\n        colorOptions: ['Black', 'Blue', 'Brown', 'Gray', 'Green', 'Pink', 'Purple', 'Red', 'Yellow', 'White'],\r\n        transportationOptions: ['Car', 'Airplane', 'Ship', 'Train', 'By foot'],\r\n        settingOptions: ['Countryside', 'Beach', 'Mountain', 'City', 'Cave'],\r\n        naturalPhenomenonOptions: ['Volcano', 'Earthquake', 'Tsunami', 'Hurricane', 'Storm', 'Sand storm', 'Blizzard'],\r\n        activityOptions: ['Pool party', 'Work out', 'Circus', 'Camping', 'Stay in and chill', 'Rally', 'Hiking'],\r\n        chillOptions: ['Gym', 'Cemetery', 'Mall', 'Pool', 'Library', 'Park', 'Sauna'],\r\n        taylorOptions: ['Debut', 'Fearless TV', 'Speak Now TV', 'Red TV', '1989 TV', 'Reputation', 'Lover', 'Folklore', 'Evermore', 'Midnights', 'The Tortured Poets Department']\r\n    }\r\n\r\n    // ----- Creating the state for the constants that will be used to set each question -----\r\n    const [color, setColor] = useState('');\r\n\tconst [transportation, setTransportation] = useState('');\r\n\tconst [setting, setSetting] = useState('');\r\n\tconst [naturalPhenomenon, setNaturalPhenomenon] = useState('');\r\n\tconst [activity, setActivity] = useState('');\r\n\tconst [placeToChill, setPlaceToChill] = useState('');\r\n\tconst [taylorAlbum, setTaylorAlbum] = useState('');\r\n\r\n    // ----- Gets the value of each radio button on the Option component for each question -----\r\n\tconst getSelectionValue = (e) => {\r\n        const {name, value} = e.target;\r\n\r\n\t\tif (name === 'colorOptions') {\r\n\t\t\tsetColor(value)\r\n            console.log(color);\r\n\t\t} else if (name === 'transportationOptions') {\r\n\t\t\tsetTransportation(value);\r\n            console.log(transportation);\r\n\t\t} else if (name === 'settingOptions') {\r\n\t\t\tsetSetting(value);\r\n\t\t} else if (name === 'naturalPhenomenonOptions') {\r\n\t\t\tsetNaturalPhenomenon(value);\r\n\t\t} else if (name === 'activityOptions') {\r\n\t\t\tsetActivity(value);\r\n\t\t} else if (name === 'chillOptions') {\r\n\t\t\tsetPlaceToChill(value);\r\n\t\t} else if (name === 'taylorOptions') {\r\n\t\t\tsetTaylorAlbum(value);\r\n\t\t}\r\n    \r\n\t}\r\n\r\n    // ----- On any selected radio button uptade -----\r\n    useEffect(() => {\r\n        // ----- Calls the prop funcion getFormData with the value oh the radio button selected for each question -----\r\n        props.getFormData(color, transportation, setting, naturalPhenomenon, activity, placeToChill, taylorAlbum)\r\n    }, [color, transportation, setting, naturalPhenomenon, activity, placeToChill, taylorAlbum]\r\n    );\r\n\r\n\treturn (\r\n            <fieldset>\r\n                <legend>{props.label}</legend>\r\n                {Object.values(options)[props.index].map(option => \r\n                    <Option \r\n                        key={`option-${option.toLowerCase().replace(/\\s/g, '')}`} \r\n                        id={`option-${option.toLowerCase().replace(/\\s/g, '')}`} \r\n                        name={Object.keys(options)[props.index]} \r\n                        value={option.toLowerCase().replace(/\\s/g, '')} \r\n                        content={option} \r\n                        getData={getSelectionValue} />\r\n                )}\r\n            </fieldset>\r\n\t)\r\n}\r\n\r\nexport default Question;\r\n\r\n// Tentar colocar todas as respostas em um objeto ao invés de estados individuais. Fazer tipo foi feito no Form, mas fazer direto aqui, sem precisar mandar tanta variável para o Form.\r\n// Encurtar caminhos, otimizar processos, reduzir código. KISS.\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}