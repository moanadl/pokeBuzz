{"ast":null,"code":"import scoreTable from \"../data/scoreTable.json\";\nimport pokemonTypes from \"../data/pokemonTypes.json\";\n\n// ---------- Function do calculate the results of the better ranked types/habitas based on the scoreTable for each option selected by the user ---------- //\nexport const getResults = formAnswers => {\n  // ----- Initializing the score for each type/habitat -----\n  const score = {};\n\n  // Creating the object\n  pokemonTypes.forEach(type => {\n    score[type] = 0;\n  });\n\n  // ----- Iterating through the user's answers to calculate the results for type/habitat -----\n  Object.entries(formAnswers).forEach(([questionForm, answerForm]) => {\n    const questionInfo = scoreTable.find(questionTitle => questionTitle.question === questionForm);\n    if (!questionInfo) return; // Color option\n    console.log(questionInfo);\n    const answerInfo = questionInfo.answers.find(a => a.value === answerForm);\n    if (!answerInfo) return;\n    Object.entries(answerInfo.points).forEach(([type, points]) => {\n      score[type] += points;\n    });\n  });\n\n  // ----- Sorting the user's score from highest to lowest -----\n  // score.sort(function (a, b) {\n  // \tif (b.value > a.value) {\n  // \t  return 1;\n  // \t}\n  // \tif (b.value < a.value) {\n  // \t  return -1;\n  // \t}\n  // \treturn 0;\n  //   });\n\n  console.log('finalScore', score);\n  return score;\n};","map":{"version":3,"names":["scoreTable","pokemonTypes","getResults","formAnswers","score","forEach","type","Object","entries","questionForm","answerForm","questionInfo","find","questionTitle","question","console","log","answerInfo","answers","a","value","points"],"sources":["C:/Moana_SSD/WebDev/Projetos/pokebuzz/src/services/results.jsx"],"sourcesContent":["\r\nimport scoreTable from \"../data/scoreTable.json\"\r\nimport pokemonTypes from \"../data/pokemonTypes.json\";\r\n\r\n// ---------- Function do calculate the results of the better ranked types/habitas based on the scoreTable for each option selected by the user ---------- //\r\nexport const getResults = (formAnswers) => {\r\n\r\n\t// ----- Initializing the score for each type/habitat -----\r\n\tconst score = {};\r\n\r\n\t// Creating the object\r\n\tpokemonTypes.forEach(type => {\r\n\t\tscore[type] = 0;\r\n\t});\r\n\r\n\t// ----- Iterating through the user's answers to calculate the results for type/habitat -----\r\n\tObject.entries(formAnswers).forEach(([questionForm, answerForm]) => {\r\n\t\tconst questionInfo = scoreTable.find(questionTitle => questionTitle.question === questionForm);\r\n\t\tif (!questionInfo) return // Color option\r\n\t\tconsole.log(questionInfo)\r\n\r\n\t\tconst answerInfo = questionInfo.answers.find(a => a.value === answerForm);\r\n\t\tif (!answerInfo) return\r\n\r\n\t\tObject.entries(answerInfo.points).forEach(([type, points]) => {\r\n\t\t\tscore[type] += points;\r\n\t\t})\r\n\t})\r\n\r\n\t// ----- Sorting the user's score from highest to lowest -----\r\n\t// score.sort(function (a, b) {\r\n\t// \tif (b.value > a.value) {\r\n\t// \t  return 1;\r\n\t// \t}\r\n\t// \tif (b.value < a.value) {\r\n\t// \t  return -1;\r\n\t// \t}\r\n\t// \treturn 0;\r\n\t//   });\r\n\r\n\t  console.log('finalScore', score);\r\n\t  return score;\r\n};\r\n"],"mappings":"AACA,OAAOA,UAAU,MAAM,yBAAyB;AAChD,OAAOC,YAAY,MAAM,2BAA2B;;AAEpD;AACA,OAAO,MAAMC,UAAU,GAAIC,WAAW,IAAK;EAE1C;EACA,MAAMC,KAAK,GAAG,CAAC,CAAC;;EAEhB;EACAH,YAAY,CAACI,OAAO,CAACC,IAAI,IAAI;IAC5BF,KAAK,CAACE,IAAI,CAAC,GAAG,CAAC;EAChB,CAAC,CAAC;;EAEF;EACAC,MAAM,CAACC,OAAO,CAACL,WAAW,CAAC,CAACE,OAAO,CAAC,CAAC,CAACI,YAAY,EAAEC,UAAU,CAAC,KAAK;IACnE,MAAMC,YAAY,GAAGX,UAAU,CAACY,IAAI,CAACC,aAAa,IAAIA,aAAa,CAACC,QAAQ,KAAKL,YAAY,CAAC;IAC9F,IAAI,CAACE,YAAY,EAAE,OAAM,CAAC;IAC1BI,OAAO,CAACC,GAAG,CAACL,YAAY,CAAC;IAEzB,MAAMM,UAAU,GAAGN,YAAY,CAACO,OAAO,CAACN,IAAI,CAACO,CAAC,IAAIA,CAAC,CAACC,KAAK,KAAKV,UAAU,CAAC;IACzE,IAAI,CAACO,UAAU,EAAE;IAEjBV,MAAM,CAACC,OAAO,CAACS,UAAU,CAACI,MAAM,CAAC,CAAChB,OAAO,CAAC,CAAC,CAACC,IAAI,EAAEe,MAAM,CAAC,KAAK;MAC7DjB,KAAK,CAACE,IAAI,CAAC,IAAIe,MAAM;IACtB,CAAC,CAAC;EACH,CAAC,CAAC;;EAEF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEEN,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEZ,KAAK,CAAC;EAChC,OAAOA,KAAK;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}